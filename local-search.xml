<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot-Dubbo/Zookeeper</title>
    <link href="/2022/10/21/SpringBoot-Dubbo-Zookeeper/"/>
    <url>/2022/10/21/SpringBoot-Dubbo-Zookeeper/</url>
    
    <content type="html"><![CDATA[<h1 id="1-分布式系统理论"><a href="#1-分布式系统理论" class="headerlink" title="1. 分布式系统理论"></a>1. 分布式系统理论</h1><h2 id="1-1-什么是分布式系统"><a href="#1-1-什么是分布式系统" class="headerlink" title="1.1 什么是分布式系统"></a>1.1 什么是分布式系统</h2><ol><li>分布式系统是若干个独立计算机的集合，这些计算机对于用户来说就像单个相关系统。</li><li>分布式系统是一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。</li><li>分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据</li></ol><h2 id="1-2-系统架构的演变背景"><a href="#1-2-系统架构的演变背景" class="headerlink" title="1.2 系统架构的演变背景"></a>1.2 系统架构的演变背景</h2><blockquote><p>Dubbo原本是阿里巴巴的现在是apache的</p><p>Dubbo入门文档：<a href="https://dubbo.apache.org/zh/overview/">https://dubbo.apache.org/zh/overview/</a></p></blockquote><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，只需一个治理系统确保架构有条不紊的演进。<br><img src="https://img.yiqiangshiyia.cn/blog/img-001.jpg" alt="img-001"></p><blockquote><p><strong>单一应用架构</strong></p></blockquote><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p>适用于小型网站、小型管理系统、将所有的功能都部署到一个功能里，简单易学。<br>缺点：</p><ul><li>性能扩展比较难</li><li>协同开发问题</li><li>不利于升级维护</li></ul><blockquote><p><strong>垂直应用架构</strong></p></blockquote><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架（MVC）是关键。</p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。<br>缺点：</p><ul><li>公用模块无法重复利用，开发性的浪费</li></ul><blockquote><p><strong>分布式服务架构</strong></p></blockquote><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p><blockquote><p><strong>流动计算架构</strong></p></blockquote><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心(SOA)是关键。</strong></p><h1 id="2-RPC"><a href="#2-RPC" class="headerlink" title="2. RPC"></a>2. RPC</h1><h2 id="2-1-什么是RPC"><a href="#2-1-什么是RPC" class="headerlink" title="2.1 什么是RPC"></a>2.1 什么是RPC</h2><blockquote><p>RPC是<strong>远程过程调用</strong>（Remote Procedure Call）的缩写形式。SAP系统RPC调用的原理其实很简单，有一些类似于三层构架的C/S系统，第三方的客户程序通过接口调用SAP内部的标准或自定义函数，获得函数返回的数据进行处理后显示或打印。</p></blockquote><ul><li>RPC（Remote Procedure Call）是指远程过程调用，是一种进程间的通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</li><li>它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据</li></ul><h2 id="2-2-RPC工作原理"><a href="#2-2-RPC工作原理" class="headerlink" title="2.2 RPC工作原理"></a>2.2 RPC工作原理</h2><p><img src="https://img.yiqiangshiyia.cn/blog/img-002.jpg" alt="img-002"></p><p>RPC两个核心模块：通信、序列化。</p><p>序列化：数据传输需要转换</p><blockquote><p><strong>RPC 调用分以下两种：</strong></p></blockquote><ul><li>同步调用： 客户方等待调用执行完成并返回结果。</li><li>异步调用： 客户方调用后不用等待执行结果返回，但依然可以通过回调通知等方式获取返回结果。若客户方不关心调用返回结果，则变成单向异步调用，单向调用不用返回结果。</li></ul><blockquote><p><strong>一次完整的RPC调用流程（同步调用）如下：</strong></p></blockquote><ol><li>服务消费方（client）调用以本地调用方式调用服务</li><li>client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体</li><li>client stub找到服务地址，并将消息发送到服务端</li><li>server stub收到消息后进行解码</li><li>server stub根据解码结果调用本地的服务</li><li>本地服务执行并将结果返回给server stub</li><li>server stub将返回结果打包成消息并发送至消费方</li><li>client stub接收到消息，并进行解码</li><li>服务消费方得到最终结果</li></ol><p>RPC框架的目标就是要2-8这些步骤都封装起来，让用户对这些细节透明。</p><h1 id="3-Doubbo"><a href="#3-Doubbo" class="headerlink" title="3. Doubbo"></a>3. Doubbo</h1><p><strong>Dubbo官方文档：<a href="https://dubbo.apache.org/zh/overview/">https://dubbo.apache.org/zh/overview/</a></strong></p><h2 id="3-1-什么是Dubbo"><a href="#3-1-什么是Dubbo" class="headerlink" title="3.1 什么是Dubbo"></a>3.1 什么是Dubbo</h2><blockquote><p>Apache Dubbo 是一款 RPC 微服务框架，提供了包括 Java、Golang 等在内的多种语言 SDK 实现。</p><p>Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个高性能优秀的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6?fromModule=lemma_inlink">服务框架</a>，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 [1] <a href="https://baike.baidu.com/item/Spring?fromModule=lemma_inlink">Spring</a>框架无缝集成。</p><p>Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p></blockquote><p>Apache Dubbo提供了六大核心能力：面向接口代理的高性能RPC调用，智能容错和负载均衡，服务自动注册和发现，高度可扩展能力，运行期流量调度，可视化的服务治理与运维。<br><img src="https://img.yiqiangshiyia.cn/blog/img-003.png" alt="img-003"></p><h2 id="3-2-Dubbo-架构"><a href="#3-2-Dubbo-架构" class="headerlink" title="3.2 Dubbo 架构"></a>3.2 Dubbo 架构</h2><p><img src="https://img.yiqiangshiyia.cn/blog/img-004.jpg" alt="img-004"></p><blockquote><p><strong>节点角色说明：</strong></p></blockquote><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><blockquote><p><strong>调用关系说明：</strong></p></blockquote><ul><li>0：服务容器负责启动，加载，运行服务提供者。</li><li>1：服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>2：服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>3：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>4：服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>5：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ul><h2 id="3-3-Dubbo架构特点"><a href="#3-3-Dubbo架构特点" class="headerlink" title="3.3 Dubbo架构特点"></a>3.3 Dubbo架构特点</h2><p>Dubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。</p><blockquote><p><strong>连通性：</strong></p></blockquote><ul><li>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小</li><li>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示</li><li>服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销</li><li>服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销</li><li>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外</li><li>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者</li><li>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表</li><li>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</li></ul><blockquote><p><strong>健壮性：</strong></p></blockquote><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><blockquote><p><strong>伸缩性：</strong></p></blockquote><ul><li>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心</li><li>服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者</li></ul><blockquote><p><strong>升级性：</strong></p></blockquote><p>当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力。下图是未来可能的一种架构：</p><p><img src="https://img.yiqiangshiyia.cn/blog/img-005.jpg" alt="img-005"></p><blockquote><p><strong>节点角色说明：</strong></p></blockquote><table><thead><tr><th align="left">节点</th><th align="left">角色说明</th></tr></thead><tbody><tr><td align="left">Deployer</td><td align="left">自动部署服务的本地代理</td></tr><tr><td align="left">Repository</td><td align="left">仓库用于存储服务应用发布包</td></tr><tr><td align="left">Scheduler</td><td align="left">调度中心基于访问压力自动增减服务提供者</td></tr><tr><td align="left">Admin</td><td align="left">统一管理控制台</td></tr><tr><td align="left">Registry</td><td align="left">服务注册与发现的注册中心</td></tr><tr><td align="left">Monitor</td><td align="left">统计服务的调用次数和调用时间的监控中心</td></tr></tbody></table><h1 id="4-Zookeeper"><a href="#4-Zookeeper" class="headerlink" title="4. Zookeeper"></a>4. Zookeeper</h1><h2 id="4-1-什么是Zookeeper"><a href="#4-1-什么是Zookeeper" class="headerlink" title="4.1 什么是Zookeeper"></a>4.1 什么是Zookeeper</h2><blockquote><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232?fromModule=lemma_inlink">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/9854429?fromModule=lemma_inlink">分布式应用程序</a>协调服务，是<a href="https://baike.baidu.com/item/Google?fromModule=lemma_inlink">Google</a>的Chubby一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/246339?fromModule=lemma_inlink">开源</a>的实现，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213?fromModule=lemma_inlink">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-Shiro</title>
    <link href="/2022/10/18/SpringBoot-Shiro/"/>
    <url>/2022/10/18/SpringBoot-Shiro/</url>
    
    <content type="html"><![CDATA[<p>文档：<a href="https://www.kuangstudy.com/bbs/1356997942396891138">https://www.kuangstudy.com/bbs/1356997942396891138</a></p><h1 id="1-Shiro概述"><a href="#1-Shiro概述" class="headerlink" title="1. Shiro概述"></a>1. Shiro概述</h1><h2 id="1-1-Shiro简介"><a href="#1-1-Shiro简介" class="headerlink" title="1.1 Shiro简介"></a>1.1 Shiro简介</h2><p>下载地址：</p><ul><li>Shiro官网：<a href="http://shiro.apache.org/">http://shiro.apache.org/</a></li><li>Github：<a href="https://github.com/apache/shiro">https://github.com/apache/shiro</a></li></ul><blockquote><p>Apache Shiro是一个强大且易用的Java安全框架,执行<strong>身份验证、授权、密码和会话管理</strong>。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p></blockquote><blockquote><p><strong>主要功能</strong></p><p>三个核心组件：Subject, SecurityManager 和 Realms.</p><p>Subject：即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。</p><p>Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。</p><p>SecurityManager：它是Shiro框架的核心，典型的<a href="https://baike.baidu.com/item/Facade%E6%A8%A1%E5%BC%8F/7557140?fromModule=lemma_inlink">Facade模式</a>，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。</p><p>Realm： Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。</p><p>从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。</p><p>Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果系统默认的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。</p></blockquote><h2 id="1-2-Shiro功能"><a href="#1-2-Shiro功能" class="headerlink" title="1.2 Shiro功能"></a>1.2 Shiro功能</h2><p><img src="https://img.yiqiangshiyia.cn/blog/shiro-001.png" alt="shiro-001"></p><ul><li>Authentication:身份认证/登录，验证用户是不是拥有相应的身份</li><li>Authorization:授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能进行什么操作，如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限</li><li>Session Management:会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境，也可以是Web 环境的</li><li>Cryptography:加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储</li><li>Web Support:Web 支持，可以非常容易的集成到Web 环境</li><li>Caching:缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率</li><li>Concurrency:Shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去</li><li>Testing:提供测试支持</li><li>“Run As”:允许一个用户假装为另一个用户（如果他们允许）的身份进行访问</li><li>Remember Me:记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</li></ul><h2 id="1-3-Shiro外部架构"><a href="#1-3-Shiro外部架构" class="headerlink" title="1.3 Shiro外部架构"></a>1.3 Shiro外部架构</h2><p>从外部来看Shiro，即从应用程序角度的来观察如何使用Shiro完成工作</p><p><img src="https://img.yiqiangshiyia.cn/blog/shiro-002.png" alt="shiro-002"></p><ul><li><strong>Subject</strong>：应用代码直接交互的对象是Subject，也就是说Shiro的对外API 核心就是Subject。Subject 代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；与Subject 的所有交互都会委托给SecurityManager；Subject 其实是一个门面，SecurityManager才是实际的执行者</li><li><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且其管理着所有Subject；可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于SpringMVC中DispatcherServlet的角色</li><li><strong>Realm</strong>：Shiro从Realm 获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm 看成DataSource</li></ul><h2 id="1-4-Shiro内部架构"><a href="#1-4-Shiro内部架构" class="headerlink" title="1.4 Shiro内部架构"></a>1.4 Shiro内部架构</h2><p><img src="https://img.yiqiangshiyia.cn/blog/shiro-003.png" alt="shiro-003"></p><ul><li>Subject：任何可以与应用交互的“用户”。</li><li>SecurityManager：相当于SpringMVC中的DispatcherServlet；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证、授权、会话及缓存的管理。</li><li>Authenticator：负责Subject 认证，是一个扩展点，可以自定义实现；可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了。</li><li>Authorizer：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能。</li><li>Realm：可以有1 个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的Realm。</li><li>SessionManager：管理Session 生命周期的组件；而Shiro并不仅仅可以用在Web 环境，也可以用在如普通的JavaSE环境。<br>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能。</li><li>Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密。</li></ul><h1 id="2-QuickStart"><a href="#2-QuickStart" class="headerlink" title="2. QuickStart"></a>2. QuickStart</h1><ul><li>官方文档：<a href="http://shiro.apache.org/tutorial.html">http://shiro.apache.org/tutorial.html</a></li><li>官方的QuickStart : <a href="https://github.com/apache/shiro/tree/master/samples/quickstart/">https://github.com/apache/shiro/tree/master/samples/quickstart/</a></li></ul><p><strong>快速开始：</strong></p><ol><li><p>新建项目</p></li><li><p>导入Shiro的依赖</p><p>官方Shiro依赖：<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/pom.xml">https://github.com/apache/shiro/blob/master/samples/quickstart/pom.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- configure logging --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置相关文件</p><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">INFO, stdout</span><br><span class="hljs-attr">log4j.appender.stdout</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.stdout.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] - %m %n</span><br><span class="hljs-comment"># General Apache libraries</span><br><span class="hljs-attr">log4j.logger.org.apache</span>=<span class="hljs-string">WARN</span><br><span class="hljs-comment"># Spring</span><br><span class="hljs-attr">log4j.logger.org.springframework</span>=<span class="hljs-string">WARN</span><br><span class="hljs-comment"># Default Shiro logging</span><br><span class="hljs-attr">log4j.logger.org.apache.shiro</span>=<span class="hljs-string">INFO</span><br><span class="hljs-comment"># Disable verbose logging</span><br><span class="hljs-attr">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="hljs-string">WARN</span><br><span class="hljs-attr">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span>=<span class="hljs-string">WARN</span><br></code></pre></td></tr></table></figure><p>shiro.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[users]</span><br><span class="hljs-comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span><br><span class="hljs-attr">root</span> = secret, admin<br><span class="hljs-comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span><br><span class="hljs-attr">guest</span> = guest, guest<br><span class="hljs-comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span><br><span class="hljs-comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span><br><span class="hljs-attr">presidentskroob</span> = <span class="hljs-number">12345</span>, president<br><span class="hljs-comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span><br><span class="hljs-attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz<br><span class="hljs-comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span><br><span class="hljs-attr">lonestarr</span> = vespa, goodguy, schwartz<br><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># Roles with assigned permissions</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># Each line conforms to the format defined in the</span><br><span class="hljs-comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-section">[roles]</span><br><span class="hljs-comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span><br><span class="hljs-attr">admin</span> = *<br><span class="hljs-comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span><br><span class="hljs-attr">schwartz</span> = lightsaber:*<br><span class="hljs-comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span><br><span class="hljs-comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span><br><span class="hljs-attr">goodguy</span> = winnebago:drive:eagle5<br></code></pre></td></tr></table></figure><p>启动类 Quickstart</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.*;<br><span class="hljs-keyword">import</span> org.apache.shiro.ini.IniSecurityManagerFactory;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.SecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.session.Session;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.apache.shiro.lang.util.Factory;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Simple Quickstart application showing how to use Shiro&#x27;s API.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 0.9 RC2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Quickstart</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Quickstart.class);<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// The easiest way to create a Shiro SecurityManager with configured</span><br>        <span class="hljs-comment">// realms, users, roles and permissions is to use the simple INI config.</span><br>        <span class="hljs-comment">// We&#x27;ll do that by using a factory that can ingest a .ini file and</span><br>        <span class="hljs-comment">// return a SecurityManager instance:</span><br><br>        <span class="hljs-comment">// Use the shiro.ini file at the root of the classpath</span><br>        <span class="hljs-comment">// (file: and url: prefixes load from files and urls respectively):</span><br>        Factory&lt;SecurityManager&gt; factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IniSecurityManagerFactory</span>(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>);<br>        <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> factory.getInstance();<br><br>        <span class="hljs-comment">// for this simple example quickstart, make the SecurityManager</span><br>        <span class="hljs-comment">// accessible as a JVM singleton.  Most applications wouldn&#x27;t do this</span><br>        <span class="hljs-comment">// and instead rely on their container configuration or web.xml for</span><br>        <span class="hljs-comment">// webapps.  That is outside the scope of this simple quickstart, so</span><br>        <span class="hljs-comment">// we&#x27;ll just do the bare minimum so you can continue to get a feel</span><br>        <span class="hljs-comment">// for things.</span><br>        SecurityUtils.setSecurityManager(securityManager);<br><br>        <span class="hljs-comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span><br><br>        <span class="hljs-comment">// get the currently executing user:</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br><br>        <span class="hljs-comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span><br>        <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> currentUser.getSession();<br>        session.setAttribute(<span class="hljs-string">&quot;someKey&quot;</span>, <span class="hljs-string">&quot;aValue&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) session.getAttribute(<span class="hljs-string">&quot;someKey&quot;</span>);<br>        <span class="hljs-keyword">if</span> (value.equals(<span class="hljs-string">&quot;aValue&quot;</span>)) &#123;<br>            log.info(<span class="hljs-string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// let&#x27;s login the current user so we can check against roles and permissions:</span><br>        <span class="hljs-keyword">if</span> (!currentUser.isAuthenticated()) &#123;<br>            <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;lonestarr&quot;</span>, <span class="hljs-string">&quot;vespa&quot;</span>);<br>            token.setRememberMe(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                currentUser.login(token);<br>            &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException uae) &#123;<br>                log.info(<span class="hljs-string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());<br>            &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException ice) &#123;<br>                log.info(<span class="hljs-string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="hljs-string">&quot; was incorrect!&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (LockedAccountException lae) &#123;<br>                log.info(<span class="hljs-string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="hljs-string">&quot; is locked.  &quot;</span> +<br>                        <span class="hljs-string">&quot;Please contact your administrator to unlock it.&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span><br>            <span class="hljs-keyword">catch</span> (AuthenticationException ae) &#123;<br>                <span class="hljs-comment">//unexpected condition?  error?</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//say who they are:</span><br>        <span class="hljs-comment">//print their identifying principal (in this case, a username):</span><br>        log.info(<span class="hljs-string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="hljs-string">&quot;] logged in successfully.&quot;</span>);<br><br>        <span class="hljs-comment">//test a role:</span><br>        <span class="hljs-keyword">if</span> (currentUser.hasRole(<span class="hljs-string">&quot;schwartz&quot;</span>)) &#123;<br>            log.info(<span class="hljs-string">&quot;May the Schwartz be with you!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;Hello, mere mortal.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//test a typed permission (not instance-level)</span><br>        <span class="hljs-keyword">if</span> (currentUser.isPermitted(<span class="hljs-string">&quot;lightsaber:wield&quot;</span>)) &#123;<br>            log.info(<span class="hljs-string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//a (very powerful) Instance Level permission:</span><br>        <span class="hljs-keyword">if</span> (currentUser.isPermitted(<span class="hljs-string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;<br>            log.info(<span class="hljs-string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +<br>                    <span class="hljs-string">&quot;Here are the keys - have fun!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//all done - log out!</span><br>        currentUser.logout();<br><br>        System.exit(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="3-SpringBoot整合Shiro环境搭建"><a href="#3-SpringBoot整合Shiro环境搭建" class="headerlink" title="3. SpringBoot整合Shiro环境搭建"></a>3. SpringBoot整合Shiro环境搭建</h1><blockquote><p><strong>SpringBoot整合Shiro环境搭建：</strong></p></blockquote><ol><li><p>新建项目</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试环境</p><p>新建一个controller页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toIndex</span><span class="hljs-params">(Model model)</span> &#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,Shiro&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/user/add&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/add&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/user/update&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/update&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建一个index.html页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   | <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建一个add.html页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建一个update.html页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>导入shiro整合spring的包</p><p>官网：<a href="https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring">https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--shiro整合spring的包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写导入配置类</p><p><strong>Shiro三大对象：</strong></p><ul><li>Subject  用户</li><li>SecurityManager 管理所有用户</li><li>Realm 连接数据库</li></ul><p>编写Shiro核心配置：UserRealm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义的UserRealm</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-comment">//授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了=&gt;授权doGetAuthorizationInfo&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了=&gt;认证doGetAuthorizationInfo&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写Shiro核心配置：ShiroConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroConfig</span> &#123;<br>    <span class="hljs-comment">//3. shiroFilterFactoryBean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title function_">getShiroFilterFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;<br>        <span class="hljs-type">ShiroFilterFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>        <span class="hljs-comment">// 设置安全管理器</span><br>        bean.setSecurityManager(defaultWebSecurityManager);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-comment">//2. DefaultWebSecurityManager</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title function_">getDefaultWebSecurityManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;<br>        <span class="hljs-type">DefaultWebSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultWebSecurityManager</span>();<br>        <span class="hljs-comment">// 关联userRealm</span><br>        securityManager.setRealm(userRealm);<br>        <span class="hljs-keyword">return</span> securityManager;<br>    &#125;<br>    <span class="hljs-comment">//1. 创建realm对象，需要自定义类</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserRealm <span class="hljs-title function_">userRealm</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRealm</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="4-Shiro实现登录拦截"><a href="#4-Shiro实现登录拦截" class="headerlink" title="4. Shiro实现登录拦截"></a>4. Shiro实现登录拦截</h1><ul><li><p>实现登录拦截需要在 ShiroConfig 中的 getShiroFilterFactoryBean 方法中添加如下配置</p><ul><li>anon： 无需认证就可以访问</li><li>authc： 必须认证了才能访问</li><li>user： 必须拥有记住我功能才能用</li><li>perms： 拥有对某个资源的权限才能访问</li><li>role： 拥有某个角色权限</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加Shiro的内置过滤器</span><br>Map&lt;String, String&gt; filterMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>filterMap.put(<span class="hljs-string">&quot;/user/add&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);<br>filterMap.put(<span class="hljs-string">&quot;/user/update&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);<br>bean.setFilterChainDefinitionMap(filterMap);<br></code></pre></td></tr></table></figure></li><li><p>点击首页的add或者update</p><p>add页面和update页面无法访问</p></li><li><p>添加拦截成功页面</p><p>登录页面login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在MyConfig中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toLogin&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 ShiroConfig 中的 getShiroFilterFactoryBea 方法中添加如下配置，使页面被拦截后跳转到登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置登录的请求</span><br>bean.setLoginUrl(<span class="hljs-string">&quot;/toLogin&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>拦截成功页面</p><p>点击首页的add或者update，页面被拦截后跳转到登录页面</p></li></ul><h1 id="5-Shiro实现用户认证"><a href="#5-Shiro实现用户认证" class="headerlink" title="5. Shiro实现用户认证"></a>5. Shiro实现用户认证</h1><ol><li><p>在 MyController 中编写用户提交表单之后处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password, Model model)</span> &#123;<br>    <span class="hljs-comment">//获取一个用户</span><br>    <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>    <span class="hljs-comment">// 封装用户的登录数据</span><br>    <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(username, password);<br>    <span class="hljs-keyword">try</span> &#123;<br>        subject.login(token); <span class="hljs-comment">//执行登录的方法，如果没有异常就说明成功了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123; <span class="hljs-comment">//用户名不存在</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名错误&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123; <span class="hljs-comment">//密码不存在</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>login.html的修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>用户输入登录信息</p><p>前端页面：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221019212055.png" alt="QQ截图20221019212055"></p><p>控制台输出：说明进入了doGetAuthenticationInfo方法，可以在方法中添加认证用户的name和password部分的代码，也可以在方法中整合数据库</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221019212234.png" alt="QQ截图20221019212234"></p></li><li><p>编写 UserRealm 中的认证</p><p>认证用户登录的 name 和 password</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//认证</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>    System.out.println(<span class="hljs-string">&quot;执行了=&gt;认证doGetAuthorizationInfo&quot;</span>);<br>    <span class="hljs-comment">// 用户名、密码， 数据中取</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">userToken</span> <span class="hljs-operator">=</span> (UsernamePasswordToken) token;<br>    <span class="hljs-keyword">if</span> (!userToken.getUsername().equals(name)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//抛出异常 UnknownAccountException</span><br>    &#125;<br>    <span class="hljs-comment">// 密码认证shiro做</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(<span class="hljs-string">&quot;&quot;</span>,password,<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="6-Shiro整合Mybatis"><a href="#6-Shiro整合Mybatis" class="headerlink" title="6. Shiro整合Mybatis"></a>6. Shiro整合Mybatis</h1><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入mybatis，这是MyBatis官方提供的适配spring Boot的，而不是spring Boot自己的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置文件application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">admin</span><br>    <span class="hljs-comment">#?serverTimezone=UTC解决时区的报错</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span><br>    <span class="hljs-comment">#druid 数据源专有配置</span><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span><br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span><br>    <span class="hljs-comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span><br>    <span class="hljs-comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span><br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">nuc.ss.pojo</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></td></tr></table></figure></li><li><p>编写User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UserMapper.xml映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">     <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;nuc.ss.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from mybatis.user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from mybatis.user where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        update mybatis.user set name=#&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from mybatis.user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>UserService接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserByName</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UserServiceImpl业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserMapper userMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserByName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.queryUserByName(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroSpringbootApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userService.queryUserByName(<span class="hljs-string">&quot;林慕椿&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UserRealm 连接真实数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//认证</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>    System.out.println(<span class="hljs-string">&quot;执行了=&gt;认证doGetAuthorizationInfo&quot;</span>);<br>    <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">userToken</span> <span class="hljs-operator">=</span> (UsernamePasswordToken) token;<br>    <span class="hljs-comment">// 真实数据库 用户名、密码， 数据中取</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.queryUserByName(userToken.getUsername());<br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//没有这个人</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 密码认证，shiro做</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(<span class="hljs-string">&quot;&quot;</span>,user.getPwd(),<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>断点测试密码加密类型</p></li></ol><h1 id="7-Shiro实现用户授权"><a href="#7-Shiro实现用户授权" class="headerlink" title="7. Shiro实现用户授权"></a>7. Shiro实现用户授权</h1><ol><li><p>ShiroConfig 中的 getShiroFilterFactoryBean 方法添加认证代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//授权，正常情况下，没有授权会跳转到为授权页面</span><br>filterMap.put(<span class="hljs-string">&quot;/user/add&quot;</span>,<span class="hljs-string">&quot;perms[user:add]&quot;</span>);<br><span class="hljs-comment">//filterMap.put(&quot;/user/update&quot;,&quot;perms[user:update]&quot;);</span><br></code></pre></td></tr></table></figure></li><li><p>登录之后点击add按钮会弹出如下页面</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221019215851.png" alt="QQ截图20221019215851"></p></li><li><p>添加未授权页面</p><p>MyController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/noauto&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">unauthorized</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;未经授权，无法访问此页面&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ShiroConfig 中的 getShiroFilterFactoryBean 方法中添加，如果未授权则跳转到未授权页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//未授权页面</span><br>bean.setUnauthorizedUrl(<span class="hljs-string">&quot;/noauto&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>再次测试</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221019220118.png" alt="QQ截图20221019220118"></p><p>所以需要在UserRealm中为用户进行真正授权</p></li><li><p>UserRealm类的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义的UserRealm</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br>    <span class="hljs-comment">//授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了=&gt;授权doGetAuthorizationInfo&quot;</span>);<br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br>        <span class="hljs-comment">//拿到当前登录的这个对象</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> (User)subject.getPrincipal();<span class="hljs-comment">//拿到user对象</span><br>        <span class="hljs-comment">//设置当前用户的权限</span><br>        info.addStringPermission(currentUser.getPerms());<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br>    <span class="hljs-comment">//认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        ......<br>        <span class="hljs-comment">// 密码认证，shiro做</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(user,user.getPwd(),<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次测试</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221019220955.png" alt="QQ截图20221019220955"></p></li></ol><h1 id="8-Shiro整合Thymeleaf"><a href="#8-Shiro整合Thymeleaf" class="headerlink" title="8. Shiro整合Thymeleaf"></a>8. Shiro整合Thymeleaf</h1><ol><li><p>shiro-thymeleaf整合包导入</p><p>官网：<a href="https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro">https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--shiro-thymeleaf整合--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在ShiroConfig中整合ShiroDialect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 整合ShiroDialect： 用来整合 Shiro thymeleaf</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ShiroDialect <span class="hljs-title function_">getShiroDialect</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroDialect</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改index.html页面</p><p>如果用户有 “user:add” 权限，则显示add，如果用户有 “user:update” 权限，则显示update。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:shiro</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--用session实现，配合UserRealm中的session实现--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;div th:if=&quot;$&#123;session.loginUser==null&#125;&quot;&gt;</span><br><span class="hljs-comment">        &lt;a th:href=&quot;@&#123;/toLogin&#125;&quot;&gt;登录&lt;/a&gt;</span><br><span class="hljs-comment">    &lt;/div&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:notAuthenticated</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;user:add&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;user:update&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>页面显示</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221019222653.png" alt="QQ截图20221019222653"></p></li></ol><h1 id="9-完整Shiro配置代码"><a href="#9-完整Shiro配置代码" class="headerlink" title="9. 完整Shiro配置代码"></a>9. 完整Shiro配置代码</h1><blockquote><p><strong>未整合Mybatis，整合数据库时需略微修改代码</strong></p></blockquote><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221019222756.png" alt="QQ截图20221019222756"></p><p>ShiroConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.config;<br><br><span class="hljs-keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroConfig</span> &#123;<br>    <span class="hljs-comment">//3. shiroFilterFactoryBean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title function_">getShiroFilterFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;<br>        <span class="hljs-type">ShiroFilterFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>        <span class="hljs-comment">// 设置安全管理器</span><br>        bean.setSecurityManager(defaultWebSecurityManager);<br><br>        <span class="hljs-comment">//添加Shiro的内置过滤器</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            - anon： 无需认证就可以访问</span><br><span class="hljs-comment">            - authc： 必须认证了才能访问</span><br><span class="hljs-comment">            - user： 必须拥有记住我功能才能用</span><br><span class="hljs-comment">            - perms： 拥有对某个资源的权限才能访问</span><br><span class="hljs-comment">            - role： 拥有某个角色权限</span><br><span class="hljs-comment">         */</span><br>        Map&lt;String,String&gt; filterMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//授权，正常情况下，没有授权会跳转到为授权页面</span><br>        filterMap.put(<span class="hljs-string">&quot;/user/add&quot;</span>,<span class="hljs-string">&quot;perms[user:add]&quot;</span>);<br>        filterMap.put(<span class="hljs-string">&quot;/user/update&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);<br>        bean.setFilterChainDefinitionMap(filterMap);<br><br>        <span class="hljs-comment">//设置登录的请求</span><br>        bean.setLoginUrl(<span class="hljs-string">&quot;/toLogin&quot;</span>);<br>        <span class="hljs-comment">//未授权页面</span><br>        bean.setUnauthorizedUrl(<span class="hljs-string">&quot;/noauto&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-comment">//2. DefaultWebSecurityManager</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title function_">getDefaultWebSecurityManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;<br>        <span class="hljs-type">DefaultWebSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultWebSecurityManager</span>();<br>        <span class="hljs-comment">// 关联userRealm</span><br>        securityManager.setRealm(userRealm);<br>        <span class="hljs-keyword">return</span> securityManager;<br>    &#125;<br>    <span class="hljs-comment">//1. 创建realm对象，需要自定义类</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserRealm <span class="hljs-title function_">userRealm</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRealm</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 整合ShiroDialect： 用来整合 Shiro thymeleaf</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroDialect <span class="hljs-title function_">getShiroDialect</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroDialect</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserRealm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.config;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.authc.*;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><br><span class="hljs-comment">//自定义的UserRealm</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-comment">//授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了=&gt;授权doGetAuthorizationInfo&quot;</span>);<br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br><span class="hljs-comment">//        //拿到当前登录的这个对象</span><br><span class="hljs-comment">//        Subject subject = SecurityUtils.getSubject();</span><br><span class="hljs-comment">//        User currentUser = (User)subject.getPrincipal();//拿到user对象</span><br>        <span class="hljs-comment">//设置当前用户的权限</span><br>        info.addStringPermission(<span class="hljs-string">&quot;user:add&quot;</span>);<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br>    <span class="hljs-comment">//认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了=&gt;认证doGetAuthorizationInfo&quot;</span>);<br>        <span class="hljs-comment">// 用户名、密码， 数据中取（模拟数据库）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">userToken</span> <span class="hljs-operator">=</span> (UsernamePasswordToken) token;<br>        <span class="hljs-keyword">if</span> (!userToken.getUsername().equals(name)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//抛出异常 UnknownAccountException</span><br>        &#125;<br>        <span class="hljs-comment">// 密码认证，shiro做</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(<span class="hljs-string">&quot;&quot;</span>,password,<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.controller;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toIndex</span><span class="hljs-params">(Model model)</span> &#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,Shiro&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user/add&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/add&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user/update&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/update&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/toLogin&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password, Model model)</span> &#123;<br>        <span class="hljs-comment">//获取一个用户</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">// 封装用户的登录数据</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(username, password);<br>        <span class="hljs-keyword">try</span> &#123;<br>            subject.login(token);<span class="hljs-comment">//执行登录的方法，如果没有异常就说明ok了</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<span class="hljs-comment">//用户名不存在</span><br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名错误&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<span class="hljs-comment">//密码不存在</span><br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;密码错误&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/noauto&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">unauthorized</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;未经授权，无法访问此页面&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-SpringSecurity</title>
    <link href="/2022/10/17/SpringBoot-SpringSecurity/"/>
    <url>/2022/10/17/SpringBoot-SpringSecurity/</url>
    
    <content type="html"><![CDATA[<p><strong>SpringSecurity官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></strong> </p><p><strong>帮助文档：<a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5">https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5</a></strong></p><h1 id="1-SpringSecurity概述"><a href="#1-SpringSecurity概述" class="headerlink" title="1. SpringSecurity概述"></a>1. SpringSecurity概述</h1><blockquote><p>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</p></blockquote><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理。</p><p>三个常用类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p> <strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><p>这个概念是通用的，而不是只在Spring Security 中存在。</p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><ol><li><p>新建一个初始的springboot项目，导入web模块、thymeleaf模块</p></li><li><p>导入静态资源</p></li><li><p>编写controller，实现页面跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RouterController</span> &#123;<br><br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/toLogin&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/login&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/level1/&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level1</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level1/&quot;</span>+id;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/level2/&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level2/&quot;</span>+id;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/level3/&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level3</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level3/&quot;</span>+id;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试环境是否成功</p></li></ol><h1 id="3-用户认证和授权"><a href="#3-用户认证和授权" class="headerlink" title="3. 用户认证和授权"></a>3. 用户认证和授权</h1><p>测试环境是谁都可以访问的，使用 Spring Security 增加上认证和授权的功能</p><p><strong>实现步骤：</strong></p><ol><li><p>引入 Spring Security 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写 Spring Security 配置类</p></li><li><p>编写基础配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><br><span class="hljs-meta">@EnableWebSecurity</span> <span class="hljs-comment">// 开启WebSecurity模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定制请求的授权规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">// 定制请求的授权规则</span><br>   <span class="hljs-comment">// 首页所有人可以访问</span><br>   http.authorizeRequests().antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>  .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>  .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>  .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试：除了首页都进不去了，因为目前没有登录的角色，请求需要登录的角色拥有对应的权限才可以</p></li><li><p>在configure()方法中加入以下配置，开启自动配置的登录功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开启自动配置的登录功能</span><br><span class="hljs-comment">// /login 请求来到登录页</span><br><span class="hljs-comment">// /login?error 重定向到这里表示登录失败</span><br>http.formLogin();<br></code></pre></td></tr></table></figure></li><li><p>测试：发现没有权限的时候，会跳转到登录的页面</p></li><li><p>定义认证规则</p><p>重写configure(AuthenticationManagerBuilder auth)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义认证规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <br>   <span class="hljs-comment">//在内存中定义，也可以在jdbc中去拿....</span><br>   auth.inMemoryAuthentication()<br>          .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password(<span class="hljs-string">&quot;123456&quot;</span>).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>          .and()<br>          .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-string">&quot;123456&quot;</span>).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>          .and()<br>          .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-string">&quot;123456&quot;</span>).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>使用这些账号登录会报错：There is no PasswordEncoder mapped for the id “null”</p></li><li><p>密码加密</p><p>报错原因：要将前端传过来的密码进行某种方式加密，否则就无法登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义认证规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//在内存中定义，也可以在jdbc中去拿....</span><br>   <span class="hljs-comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span><br>   <span class="hljs-comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span><br>   <span class="hljs-comment">//spring security 官方推荐的是使用bcrypt加密方式。</span><br>   <br>   auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>())<br>          .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>          .and()<br>          .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>          .and()<br>          .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>登录成功，并且每个角色只能访问自己认证下的规则</p></li></ol><h1 id="4-注销和权限控制"><a href="#4-注销和权限控制" class="headerlink" title="4. 注销和权限控制"></a>4. 注销和权限控制</h1><h2 id="4-1-注销"><a href="#4-1-注销" class="headerlink" title="4.1 注销"></a>4.1 注销</h2><p><strong>实现步骤：</strong></p><ol><li><p>开启自动配置的注销的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定制请求的授权规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//....</span><br>   <span class="hljs-comment">//开启自动配置的注销的功能</span><br>      <span class="hljs-comment">// /logout 注销请求</span><br>   http.logout();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在前端index.html 导航栏中增加一个注销的按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 注销<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>登录成功后点击注销，发现注销完毕会跳转到登录页面</p><p>想实现注销后跳转首页功能</p></li><li><p>注销后跳转首页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span><br>http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>测试成功，注销后跳转首页</p></li></ol><h2 id="4-2-权限控制"><a href="#4-2-权限控制" class="headerlink" title="4.2 权限控制"></a>4.2 权限控制</h2><p>需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮。</p><p><strong>实现步骤：</strong></p><ol><li><p>导入依赖</p><p><strong>需要结合thymeleaf中的一些功能</strong></p><p>sec：authorize=”isAuthenticated()”：判断是否认证登录来显示不同的页面</p><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改前端页面</p><p>导入命名空间：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;<br></code></pre></td></tr></table></figure><p>修改导航栏，增加认证判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--登录注销--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right menu&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--如果未登录--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;!isAuthenticated()&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 登录<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--如果已登录--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          用户名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          角色：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.authorities&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 注销<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试成功</p></li><li><p>解决安全问题</p><p>如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能。</p><p>在配置中增加 http.csrf().disable();</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">http.csrf().disable();//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span><br><span class="hljs-string">http.logout().logoutSuccessUrl(&quot;/&quot;);</span><br></code></pre></td></tr></table></figure></li><li><p>实现角色功能块认证</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- sec:authorize=&quot;hasRole(&#x27;vip1&#x27;)&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui raised segment&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Level 1<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui raised segment&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Level 2<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-2-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-2-2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-2-3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui raised segment&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Level 3<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-3-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-3-2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-3-3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>测试成功，实现了权限控制</p></li></ol><h1 id="5-记住我及首页定制"><a href="#5-记住我及首页定制" class="headerlink" title="5. 记住我及首页定制"></a>5. 记住我及首页定制</h1><h2 id="5-1-记住我"><a href="#5-1-记住我" class="headerlink" title="5.1 记住我"></a>5.1 记住我</h2><p>需求：让网站实现记住用户和密码的功能</p><p><strong>实现步骤：</strong></p><ol><li><p>开启记住我功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定制请求的授权规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//记住我</span><br>   http.rememberMe();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>登录页多了一个记住我功能，我们登录之后关闭浏览器，然后重新打开浏览器访问，发现用户依旧存在。</p><p><strong>实现原理：</strong>SpringSecurity保存了浏览器的cookie；点击注销的时候，可以发现 SpringSecurity 自动删除了浏览器中的这个 cookie</p><p><strong>结论：</strong>网站登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie。</p></li></ol><h2 id="5-2-首页定制"><a href="#5-2-首页定制" class="headerlink" title="5.2 首页定制"></a>5.2 首页定制</h2><p>需求：网站登录页面都是SpringSecurity 默认的，需要实现自定义的 login 页面</p><p><strong>实现步骤：</strong></p><ol><li><p>在刚才的登录页配置后面指定 loginpage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http.formLogin().loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>前端指向自定义的 login 请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 登录<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置提交请求及方式</p><p>需要将这些信息发送到哪里也需要配置，login.html 配置提交请求及方式，方式必须为post。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui left icon input&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui left icon input&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lock icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue submit button&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>验证处理</p><p>请求提交上来还需要验证处理，可以查看formLogin()方法的源码配置接收登录的用户名和密码的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">http.formLogin()<br>  .usernameParameter(<span class="hljs-string">&quot;username&quot;</span>)<br>  .passwordParameter(<span class="hljs-string">&quot;password&quot;</span>)<br>  .loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>)<br>  .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>); <span class="hljs-comment">// 登陆表单提交请求</span><br></code></pre></td></tr></table></figure></li><li><p>在登录页增加记住我的多选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> 记住我<br></code></pre></td></tr></table></figure></li><li><p>后端验证处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定制记住我的参数！</span><br>http.rememberMe().rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><h1 id="6-完整配置代码"><a href="#6-完整配置代码" class="headerlink" title="6. 完整配置代码"></a>6. 完整配置代码</h1><p>SecurityConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.config;<br><br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>   <span class="hljs-comment">//定制请求的授权规则</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>       http.authorizeRequests().antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>      .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>      .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>      .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br><br><br>       <span class="hljs-comment">//开启自动配置的登录功能：如果没有权限，就会跳转到登录页面！</span><br>           <span class="hljs-comment">// /login 请求来到登录页</span><br>           <span class="hljs-comment">// /login?error 重定向到这里表示登录失败</span><br>       http.formLogin()<br>          .usernameParameter(<span class="hljs-string">&quot;username&quot;</span>)<br>          .passwordParameter(<span class="hljs-string">&quot;password&quot;</span>)<br>          .loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>)<br>          .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>); <span class="hljs-comment">// 登陆表单提交请求</span><br><br>       <span class="hljs-comment">//开启自动配置的注销的功能</span><br>           <span class="hljs-comment">// /logout 注销请求</span><br>           <span class="hljs-comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span><br><br>       http.csrf().disable();<span class="hljs-comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span><br>       http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br><br>       <span class="hljs-comment">//记住我</span><br>       http.rememberMe().rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-comment">//定义认证规则</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">//在内存中定义，也可以在jdbc中去拿....</span><br>       <span class="hljs-comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span><br>       <span class="hljs-comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span><br>       <span class="hljs-comment">//spring security 官方推荐的是使用bcrypt加密方式。</span><br><br>       auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>())<br>              .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>              .and()<br>              .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>              .and()<br>              .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot操作数据库</title>
    <link href="/2022/10/15/SpringBoot%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/10/15/SpringBoot%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SpringData简介"><a href="#1-SpringData简介" class="headerlink" title="1. SpringData简介"></a>1. SpringData简介</h1><p><strong>Sping Data官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></strong></p><p><strong>数据库相关启动器的官方文档： <a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></strong></p><p>对于数据访问层，无论是 SQL（关系型数据库)）还是 NOSQL（非关系型数据库），Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。 </p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中 与 Spring Boot、Spring Cloud 等齐名的知名项目。 </p><h1 id="2-集成-JDBC"><a href="#2-集成-JDBC" class="headerlink" title="2. 集成 JDBC"></a>2. 集成 JDBC</h1><h2 id="2-1-测试数据库"><a href="#2-1-测试数据库" class="headerlink" title="2.1 测试数据库"></a>2.1 测试数据库</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221015105118.png" alt="QQ截图20221015105118"></p><h2 id="2-2-创建测试项目测试数据源"><a href="#2-2-创建测试项目测试数据源" class="headerlink" title="2.2 创建测试项目测试数据源"></a>2.2 创建测试项目测试数据源</h2><ol><li><p>新建模块测试</p></li><li><p>导入依赖</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JDBC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--MySQL--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写yaml配置文件连接数据库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;serveTimezone=UTC</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure></li><li><p>测试类中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBoot01ApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    DataSource dataSource;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//查看默认数据源 class com.zaxxer.hikari.HikariDataSource</span><br>        System.out.println(dataSource.getClass());<br><br>        <span class="hljs-comment">//获得数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(connection);<br><br>        <span class="hljs-comment">// xxxTemplate：SpringBoot已经配置好的模板bean，拿来即用</span><br><br>        <span class="hljs-comment">//关闭连接</span><br>        connection.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>默认数据源：class com.zaxxer.hikari.HikariDataSource</p><p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀。</strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为要使用的连接池实现的完全限定 名。</p></li></ol><h2 id="2-3-CRUD操作"><a href="#2-3-CRUD操作" class="headerlink" title="2.3 CRUD操作"></a>2.3 CRUD操作</h2><blockquote><p><strong>JdbcTemplate</strong></p></blockquote><ol><li>有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接 (java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库。</li><li>即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的 JDBC 做了轻量级的封装，即 JdbcTemplate。</li><li>数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</li><li>Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序 员只需自己注入即可使用。</li><li>JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类。</li></ol><blockquote><p><strong>JdbcTemplate主要提供以下几类方法：</strong> </p></blockquote><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句</li><li>batchUpdate 方法用于执行批处理相关语句</li><li>query方法及queryForXXX方法：用于执行查询相关语句</li><li>call方法：用于执行存储过程、函数相关语句</li></ul><blockquote><p><strong>CRUD测试：</strong></p></blockquote><p>jdbcController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate; <span class="hljs-comment">// xxxTemplate：SpringBoot已经配置好的模板bean，拿来即用</span><br><br>    <span class="hljs-comment">//查询数据库中的所有信息</span><br>    <span class="hljs-comment">//没有实体类，获取数据库中的信息采用map</span><br>    <span class="hljs-meta">@GetMapping(&quot;/userList&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">userList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user&quot;</span>;<br>        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);<br>        <span class="hljs-keyword">return</span> maps;<br>    &#125;<br><br>    <span class="hljs-comment">//增加操作</span><br>    <span class="hljs-meta">@GetMapping(&quot;/addUser&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into mybatis.user(id,name,pwd) values(5,&#x27;user&#x27;,&#x27;123456&#x27;)&quot;</span>;<br>        jdbcTemplate.update(sql);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;add is ok!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//修改操作</span><br>    <span class="hljs-meta">@GetMapping(&quot;/updateUser/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update mybatis.user set name=?,pwd=? where id=&quot;</span>+id;<br><br>        <span class="hljs-comment">//数据封装</span><br>        Object[] objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">2</span>];<br>        objects[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;user_Update&quot;</span>;<br>        objects[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;123456&quot;</span>;<br>        jdbcTemplate.update(sql,objects);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update id ok!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//删除操作</span><br>    <span class="hljs-meta">@GetMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from mybatis.user where id=?&quot;</span>;<br>        jdbcTemplate.update(sql,id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete is ok!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>测试结果：</strong></p></blockquote><p>查询操作：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221015103525.png" alt="QQ截图20221015103525"></p><p>增加操作：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221015104555.png" alt="QQ截图20221015104555"></p><p>更新操作：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221015104937.png" alt="QQ截图20221015104937"></p><p>删除操作：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221015104959.png" alt="QQ截图20221015104959"></p><h1 id="3-自定义数据源DruidDataSource"><a href="#3-自定义数据源DruidDataSource" class="headerlink" title="3. 自定义数据源DruidDataSource"></a>3. 自定义数据源DruidDataSource</h1><h2 id="2-1-Druid-简介"><a href="#2-1-Druid-简介" class="headerlink" title="2.1 Druid 简介"></a>2.1 Druid 简介</h2><blockquote><p><strong>Druid 简介</strong></p></blockquote><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p><p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p><p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p><p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p><blockquote><p><strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p></blockquote><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成 一个名字，格式是：”DataSource-“ + System.identityHashCode(this).</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件 中，可以使用ConfigFilter。</td></tr><tr><td>driverClassName</td><td>根据url自 动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别 dbType，然后选择相应的driverClassName</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init 方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之 后，缺省启用公平锁，并发效率会有所下降，如果需要可 以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。 PSCache对支持游标的数据库性能提升巨大，比如说 oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。在Druid 中，不会存在Oracle下PSCache占用内存过多的问题，可 以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果 validationQuery为null，testOnBorrow、 testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>validationQueryTimeout</td><td></td><td>单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方 法</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了 这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了 这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连 接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行validationQuery 检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td>1分钟</td><td>有两个含义： 1) Destroy线程会检测连接的间隔时间，如 果连接空闲时间大于等于minEvictableIdleTimeMillis则关 闭物理连接 2) testWhileIdle的判断依据，详细看 testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td>30分钟</td><td>连接保持空闲而不被驱逐的最长时间</td></tr><tr><td>connectionInitSqls</td><td></td><td>connectionInitSqls</td></tr><tr><td>exceptionSorter</td><td>根据 dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用 的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配 置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="2-2-配置数据源"><a href="#2-2-配置数据源" class="headerlink" title="2.2 配置数据源"></a>2.2 配置数据源</h2><ol><li><p>添加上 Druid 数据源依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>切换数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;serveTimezone=UTC</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br></code></pre></td></tr></table></figure></li><li><p>设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;serveTimezone=UTC</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br>    <span class="hljs-comment">#SpringBoot默认是不注入这些属性值的，需要自己绑定</span><br>    <span class="hljs-comment">#druid数据源专有配置</span><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span><br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span><br>    <span class="hljs-comment">#如果允许时报错java.lang.ClassNotFoundException:org.apache.log4j.Priority</span><br>    <span class="hljs-comment">#则导入log4j依赖即可</span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span><br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br></code></pre></td></tr></table></figure></li><li><p>导入Log4j 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/log4j/log4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 SpringBoot 的自动生成了,需要自己添加 DruidDataSource 组件到容器中并绑定属性。</p><ul><li>将自定义的Druid数据源添加到容器中，不再让SpringBoot自动创建绑定全局配置文件中的druid数据源属性到com.alibaba.druid.pool.DruidDataSource从而让它们生效。</li><li>@ConfigurationProperties(prefix = “spring.datasource”)作用：将全局配置文件中前缀为spring.datasource的属性值注入到com.alibaba.druid.pool.DruidDataSource 的同名参数中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> &#123;<br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">druidDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-3-配置-Druid-数据源监控"><a href="#2-3-配置-Druid-数据源监控" class="headerlink" title="2.3 配置 Druid 数据源监控"></a>2.3 配置 Druid 数据源监控</h2><p>Druid 数据源具有监控的功能，并提供了一个web界面方便用户查看，类似安装路由器时，人家也提供了一个默认的 web 页面。</p><blockquote><p><strong>配置 Druid 数据源监控</strong></p></blockquote><ol><li><p>设置 Druid 的后台管理页面，比如登录账号、密码等，配置后台管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> &#123;<br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">druidDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//后台监控，相当于web.xml</span><br>    <span class="hljs-comment">//因为SpringBoot内置了servlet容器，所以没有web.xml，替代方法：ServletRegistrationBean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">statViewServlet</span><span class="hljs-params">()</span>&#123;<br>        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StatViewServlet</span>(), <span class="hljs-string">&quot;/druid/*&quot;</span>);<br>        <span class="hljs-comment">//后台需要有人登录，账号密码配置</span><br>        HashMap&lt;String,String&gt; initParameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//增加配置 key是固定的loginUsername loginPassword</span><br>        initParameters.put(<span class="hljs-string">&quot;loginUsername&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>        initParameters.put(<span class="hljs-string">&quot;loginPassword&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-comment">//允许谁可以访问</span><br>        initParameters.put(<span class="hljs-string">&quot;allow&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//禁止谁可以访问</span><br>        <span class="hljs-comment">//initParameters.put(&quot;MrLinSuwen&quot;,&quot;192.168.119.1&quot;);  //主机名称+ip地址</span><br><br>        bean.setInitParameters(initParameters);  <span class="hljs-comment">//设置初始化参数</span><br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>访问：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221015165443.png" alt="QQ截图20221015165443"></p><p>进入后台监控：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221015165507.png" alt="QQ截图20221015165507"></p><p>SQL监控：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221015165604.png" alt="QQ截图20221015165604"></p></li></ol><h2 id="2-4-配置Druid-web监控filter过滤器"><a href="#2-4-配置Druid-web监控filter过滤器" class="headerlink" title="2.4 配置Druid web监控filter过滤器"></a>2.4 配置Druid web监控filter过滤器</h2><blockquote><p><strong>配置Druid web监控filter过滤器</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> &#123;<br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">druidDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//后台监控，相当于web.xml</span><br>    <span class="hljs-comment">//因为SpringBoot内置了servlet容器，所以没有web.xml，替代方法：ServletRegistrationBean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">statViewServlet</span><span class="hljs-params">()</span>&#123;<br>        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StatViewServlet</span>(), <span class="hljs-string">&quot;/druid/*&quot;</span>);<br>        <span class="hljs-comment">//后台需要有人登录，账号密码配置</span><br>        HashMap&lt;String,String&gt; initParameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//增加配置 key是固定的loginUsername loginPassword</span><br>        initParameters.put(<span class="hljs-string">&quot;loginUsername&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>        initParameters.put(<span class="hljs-string">&quot;loginPassword&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-comment">//允许谁可以访问</span><br>        initParameters.put(<span class="hljs-string">&quot;allow&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//禁止谁可以访问</span><br>        <span class="hljs-comment">//initParameters.put(&quot;MrLinSuwen&quot;,&quot;192.168.119.1&quot;);  //主机名称+ip地址</span><br><br>        bean.setInitParameters(initParameters);  <span class="hljs-comment">//设置初始化参数</span><br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span><br>    <span class="hljs-comment">//配置Druid监控之web监控的filter</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">webStatFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>();<br>        bean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebStatFilter</span>());<br><br>        Map&lt;String, String&gt; initParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span><br>        initParams.put(<span class="hljs-string">&quot;exclusions&quot;</span>, <span class="hljs-string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);<br>        bean.setInitParameters(initParams);<br><br>        <span class="hljs-comment">//&quot;/*&quot; 表示过滤所有请求</span><br>        bean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-整合MyBatis"><a href="#4-整合MyBatis" class="headerlink" title="4. 整合MyBatis"></a>4. 整合MyBatis</h1><p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot</a> -starter/2.1.1</p><blockquote><p><strong>整合测试</strong></p></blockquote><ol><li><p>导入 MyBatis 所需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis-spring-boot-starter作用：整合--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置数据库连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;serveTimezone=UTC</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><span class="hljs-comment">#整合MyBatis</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.study.pojo</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br></code></pre></td></tr></table></figure></li><li><p>测试数据库是否连接成功</p></li><li><p>导入 Lombok，创建实体类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建mapper目录以及对应的 Mapper 接口</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.mapper;<br><br><span class="hljs-keyword">import</span> com.study.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//这个注解表示这是一个MyBatis的mapper类</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">queryUserList</span><span class="hljs-params">()</span>;<br><br>    User <span class="hljs-title function_">queryUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对应的Mapper映射文件</p><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace绑定一个对应的Mapper/Dao接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.study.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        update user set name=#&#123;name&#125; pwd=#&#123;pwd&#125; where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>maven配置资源过滤问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写UserController.java测试CRUD</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/queryUserList&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryUserList</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; userList = userMapper.queryUserList();<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/queryUserById&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.queryUserById(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/addUser&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        userMapper.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;林思湫&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;add is ok!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/updateUser&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>        userMapper.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;userPro&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update id ok!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/deleteUserById&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">()</span>&#123;<br>        userMapper.deleteUserById(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete is ok!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-员工管理系统</title>
    <link href="/2022/10/08/SpringBoot-%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/10/08/SpringBoot-%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h1><h2 id="1-1-导入静态资源"><a href="#1-1-导入静态资源" class="headerlink" title="1.1 导入静态资源"></a>1.1 导入静态资源</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008174935.png" alt="QQ截图20221008174935"></p><h2 id="1-2-创建模拟数据库"><a href="#1-2-创建模拟数据库" class="headerlink" title="1.2 创建模拟数据库"></a>1.2 创建模拟数据库</h2><blockquote><p>项目未整合MyBatis，使用模拟数据库。</p></blockquote><p><strong>创建实体类：</strong></p><ol><li><p>创建部门表 Department</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">package</span> com.study.pojo;<br>   <br>   <span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br>   <span class="hljs-keyword">import</span> lombok.Data;<br>   <span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br>   <br>   <span class="hljs-comment">//部门表</span><br>   <span class="hljs-meta">@Data</span><br>   <span class="hljs-meta">@AllArgsConstructor</span><br>   <span class="hljs-meta">@NoArgsConstructor</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br>       <span class="hljs-keyword">private</span> Integer id;<br>       <span class="hljs-keyword">private</span> String departmentName;<br>   &#125;<br><br><span class="hljs-number">2.</span> 创建员工表 Employee<br><br>   ```java<br>   <span class="hljs-keyword">package</span> com.study.pojo;<br>   <br>   <span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br>   <span class="hljs-keyword">import</span> lombok.Data;<br>   <span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br>   <br>   <span class="hljs-keyword">import</span> java.util.Date;<br>   <br>   <span class="hljs-comment">//员工表</span><br>   <span class="hljs-meta">@Data</span><br>   <span class="hljs-meta">@NoArgsConstructor</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>       <span class="hljs-keyword">private</span> Integer id;<br>       <span class="hljs-keyword">private</span> String lastName;<br>       <span class="hljs-keyword">private</span> String email;<br>       <span class="hljs-keyword">private</span> Integer gender; <span class="hljs-comment">//0：女 1：男</span><br>       <span class="hljs-keyword">private</span> Department department;<br>       <span class="hljs-keyword">private</span> Date birth;<br>   <br>       <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(Integer id, String lastName, String email, Integer gender, Department department)</span> &#123;<br>           <span class="hljs-built_in">this</span>.id = id;<br>           <span class="hljs-built_in">this</span>.lastName = lastName;<br>           <span class="hljs-built_in">this</span>.email = email;<br>           <span class="hljs-built_in">this</span>.gender = gender;<br>           <span class="hljs-built_in">this</span>.department = department;<br>           <span class="hljs-built_in">this</span>.birth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <span class="hljs-comment">//默认的创建日期</span><br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>创建模拟数据库Dao：</strong></p><ol><li><p>创建部门dao DepartmentDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.dao;<br><br><span class="hljs-keyword">import</span> com.study.pojo.Department;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//部门dao</span><br><span class="hljs-meta">@Repository</span>  <span class="hljs-comment">//被Spring托管</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepartmentDao</span> &#123;<br>    <span class="hljs-comment">//模拟数据库中数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Department&gt; departments = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">static</span>&#123;<br>        departments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer,Department&gt;();  <span class="hljs-comment">//创建一个部门表</span><br><br>        departments.put(<span class="hljs-number">101</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&quot;教学部&quot;</span>));<br>        departments.put(<span class="hljs-number">102</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">102</span>,<span class="hljs-string">&quot;市场部&quot;</span>));<br>        departments.put(<span class="hljs-number">103</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">103</span>,<span class="hljs-string">&quot;教研部&quot;</span>));<br>        departments.put(<span class="hljs-number">104</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">104</span>,<span class="hljs-string">&quot;运营部&quot;</span>));<br>        departments.put(<span class="hljs-number">105</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">105</span>,<span class="hljs-string">&quot;后期部&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//获得所有部门信息</span><br>    <span class="hljs-keyword">public</span> Collection&lt;Department&gt; <span class="hljs-title function_">getDepartments</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> departments.values();<br>    &#125;<br><br>    <span class="hljs-comment">//通过id得到部门</span><br>    <span class="hljs-keyword">public</span> Department <span class="hljs-title function_">getDepartmentById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> departments.get(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建员工dao EmployeeDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.dao;<br><br><span class="hljs-keyword">import</span> com.study.pojo.Department;<br><span class="hljs-keyword">import</span> com.study.pojo.Employee;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//员工dao</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br>    <span class="hljs-comment">//模拟数据库数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//员工有所属部门</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DepartmentDao departmentDao;<br>    <span class="hljs-keyword">static</span>&#123;<br>        employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer,Employee&gt;();  <span class="hljs-comment">//创建一个部门表</span><br><br>        employees.put(<span class="hljs-number">1001</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;员工01&quot;</span>,<span class="hljs-string">&quot;2746200911@qq.com&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&quot;教学部&quot;</span>)));<br>        employees.put(<span class="hljs-number">1002</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;员工02&quot;</span>,<span class="hljs-string">&quot;2746200912@qq.com&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">102</span>,<span class="hljs-string">&quot;市场部&quot;</span>)));<br>        employees.put(<span class="hljs-number">1003</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&quot;员工03&quot;</span>,<span class="hljs-string">&quot;2746200913@qq.com&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">103</span>,<span class="hljs-string">&quot;教研部&quot;</span>)));<br>        employees.put(<span class="hljs-number">1004</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1004</span>,<span class="hljs-string">&quot;员工04&quot;</span>,<span class="hljs-string">&quot;2746200914@qq.com&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">104</span>,<span class="hljs-string">&quot;运营部&quot;</span>)));<br>        employees.put(<span class="hljs-number">1005</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1005</span>,<span class="hljs-string">&quot;员工05&quot;</span>,<span class="hljs-string">&quot;2746200915@qq.com&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-number">105</span>,<span class="hljs-string">&quot;后期部&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-comment">//主键自增</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">initId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1006</span>;<br>    <span class="hljs-comment">//增加一个员工</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Employee employee)</span>&#123;<br>        <span class="hljs-keyword">if</span>(employee.getId() == <span class="hljs-literal">null</span>)&#123;<br>            employee.setId(initId++);<br>        &#125;<br>        employee.setDepartment(departmentDao.getDepartmentById(employee.getDepartment().getId()));<br>        employees.put(employee.getId(),employee);<br>    &#125;<br><br>    <span class="hljs-comment">//查询全部员工信息</span><br>    <span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> employees.values();<br>    &#125;<br><br>    <span class="hljs-comment">//通过id查询员工</span><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> employees.get(id);<br>    &#125;<br><br>    <span class="hljs-comment">//删除员工</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        employees.remove(id);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-3-导入依赖"><a href="#1-3-导入依赖" class="headerlink" title="1.3 导入依赖"></a>1.3 导入依赖</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--有一个父项目--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.study<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web依赖：集成了tomcat，替代了dispatcherServlet,xml配置...--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--单元测试，等价于junit--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jQuery--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--lombok--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--打jar包插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-首页实现"><a href="#2-首页实现" class="headerlink" title="2. 首页实现"></a>2. 首页实现</h1><ol><li><p>首页配置</p><p>注意：所有页面的静态资源都需要使用thymeleaf接管：@{}</p><p>导入thymeleaf命名空间：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">xmlns:th=&quot;http://www.thymeleaf.org&quot;<br></code></pre></td></tr></table></figure><p>修改导入的静态文件</p></li><li><p>首页实现</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Signin Template for Bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Bootstrap core CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Custom styles for this template --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;dashboard.html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;72&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 mb-3 font-weight-normal&quot;</span>&gt;</span>Please sign in<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox mb-3&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remember-me&quot;</span>&gt;</span> Remember me<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2021-2022<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>首页展示</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008190741.png" alt="QQ截图20221008190741"></p></li></ol><h1 id="3-国际化"><a href="#3-国际化" class="headerlink" title="3. 国际化"></a>3. 国际化</h1><h2 id="3-1-国际化"><a href="#3-1-国际化" class="headerlink" title="3.1 国际化"></a>3.1 国际化</h2><blockquote><p>国际化（internationalization）是设计和制造领域适应不同区域要求的产品的一种方式。它要求从产品中抽离所有<a href="https://baike.baidu.com/item/%E5%9C%B0%E5%9F%9F/4437973?fromModule=lemma_inlink">地域</a>语言，国家/地区和文化相关的<a href="https://baike.baidu.com/item/%E5%85%83%E7%B4%A0/373563?fromModule=lemma_inlink">元素</a>。换言之，<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445?fromModule=lemma_inlink">应用程序</a>的功能和<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/5499787?fromModule=lemma_inlink">代码设计</a>考虑在不同地区运行的需要，其<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81/86048?fromModule=lemma_inlink">代码</a>简化了不同本地版本的生产。开发这样的<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F/71525?fromModule=lemma_inlink">程序</a>的过程，就称为国际化。</p></blockquote><h2 id="3-2-页面国际化"><a href="#3-2-页面国际化" class="headerlink" title="3.2 页面国际化"></a>3.2 页面国际化</h2><p><strong>页面国际化步骤：</strong></p><ol><li><p>在IDEA中设置properties的编码问题</p></li><li><p>在resources资源文件下新建一个i18n目录，存放国际化配置文件</p><p>i18n：国际化 internationalization 单词的缩写</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008204411.png" alt="QQ截图20221008204411"></p></li><li><p>新建国际化配置文件</p><p>login.properties  —-  默认</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">用户名</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-attr">login.btn</span>=<span class="hljs-string">登录</span><br></code></pre></td></tr></table></figure><p>login_zh_CN.properties  —-  中文</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">用户名</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-attr">login.btn</span>=<span class="hljs-string">登录</span><br></code></pre></td></tr></table></figure><p>login_en_US.properties  —-  英文</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.tip</span>=<span class="hljs-string">Please sign in</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">password</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">username</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">Remember me</span><br><span class="hljs-attr">login.btn</span>=<span class="hljs-string">Sign in</span><br></code></pre></td></tr></table></figure></li><li><p>配置页面国际化值</p><p>去页面获取国际化的值，查看Thymeleaf的文档，找到message取值操作为： #{…}。</p><p>修改index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;dashboard.html&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;72&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">&quot;#&#123;login.username&#125;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">&quot;#&#123;login.password&#125;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox mb-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remember-me&quot;</span>&gt;</span> [[#&#123;login.remember&#125;]]<br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>[[#&#123;login.btn&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2021-2022<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008201013.png" alt="QQ截图20221008201013"></p></li></ol><h2 id="3-3-中英文自动切换"><a href="#3-3-中英文自动切换" class="headerlink" title="3.3 中英文自动切换"></a>3.3 中英文自动切换</h2><ol><li><p>配置自定义国际化解析组件</p><p>在Spring中有一个国际化的Locale （区域信息对象），里面有一个叫做LocaleResolver （获取区域信息对象）的解析器</p><p>MyLocaleResolver.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.config;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.util.StringUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">//自定义国际化组件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LocaleResolver</span> &#123;<br>    <span class="hljs-comment">//解析请求</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Locale <span class="hljs-title function_">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取请求中的语言参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">language</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;lan&quot;</span>);<br>        <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> Locale.getDefault();  <span class="hljs-comment">//如果没有就使用默认的</span><br>        <span class="hljs-comment">//如果请求的链接携带了国际化的参数</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(language))&#123;<br>            <span class="hljs-comment">//zh_CN</span><br>            String[] split = language.split(<span class="hljs-string">&quot;_&quot;</span>);<br>            <span class="hljs-comment">//国家，地区</span><br>            locale = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(split[<span class="hljs-number">0</span>],split[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> locale;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocale</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改 index.html 前端页面的跳转连接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(lan=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(lan=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将自定义国际化组件注入IOC容器</p><p>添加Bean</p><p>MyMvcConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>        registry.addViewController(<span class="hljs-string">&quot;/index.html&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//将自定义国际化组件放入容器中生效</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title function_">localeResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLocaleResolver</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>中文：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008203731.png" alt="QQ截图20221008203731"></p><p>英文：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008203752.png" alt="QQ截图20221008203752"></p></li></ol><h1 id="4-登录功能实现"><a href="#4-登录功能实现" class="headerlink" title="4. 登录功能实现"></a>4. 登录功能实现</h1><p><strong>实现步骤：</strong></p><ol><li><p>把登录页面的表单提交地址写一个controller</p><p>修改index.html，所有表单标签都需要加上一个name属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user/login&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;72&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--如果msg的值为空，则不显示消息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">&quot;#&#123;login.username&#125;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">&quot;#&#123;login.password&#125;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox mb-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remember-me&quot;</span>&gt;</span> [[#&#123;login.remember&#125;]]<br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>[[#&#123;login.btn&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2021-2022<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(lan=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(lan=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写对应的controller</p><p>LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.thymeleaf.util.StringUtils;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/user/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password, Model model)</span>&#123;<br>        <span class="hljs-comment">//具体的业务</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(password))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/main.html&quot;</span>;  <span class="hljs-comment">//跳转到登录成功页面</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//告诉用户登录失败</span><br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名或者密码错误！&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>若登录失败，需要将后台信息输出到前端展示给用户</p><p>修改index.html，可以在首页标题下面加上判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--如果msg的值为空，则不显示消息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在MyMvcConfig中添加一个视图控制映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">registry.addViewController(<span class="hljs-string">&quot;/main.html&quot;</span>).setViewName(<span class="hljs-string">&quot;dashboard&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>防止表单重复提交，将 Controller 的代码改为重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(password))&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/main.html&quot;</span>;  <span class="hljs-comment">//跳转到登录成功页面</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>登录成功：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008213202.png" alt="QQ截图20221008213202"></p><p>登录失败：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008212658.png" alt="QQ截图20221008212658"></p></li></ol><h1 id="5-登录拦截器"><a href="#5-登录拦截器" class="headerlink" title="5. 登录拦截器"></a>5. 登录拦截器</h1><p>问题：可以直接登录到后台主页，不用登录也可以实现</p><p>解决：可以使用拦截器机制，实现登录检查</p><p><strong>拦截器实现步骤：</strong></p><ol><li><p>自定义一个拦截器</p><p>LoginHandlerInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.config;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">//自定义拦截器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//登录成功之后，应该有用户的session</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);<br>        <span class="hljs-keyword">if</span>(loginUser == <span class="hljs-literal">null</span>)&#123;<br>            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;没有权限，请先登录&quot;</span>);<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/index.html&quot;</span>).forward(request,response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将拦截器注册到SpringMVC配置类（MyMvcConfig.java）中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span>&#123;<br>    registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginHandlerInterceptor</span>())<br>            .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>            .excludePathPatterns(<span class="hljs-string">&quot;/index.html&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/user/login&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/js/**&quot;</span>,<span class="hljs-string">&quot;/img/**&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在后台主页，获取用户登录的信息</p><p>修改dashboard.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--后台主页显示登录用户的信息--&gt;</span><br>[[$&#123;session.loginUser&#125;]]<br></code></pre></td></tr></table></figure></li><li><p>测试拦截器</p><p>拦截成功，只有用户名和密码输入正确才会放行，其他情况拦截。</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221008220247.png" alt="QQ截图20221008220247"></p></li></ol><h1 id="6-展示员工列表"><a href="#6-展示员工列表" class="headerlink" title="6. 展示员工列表"></a>6. 展示员工列表</h1><blockquote><p><strong>Restful风格</strong></p></blockquote><p>要求：需要使用 Restful风格实现我们的CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmo?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><p>项目具体需求：</p><table><thead><tr><th>项目功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工（来到修改页面）</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><h2 id="6-1-员工列表页面跳转"><a href="#6-1-员工列表页面跳转" class="headerlink" title="6.1 员工列表页面跳转"></a>6.1 员工列表页面跳转</h2><ol><li><p>将首页的侧边栏Customers改为员工管理</p></li><li><p>&lt;a&gt;链接添加请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;active==&#x27;list.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将list放在emp文件夹下</p></li><li><p>编写处理请求的controller</p><p>EmployeeController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.controller;<br><br><span class="hljs-keyword">import</span> com.study.dao.EmployeeDao;<br><span class="hljs-keyword">import</span> com.study.pojo.Employee;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeDao employeeDao;<br>    <span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">list</span><span class="hljs-params">(Model model)</span>&#123;<br>        Collection&lt;Employee&gt; employees = employeeDao.getAll();<br>        model.addAttribute(<span class="hljs-string">&quot;emps&quot;</span>,employees);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;emp/list&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-2-Thymeleaf-公共页面元素抽取"><a href="#6-2-Thymeleaf-公共页面元素抽取" class="headerlink" title="6.2 Thymeleaf 公共页面元素抽取"></a>6.2 Thymeleaf 公共页面元素抽取</h2><p>侧边栏和顶部都相同，可以抽取出来变成公共组件，实现代码复用</p><p><strong>实现步骤：</strong></p><ol><li>抽取公共片段 th:fragment 定义模板名</li><li>引入公共片段 th:insert 插入模板名</li></ol><p><strong>具体实现：</strong></p><ol><li><p>建立一个commons文件夹，存放公共页面</p><p>公共页面元素抽取：commons.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--组件，可以代码复用--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--头部导航栏--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;topbar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand col-sm-3 col-md-2 mr-0&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>[[$&#123;session.loginUser&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control form-control-dark w-100&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Search&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-nav px-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item text-nowrap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--侧边栏--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span><br>    ......<br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>dashboard.html页面引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--头部导航栏--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;~&#123;commons/commons::topbar&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--侧边栏--&gt;</span><br>        <span class="hljs-comment">&lt;!--传递参数给组件：判断点击高亮--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;~&#123;commons/commons::sidebar(active=&#x27;main.html&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span><br>            ......<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>list.html页面引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--引入抽取的topbar--&gt;</span><br><span class="hljs-comment">&lt;!--模板名：会使用thymeleaf的前后缀配置规则进行解析使用~&#123;模板::标签名&#125;--&gt;</span><br><span class="hljs-comment">&lt;!--头部导航栏--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;~&#123;commons/commons::topbar&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--侧边栏--&gt;</span><br>        <span class="hljs-comment">&lt;!--传递参数给组件：判断点击高亮--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;~&#123;commons/commons::sidebar(active=&#x27;list.html&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span><br>            ......<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="6-3-侧边栏激活"><a href="#6-3-侧边栏激活" class="headerlink" title="6.3 侧边栏激活"></a>6.3 侧边栏激活</h2><ol><li><p>将首页的超链接地址改到项目中</p></li><li><p>在&lt;a&gt;标签中加一个判断，使用class改变标签的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;active==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html&#125;&quot;</span>&gt;</span><br>        ......<br>        首页 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;active==&#x27;list.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span><br>        ......<br>        员工管理<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改请求链接</p><p>dashboard.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--传递参数给组件：判断点击高亮--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;~&#123;commons/commons::sidebar(active=&#x27;main.html&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>list.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--传递参数给组件：判断点击高亮--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;~&#123;commons/commons::sidebar(active=&#x27;list.html&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="6-4-员工信息页面展示"><a href="#6-4-员工信息页面展示" class="headerlink" title="6.4 员工信息页面展示"></a>6.4 员工信息页面展示</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>员工列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table-responsive&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-striped table-sm&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>lastName<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>gender<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>birth<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getId()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getLastName()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getEmail()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getGender()==0?&#x27;女&#x27;:&#x27;男&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.department.getDepartmentName()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(emp.getBirth(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221011203103.png" alt="QQ截图20221011203103"></p><h1 id="7-增加员工实现"><a href="#7-增加员工实现" class="headerlink" title="7. 增加员工实现"></a>7. 增加员工实现</h1><h2 id="7-1-表单及细节优化"><a href="#7-1-表单及细节优化" class="headerlink" title="7.1 表单及细节优化"></a>7.1 表单及细节优化</h2><ol><li><p>将添加员工信息改为超链接</p><p>list.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--添加员工按钮--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-success&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/emp&#125;&quot;</span>&gt;</span>添加员工<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写对应的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//跳转到员工添加页面</span><br><span class="hljs-meta">@GetMapping(&quot;/emp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toAddPage</span><span class="hljs-params">(Model model)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;emp/add&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写前端添加表单add.html</p><p>add.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/emp&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>LastName<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;2746200911@qq.com&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Gender<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check form-check-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check form-check-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--在controller接收的是一个Employee，需要提交的是其中的一个属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department.id&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;dept:$&#123;departments&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;dept.getDepartmentName()&#125;&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$dept.getId()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Birth<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birth&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;2002/02/02&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure></li><li><p>部门信息下拉框应该选择的是提供的数据，修改一下前端和后端</p><p>后端controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//跳转到员工添加页面</span><br><span class="hljs-meta">@GetMapping(&quot;/emp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toAddPage</span><span class="hljs-params">(Model model)</span>&#123;<br>    <span class="hljs-comment">//查出所有部门的信息</span><br>    Collection&lt;Department&gt; departments = departmentDao.getDepartments();<br>    model.addAttribute(<span class="hljs-string">&quot;departments&quot;</span>,departments);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;emp/add&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--在controller接收的是一个Employee，需要提交的是其中的一个属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;dept:$&#123;departments&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;dept.getDepartmentName()&#125;&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;dept.getId()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="7-2-添加员工实现"><a href="#7-2-添加员工实现" class="headerlink" title="7.2 添加员工实现"></a>7.2 添加员工实现</h2><ol><li><p>修改add页面form表单提交地址和方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/emp&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    ......<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写controller接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加、修改成功后重定向到列表页</span><br><span class="hljs-meta">@PostMapping(&quot;/emp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;save=&gt;&quot;</span>+employee);<br>    <span class="hljs-comment">//添加操作</span><br>    employeeDao.save(employee);  <span class="hljs-comment">//调用底层业务方法保存员工信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/emps&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>跳转和接收完整controller层</p><p>EmployeeController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeDao employeeDao;<br>    <span class="hljs-meta">@Autowired</span><br>    DepartmentDao departmentDao;<br><br>    <span class="hljs-comment">//跳转到员工添加页面</span><br>    <span class="hljs-meta">@GetMapping(&quot;/emp&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toAddPage</span><span class="hljs-params">(Model model)</span>&#123;<br>        <span class="hljs-comment">//查出所有部门的信息</span><br>        Collection&lt;Department&gt; departments = departmentDao.getDepartments();<br>        model.addAttribute(<span class="hljs-string">&quot;departments&quot;</span>,departments);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;emp/add&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//添加成功后重定向到列表页</span><br>    <span class="hljs-meta">@PostMapping(&quot;/emp&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Employee employee)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save=&gt;&quot;</span>+employee);<br>        <span class="hljs-comment">//添加操作</span><br>        employeeDao.save(employee);  <span class="hljs-comment">//调用底层业务方法保存员工信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/emps&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>添加页面：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221012110041.png" alt="QQ截图20221012110041"></p><p>添加成功页面：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221012110030.png" alt="QQ截图20221012110030"></p></li></ol><h1 id="8-修改员工信息"><a href="#8-修改员工信息" class="headerlink" title="8. 修改员工信息"></a>8. 修改员工信息</h1><h2 id="8-1-日期格式化"><a href="#8-1-日期格式化" class="headerlink" title="8.1 日期格式化"></a>8.1 日期格式化</h2><blockquote><p>因为这个错误卡了很久！😭</p></blockquote><p>SpringMVC会将页面提交的值转换为指定的类型，默认日期是按照 / 的方式提交，比如将 2019/01/01 转换为一个date对象。</p><p><strong>日期格式化：</strong></p><p>在配置类中自定义的去修改时间格式化问题</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置文件的真实位置</span><br><span class="hljs-attr">spring.messages.basename</span>=<span class="hljs-string">i18n/login</span><br><span class="hljs-comment">#时间日期格式化</span><br><span class="hljs-attr">spring.mvc.date-format</span>=<span class="hljs-string">yyyy-MM-dd</span><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">th:value=&quot;$&#123;#dates.format(emp.getBirth(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;<br></code></pre></td></tr></table></figure><h2 id="8-2-修改员工信息"><a href="#8-2-修改员工信息" class="headerlink" title="8.2 修改员工信息"></a>8.2 修改员工信息</h2><p><strong>实现步骤：</strong></p><ol><li>点击编辑按钮，跳转到修改员工信息页面</li><li>显示原数据，修改完员工信息后重定向到列表页面</li></ol><p><strong>具体实现：</strong></p><ol><li><p>修改跳转链接位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-primary&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/emp/&#125;+$&#123;emp.getId()&#125;&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写对应的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//跳转到员工修改页面</span><br><span class="hljs-meta">@GetMapping(&quot;/emp/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toUpdateEmp</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Integer id,Model model)</span>&#123;<br>    <span class="hljs-comment">//查询出来原来的数据</span><br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeDao.getEmployeeById(id);<br>    model.addAttribute(<span class="hljs-string">&quot;emp&quot;</span>,employee);<br>    <span class="hljs-comment">//查出所有部门的信息</span><br>    Collection&lt;Department&gt; departments = departmentDao.getDepartments();<br>    model.addAttribute(<span class="hljs-string">&quot;departments&quot;</span>,departments);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;emp/update&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写修改员工信息页面</p><p>update.html（复制add.html页面后修改）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/emp&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--携带id和隐藏域--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;emp.getId()&#125;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>LastName<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;emp.getLastName()&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;emp.getEmail()&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Gender<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check form-check-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;emp.getGender==1&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check form-check-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;emp.getGender==0&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--在controller接收的是一个Employee，需要提交的是其中的一个属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department.id&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:selected</span>=<span class="hljs-string">&quot;$&#123;dept.getId()==emp.getDepartment.getId()&#125;&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;dept:$&#123;departments&#125;&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;dept.getDepartmentName()&#125;&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;dept.getId()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Birth<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;#dates.format(emp.getBirth(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birth&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>日期格式化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;#dates.format(emp.getBirth(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birth&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改表单提交的地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/emp&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    ......<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写对应的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加、修改成功后重定向到列表页</span><br><span class="hljs-meta">@PostMapping(&quot;/emp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;save=&gt;&quot;</span>+employee);<br>    <span class="hljs-comment">//添加操作</span><br>    employeeDao.save(employee);  <span class="hljs-comment">//调用底层业务方法保存员工信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/emps&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>修改前：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221012204640.png" alt="QQ截图20221012204640"></p><p>修改后：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221012204733.png" alt="QQ截图20221012204733"></p></li></ol><h1 id="9-删除及404处理"><a href="#9-删除及404处理" class="headerlink" title="9. 删除及404处理"></a>9. 删除及404处理</h1><h2 id="9-1-删除员工信息"><a href="#9-1-删除员工信息" class="headerlink" title="9.1 删除员工信息"></a>9.1 删除员工信息</h2><ol><li><p>list页面编写提交地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-danger&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/deleteEmp/&#125;+$&#123;emp.getId()&#125;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除员工信息</span><br><span class="hljs-meta">@GetMapping(&quot;/deleteEmp/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteEmp</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span><span class="hljs-type">int</span> id)</span>&#123;<br>    employeeDao.delete(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/emps&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><h2 id="9-2-404处理"><a href="#9-2-404处理" class="headerlink" title="9.2 404处理"></a>9.2 404处理</h2><ol><li><p>在templates模板目录下添加一个error文件夹，文件夹存放相应的错误页面，例如：404.html，4xx.html…，SpringBoot会自动使用</p></li><li><p>测试</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221012212029.png" alt="QQ截图20221012212029"></p></li></ol><h2 id="9-3-注销处理"><a href="#9-3-注销处理" class="headerlink" title="9.3 注销处理"></a>9.3 注销处理</h2><ol><li><p>注销请求</p><p>修改common.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/logout&#125;&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>对应的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除员工信息</span><br><span class="hljs-meta">@GetMapping(&quot;/deleteEmp/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteEmp</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span><span class="hljs-type">int</span> id)</span>&#123;<br>    employeeDao.delete(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/emps&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="10-项目目录结构"><a href="#10-项目目录结构" class="headerlink" title="10. 项目目录结构"></a>10. 项目目录结构</h1><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221012213713.png" alt="QQ截图20221012213713"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221012213803.png" alt="QQ截图20221012213803"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot Web开发</title>
    <link href="/2022/10/07/SpringBoot%20Web%E5%BC%80%E5%8F%91/"/>
    <url>/2022/10/07/SpringBoot%20Web%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SpringBoot-Web开发"><a href="#1-SpringBoot-Web开发" class="headerlink" title="1. SpringBoot Web开发"></a>1. SpringBoot Web开发</h1><blockquote><p><strong>简介</strong></p></blockquote><p>使用SpringBoot的步骤：</p><ol><li>创建一个SpringBoot应用，选择需要的模块，SpringBoot就会默认将需要的模块自动配置好。</li><li>手动在配置文件中配置部分配置项目就可以运行起来了。</li><li>专注编写业务代码，不需要考虑以前那样一大堆的配置了。</li></ol><p> <strong>xxxxAutoConfigurartion：自动配置类，给容器中添加组件</strong></p><p><strong>xxxxProperties：封装配置文件中相关属性</strong></p><blockquote><p><strong>☆SpringBoot Web开发需要解决的问题：</strong></p></blockquote><ul><li>导入静态资源</li><li>首页</li><li>jsp，模板引擎Thymeleaf</li><li>增删改查</li><li>拦截器</li><li>国际化</li></ul><h1 id="2-静态资源处理"><a href="#2-静态资源处理" class="headerlink" title="2. 静态资源处理"></a>2. 静态资源处理</h1><h2 id="2-1-第一种静态资源映射规则"><a href="#2-1-第一种静态资源映射规则" class="headerlink" title="2.1 第一种静态资源映射规则"></a>2.1 第一种静态资源映射规则</h2><p>写请求非常简单，要引入前端资源，项目中有许多的静态资源，比如css，js等文件，这 个SpringBoot怎么处理呢？ </p><p>如果是一个web应用，main下会有一个webapp，以前都是将所有的页面导在这里面的。但是现在的pom呢，打包方式是为jar的方式，这种方式SpringBoot也是可以写页面的。但是SpringBoot对于静态资源放置的位置，是有规定的。</p><p>静态资源映射规则：</p><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面。</p><p>WebMvcAutoConfigurationAdapter 中有很多配置方法，有一个方法： addResourceHandlers 添加资源处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>        logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.addResourceHandler(registry, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>        <span class="hljs-built_in">this</span>.addResourceHandler(registry, <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;<br>            registration.addResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.servletContext != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ServletContextResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResource</span>(<span class="hljs-built_in">this</span>.servletContext, <span class="hljs-string">&quot;/&quot;</span>);<br>                registration.addResourceLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Resource</span>[]&#123;resource&#125;);<br>            &#125;<br><br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>源代码理解：所有的 /webjars/** ，都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源。</p><blockquote><p><strong>什么是WebJars</strong></p></blockquote><p><strong>webjars官网：<a href="https://www.webjars.org/">https://www.webjars.org</a></strong></p><blockquote><p><strong>概述：</strong></p><p>对于日常的web开发而言，像css、js、images、font等静态资源文件管理是非常的混乱的、比如jQuery、Bootstrap、Vue.js等，可能每个框架使用的版本都不一样、一不注意就会出现版本冲突或者重复添加的问题。所以找到了一个叫做WebJars的技术，下面我将介绍如何将静态资源打包成jar。<br>原本我们在进行web开发时，一般上都是讲静态资源文件放置在webapp目录下，在SpringBoot里面，一般是将资源文件放置在src/main/resources/static目录下。而在Servlet3中，允许我们直接访问WEB-INF/lib下的jar包中的/META-INF/resources目录资源，即WEB-INF/lib/{*.jar}/META-INF/resources下的资源可以直接访问。<br>所以其实，WebJars也是利用了此功能，将所有前端的静态文件打包成一个jar包，这样对于引用放而言，和普通的jar引入是一样的，还能很好的对前端静态资源进行管理。</p><p>WebJars是一个很神奇的东西，可以让大家以jar包的形式来使用前端的各种框架、组件。</p><p><strong>什么是WebJars：</strong></p><p>WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。</p><p><strong>为什么使用：</strong></p><p>我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp目录下的手工方式，这样做就无法对这些资源进行依赖管理。而且容易导致文件混乱、版本不一致等问题。那么WebJars就提供给我们这些前端资源的jar包形式，我们就可以进行依赖管理。</p><p>WebJars是将这些通用的Web前端资源打包成Java的Jar包，然后借助Maven工具对其管理，保证这些Web资源版本唯一性，升级也比较容易。关于webjars资源，有一个专门的网站<a href="http://www.webjars.org/%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%88%B0%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8A%E6%89%BE%E5%88%B0%E8%87%AA%E5%B7%B1%E9%9C%80%E8%A6%81%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%8C%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B7%A5%E7%A8%8B%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%A5maven%E4%BE%9D%E8%B5%96%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E8%BF%99%E4%BA%9B%E8%B5%84%E6%BA%90%E4%BA%86%E3%80%82">http://www.webjars.org/，我们可以到这个网站上找到自己需要的资源，在自己的工程中添加入maven依赖，即可直接使用这些资源了。</a></p></blockquote><p><strong>WebJars如何使用：</strong></p><p>例如：SpringBoot要使用jQuery，我们只要要引入jQuery对应版本的pom依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>底层源码映射原理：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221007202505.png" alt="QQ截图20221007202505"></p><p>访问Jquery.js文件：只要是静态资源，SpringBoot就会去对应的路径寻找资源</p><p>访问：<a href="http://localhost:8080/webjars/jquery/3.6.1/jquery.js">http://localhost:8080/webjars/jquery/3.6.1/jquery.js</a></p><p>测试结果：可以访问到静态资源</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221007202838.png" alt="QQ截图20221007202838"></p><h2 id="2-2-第二种静态资源映射规则"><a href="#2-2-第二种静态资源映射规则" class="headerlink" title="2.2 第二种静态资源映射规则"></a>2.2 第二种静态资源映射规则</h2><p>项目中要是使用自己的静态资源该怎么导入呢？</p><p>找staticPathPattern发现第二种映射规则：/** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类。</p><p><strong>源码分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 进入方法</span><br><span class="hljs-keyword">public</span> String[] getStaticLocations() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.staticLocations;<br>&#125;<br><span class="hljs-comment">// 找到对应的值</span><br><span class="hljs-keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br><span class="hljs-comment">// 找到路径</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123;<br>    <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br>    <span class="hljs-string">&quot;classpath:/resources/&quot;</span>,<br>    <span class="hljs-string">&quot;classpath:/static/&quot;</span>,<br>    <span class="hljs-string">&quot;classpath:/public/&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>ResourceProperties 可以设置和静态资源有关的参数，这里面指向了它会去寻找资源的文件夹，即上面数组的内容。 </p><p>得出结论：以下四个目录存放的静态资源可以被我们识别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span><br><span class="hljs-string">&quot;classpath:/resources/&quot;</span><br><span class="hljs-string">&quot;classpath:/static/&quot;</span><br><span class="hljs-string">&quot;classpath:/public/&quot;</span><br></code></pre></td></tr></table></figure><p>可以在resources根目录下新建对应的文件夹，都可以存放静态文件。</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221007204211.png" alt="QQ截图20221007204211"></p><p><strong>优先级：resources &gt; static &gt; public</strong></p><p>例如访问 <a href="http://localhost:8080/1.js%EF%BC%8C%E4%BB%96%E5%B0%B1%E4%BC%9A%E5%8E%BB%E8%BF%99%E4%BA%9B%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E5%AF%BB%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E3%80%82">http://localhost:8080/1.js，他就会去这些文件夹中寻找对应的静态资源文件。</a></p><blockquote><p><strong>自定义静态资源路径</strong></p></blockquote><p>也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在 application.properties中配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/coding/classpath:/**/</span><br></code></pre></td></tr></table></figure><p>一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了。</p><h1 id="3-首页和图标处理"><a href="#3-首页和图标处理" class="headerlink" title="3. 首页和图标处理"></a>3. 首页和图标处理</h1><h2 id="3-1-自定义首页"><a href="#3-1-自定义首页" class="headerlink" title="3.1 自定义首页"></a>3.1 自定义首页</h2><p><strong>源码分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title function_">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;<br>    <span class="hljs-type">WelcomePageHandlerMapping</span> <span class="hljs-variable">welcomePageHandlerMapping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WelcomePageHandlerMapping</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, <span class="hljs-built_in">this</span>.getWelcomePage(), <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern());<br>    welcomePageHandlerMapping.setInterceptors(<span class="hljs-built_in">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));<br>    welcomePageHandlerMapping.setCorsConfigurations(<span class="hljs-built_in">this</span>.getCorsConfigurations());<br>    <span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Optional&lt;Resource&gt; <span class="hljs-title function_">getWelcomePage</span><span class="hljs-params">()</span> &#123;<br>String[] locations = getResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br>    <span class="hljs-comment">// ::是java8 中新引入的运算符</span><br>    <span class="hljs-comment">// Class::function的时候function是属于Class的，应该是静态方法</span><br>    <span class="hljs-comment">// this::function的funtion是属于这个对象的</span><br>    <span class="hljs-comment">// 简而言之，就是一种语法糖而已，是一种简写</span><br><span class="hljs-keyword">return</span> Arrays.stream(locations).map(<span class="hljs-built_in">this</span>::getIndexHtml).filter(<span class="hljs-built_in">this</span>::isReadable).findFirst();<br>&#125;<br><span class="hljs-comment">// 欢迎页就是一个location下的index.html而已</span><br><span class="hljs-keyword">private</span> Resource <span class="hljs-title function_">getIndexHtml</span><span class="hljs-params">(String location)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.resourceLoader.getResource(location + <span class="hljs-string">&quot;index.html&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：静态资源文件夹下的所有 index.html 页面被 /** 映射。 映射为首页。</p><p>SpringBoot默认首页：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221007205739.png" alt="QQ截图20221007205739"></p><p>自定义首页：</p><ol><li><p>public目录下新建index.html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>访问 <a href="http://localhost:8080/">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html </p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221007210218.png" alt="QQ截图20221007210218"></p></li></ol><h2 id="3-2-自定义图标"><a href="#3-2-自定义图标" class="headerlink" title="3.2 自定义图标"></a>3.2 自定义图标</h2><p>网站自定义图标说明：</p><p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找 favicon.ico。如果存在这样的文件，它将自动用作应用程序的favicon。 </p><ol><li><p>关闭SpringBoot默认图标</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#关闭默认图标</span><br><span class="hljs-attr">spring.mvc.favicon.enabled</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure></li><li><p>自己放一个图标在静态资源目录下，放在 public 目录下</p></li><li><p>清除浏览器缓存刷新网页，图标变成自定义</p></li></ol><h1 id="4-Thymeleaf"><a href="#4-Thymeleaf" class="headerlink" title="4. Thymeleaf"></a>4. Thymeleaf</h1><p><strong>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></strong></p><h2 id="4-1-模板引擎"><a href="#4-1-模板引擎" class="headerlink" title="4.1 模板引擎"></a>4.1 模板引擎</h2><blockquote><p><strong>模板引擎</strong></p></blockquote><blockquote><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的<a href="https://baike.baidu.com/item/HTML/97049?fromModule=lemma_inlink">HTML</a>文档。</p></blockquote><p>前端交给我们的页面，是html页面。如果是以前开发，需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示及交互等。</p><p>jsp支持非常强大的功能，包括能写Java代码，但是现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war。SpringBoot用的还是嵌入式的Tomcat，所以现在默认是不支持 jsp 的。</p><p><strong>问题：</strong>不支持jsp，如果直接用纯静态页面的方式，给开发会带来非常大的麻烦，</p><p><strong>解决办法：</strong>SpringBoot推荐使用模板引擎</p><p>其实jsp就是一个模板引擎，还有以用的比较多的freemarker，包括 SpringBoot推荐的<strong>Thymeleaf</strong>，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的。</p><p>模板引擎思想：</p><p><img src="https://img.yiqiangshiyia.cn/blog/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.jpg" alt="模板引擎"></p><p><strong>模板引擎的作用：</strong></p><blockquote><p>模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离，这就大大提升了开发效率，良好的设计也使得代码重用变得更加容易。</p></blockquote><p>当写一个页面模板，比如有些值是动态的，写一些表达式。而这些值从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。</p><blockquote><p><strong>引入Thymeleaf</strong></p></blockquote><p>如何引入：</p><ul><li>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></li><li>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a> </li><li>Spring官方文档：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </li></ul><p>找到对应的pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>thymeleaf 分析</strong></p></blockquote><p>首先得按照SpringBoot的自动配置原理看一下Thymeleaf的自动配置规则，在按照规则进行使用。 </p><p>去找一下Thymeleaf的自动配置类：ThymeleafProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">prefix = &quot;spring.thymeleaf&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">checkTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">checkTemplateLocation</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HTML&quot;</span>;<br>    <span class="hljs-keyword">private</span> Charset encoding;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在其中看到默认的前缀和后缀。</p><p>只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p><p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可。</p><p><strong>Thymeleaf使用：</strong> </p><ol><li><p>编写一个TestController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//classpath:/templates/test.html</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写一个测试页面 test.html 放在 templates 目录下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动项目请求测试</p></li></ol><h2 id="4-2-Thymeleaf-语法学习"><a href="#4-2-Thymeleaf-语法学习" class="headerlink" title="4.2 Thymeleaf 语法学习"></a>4.2 Thymeleaf 语法学习</h2><p>参考官方文档学习：<strong>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></strong></p><p>例：我们需要查出一些数据，在页面中展示。</p><ol><li><p>修改测试请求，增加数据传输</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">(Model model)</span>&#123;<br>    <span class="hljs-comment">//存入数据</span><br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Hello,Thymeleaf&quot;</span>);<br>    <span class="hljs-comment">//classpath:/templates/test.html</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:th=&quot;http://www.thymeleaf.org&quot;<br></code></pre></td></tr></table></figure></li><li><p>编写前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>林慕椿<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--th:text就是将div中的内容设置为它指定的值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动测试</p></li></ol><blockquote><p><strong>Thymeleaf的使用语法：</strong></p></blockquote><ol><li><p>可以使用任意的 th:attr 来替换Html中原生属性的值</p><p><img src="https://img.yiqiangshiyia.cn/blog/Thymeleaf.jpg" alt="Thymeleaf"></p></li></ol><p>测试： </p><ol><li><p>编写一个Controller，放一些数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span>&#123;<br>    <span class="hljs-comment">//存入数据</span><br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;users&quot;</span>, Arrays.asList(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-string">&quot;林思湫&quot;</span>));<br>    <span class="hljs-comment">//classpath:/templates/test.html</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试页面取出数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--不转义--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--遍历数据--&gt;</span><br><span class="hljs-comment">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user :$&#123;users&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--遍历数据行内写法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[$&#123;user&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动项目测试</p></li></ol><h1 id="5-MVC自动配置原理"><a href="#5-MVC自动配置原理" class="headerlink" title="5. MVC自动配置原理"></a>5. MVC自动配置原理</h1><blockquote><p><strong>官网阅读</strong></p></blockquote><p>在进行项目编写前，需要知道SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展如何定制。 </p><p>方法1：分析源码</p><p>方法2：阅读官方文档</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">官方文档</a></p><blockquote><p><strong>ContentNegotiatingViewResolver内容协商视图解析器</strong></p></blockquote><p>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的。</p><p>内容协商视图解析器自动配置了ViewResolver，就是SpringMVC的视图解析器，即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。 </p><p>源码分析：</p><p>……</p><blockquote><p><strong>自定义视图解析器</strong></p></blockquote><p>可以自己给容器中去添加一个视图解析器，这个类就会帮我们自动的将它组合进来。</p><p>实现步骤：</p><ol><li><p>在主程序中写一个视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.View;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">//如果想自定义一些功能，只需要写这个组件，然后把它交给SpringBoot，SpringBoot会自动装配</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">//ViewResolver实现类视图解析器接口的类，可以把它看做视图解析器</span><br>    <span class="hljs-meta">@Bean</span>  <span class="hljs-comment">//放到IOC容器中</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">myViewResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyViewResolver</span>();<br>    &#125;<br>    <span class="hljs-comment">//自定义视图解析器MyViewResolver</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ViewResolver</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> View <span class="hljs-title function_">resolveViewName</span><span class="hljs-params">(String s, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><p><strong>结论：</strong>在SpringBoot中想要使用自己定制化的东西，只需要给容器中添加这个组件就好了，剩下的事情 SpringBoot就会帮我们做了。</p><blockquote><p><strong>修改SpringBoot的默认配置</strong></p></blockquote><p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置 @bean），如果有就用用户配置的，如果没有就用自动配置的。</p><p>如果有些组件可以存在多个，比如视图解析器，就将用户配置的和自己默认的组合起来。</p><blockquote><p><strong>全面接管SpringMVC</strong></p></blockquote><p>全面接管：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置。只需在我们的配置类中要加一个@EnableWebMvc。</p><p>如果全面接管了SpringMVC，之前SpringBoot给我们配置的静态资源映射一定会无效。</p><h1 id="6-Swagger"><a href="#6-Swagger" class="headerlink" title="6. Swagger"></a>6. Swagger</h1><h2 id="6-1-Swagger概述"><a href="#6-1-Swagger概述" class="headerlink" title="6.1 Swagger概述"></a>6.1 Swagger概述</h2><blockquote><p>在前后端分离开发的过程中，前端和后端需要进行api对接进行交互，就需要一个api规范文档，方便前后端的交互，但api文档不能根据代码的变化发生实时动态的改变，这样后端修改了接口，前端不能及时获取最新的接口，导致调用出错，需要手动维护api文档，加大了开发的工作量和困难，而swagger的出现就是为了解决这一系列的问题。</p></blockquote><p>swagger是一套基于OpenAPI规范构建的开源工具，使用RestApi</p><ol><li>代码变，文档变</li><li>跨语言，支持多种语言</li><li>swagger-ui 呈现出来的是一份可交互式的API文档，可以直接在文档页面尝试API的调用</li><li>可以将文档规范导入相关工具（postman、soapui），这些工具将会为我们自动地创建自动化测试</li></ol><p>swagger主要包含了以下三个部分：</p><ul><li>swagger editor：基于浏览器的编辑器，我们可以使用它编写我们OpenApi规范(yaml或者json配置）</li><li>Swagger UI：他会将我们编写的OpenApi规范呈现为交互式的API文档，后文我将使用浏览器来查看并且操作我们的RestApi</li><li>Swagger Codegen：它可以通过OpenApi规范定义的任何API生成服务器存根和客户端SDK来简化构建过程</li></ul><p>使用swagger就是把相关信息存储在它定义的描述文件里面（yml或json格式），再通过维护这个描述文件可以去更新接口文档，以及生成各端代码。</p><blockquote><p><strong>Springfox：</strong></p></blockquote><blockquote><p>使用swagger时如果碰见版本更新迭代时，只需要更改swagger的描述文件即可，但是在频繁的更新项目版本时很多开发人员认为即使修改描述文件（yml或json文件）也是一定的工作负担，久而久之就直接修改代码，而不去修改描述文件了，这样基于描述文件生成接口文档也失去了意义。<br>Marty Pitt编写了一个基于spring的组件 swagger-springmvc ,Spring-fox就是根据这个组件发展而来的全新项目;<br>Spring-fox是根据代码生成接口文档，所以正常的进行更新项目版本，修改代码即可，而不需要跟随修改描述文件(yml或json文件）;<br>spring-fox利用自身AOP特性，把swagger集成进来，底层还是Swagger，但是使用起来却方便很多，所以在实际开发中，都是直接使用spring-fox。</p></blockquote><h2 id="6-2-SpringBoot集成Swagger"><a href="#6-2-SpringBoot集成Swagger" class="headerlink" title="6.2 SpringBoot集成Swagger"></a>6.2 SpringBoot集成Swagger</h2><blockquote><p>SpringBoot整合Swagger，版本不兼容报错问题解决方法。</p><p>参考博客：<a href="https://blog.csdn.net/hadues/article/details/123753888">https://blog.csdn.net/hadues/article/details/123753888</a></p></blockquote><ol><li><p>新建一个SpringBoot项目</p></li><li><p>导入Swagger相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注意SpringBoot和Swagger版本的兼容性，降低SpringBoot版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@EnableSwagger2</span> <span class="hljs-comment">//开启Swagger2的自动配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试运行：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p>可以看见Swagger页面</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221021102132.png" alt="QQ截图20221021102132"></p></li></ol><h2 id="6-3-配置Swagger"><a href="#6-3-配置Swagger" class="headerlink" title="6.3 配置Swagger"></a>6.3 配置Swagger</h2><h3 id="6-3-1-配置Swagger信息"><a href="#6-3-1-配置Swagger信息" class="headerlink" title="6.3.1 配置Swagger信息"></a>6.3.1 配置Swagger信息</h3><ol><li><p>Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swagger。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置Swagger Docket的Bean实例</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以通过apiInfo()属性配置文档信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置Swagger信息：apiInfo</span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>, <span class="hljs-string">&quot;https://yiqiangshiyia.cn&quot;</span>, <span class="hljs-string">&quot;2746200911@qq.com&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfo</span>(<br>            <span class="hljs-string">&quot;林慕椿的Swagger API文档&quot;</span>,  <span class="hljs-comment">//标题</span><br>            <span class="hljs-string">&quot;为霞尚满天&quot;</span>, <span class="hljs-comment">//描述</span><br>            <span class="hljs-string">&quot;v1.0&quot;</span>,  <span class="hljs-comment">//版本</span><br>            <span class="hljs-string">&quot;urn:tos&quot;</span>,<br>            contact,  <span class="hljs-comment">//联系人信息</span><br>            <span class="hljs-string">&quot;Apache 2.0&quot;</span>,  <span class="hljs-comment">//许可</span><br>            <span class="hljs-string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,  <span class="hljs-comment">//许可链接</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>()  <span class="hljs-comment">//扩展</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Docket 实例关联上 apiInfo()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置Swagger Docket的Bean实例</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>            .apiInfo(apiInfo());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>完整Swagger配置</p><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@EnableSwagger2</span> <span class="hljs-comment">//开启Swagger2的自动配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-comment">//配置Swagger Docket的Bean实例</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo());<br>    &#125;<br><br>    <span class="hljs-comment">//配置Swagger信息：apiInfo</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>, <span class="hljs-string">&quot;https://yiqiangshiyia.cn&quot;</span>, <span class="hljs-string">&quot;2746200911@qq.com&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfo</span>(<br>                <span class="hljs-string">&quot;林慕椿的Swagger API文档&quot;</span>,  <span class="hljs-comment">//标题</span><br>                <span class="hljs-string">&quot;为霞尚满天&quot;</span>, <span class="hljs-comment">//描述</span><br>                <span class="hljs-string">&quot;v1.0&quot;</span>,  <span class="hljs-comment">//版本</span><br>                <span class="hljs-string">&quot;urn:tos&quot;</span>,<br>                contact,  <span class="hljs-comment">//联系人信息</span><br>                <span class="hljs-string">&quot;Apache 2.0&quot;</span>,  <span class="hljs-comment">//许可</span><br>                <span class="hljs-string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,  <span class="hljs-comment">//许可链接</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>()  <span class="hljs-comment">//扩展</span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>访问：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221021105332.png" alt="QQ截图20221021105332"></p></li></ol><h3 id="6-3-2-配置扫描接口"><a href="#6-3-2-配置扫描接口" class="headerlink" title="6.3.2 配置扫描接口"></a>6.3.2 配置扫描接口</h3><ol><li><p>构建Docket时通过 select() 方法配置怎么扫描接口。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>.apiInfo(apiInfo())<br>.select() <span class="hljs-comment">//通过.select()方法去配置扫描接口，RequestHandlerSelectors配置如何扫描接口</span><br>.apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.study.controller&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启项目测试，由于配置根据包的路径扫描接口，所以只能看到一个类。</p></li><li><p>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    RequestHandlerSelectors配置扫描接口方式：</span><br><span class="hljs-comment">    basePackage：扫描指定的包</span><br><span class="hljs-comment">    ang()：扫描全部</span><br><span class="hljs-comment">    none()：不扫描</span><br><span class="hljs-comment">    withClassAnnotation：扫描类上的注解，参数是注解的一个反射对象</span><br><span class="hljs-comment">    withAnnotation：扫描方法上的注解</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li><li><p>通过 paths() 方法配置接口扫描过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置Swagger Docket的Bean实例</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>            .apiInfo(apiInfo())<br>            .select() <span class="hljs-comment">//通过.select()方法去配置扫描接口</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                RequestHandlerSelectors配置扫描接口方式：</span><br><span class="hljs-comment">                basePackage：扫描指定的包</span><br><span class="hljs-comment">                ang()：扫描全部</span><br><span class="hljs-comment">                none()：不扫描</span><br><span class="hljs-comment">                withClassAnnotation：扫描类上的注解，参数是注解的一个反射对象</span><br><span class="hljs-comment">                withAnnotation：扫描方法上的注解</span><br><span class="hljs-comment">             */</span><br>            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.study.controller&quot;</span>))<br>            <span class="hljs-comment">//通过.paths()方法去过滤路径</span><br>            .paths(PathSelectors.ant(<span class="hljs-string">&quot;/hello/**&quot;</span>))<br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>PathSelectors 可选方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">any() <span class="hljs-comment">// 任何请求都扫描</span><br>none() <span class="hljs-comment">// 任何请求都不扫描</span><br>regex(<span class="hljs-keyword">final</span> String pathRegex) <span class="hljs-comment">// 通过正则表达式控制</span><br>ant(<span class="hljs-keyword">final</span> String antPattern) <span class="hljs-comment">// 通过ant()控制</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-3-3-配置Swagger开关"><a href="#6-3-3-配置Swagger开关" class="headerlink" title="6.3.3 配置Swagger开关"></a>6.3.3 配置Swagger开关</h3><ol><li><p>通过enable()方法配置是否启用swagger</p><p>enable是否启动Swagger，如果为false，则swagger不能在浏览器中访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置Swagger Docket的Bean实例</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>            .apiInfo(apiInfo())<br>            <span class="hljs-comment">//enable是否启动Swagger，如果为false，则swagger不能在浏览器中访问</span><br>            .enable(<span class="hljs-literal">false</span>)<br>            .select() <span class="hljs-comment">//通过.select()方法去配置扫描接口</span><br>            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.study.controller&quot;</span>))<br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221021191620.png" alt="QQ截图20221021191620"></p></li><li><p>动态配置当项目处于test、dev环境时显示swagger，处于pro时不显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置Swagger Docket的Bean实例</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">(Environment environment)</span>&#123;<br><br>    <span class="hljs-comment">//设置要显示的Swagger环境</span><br>    <span class="hljs-type">Profiles</span> <span class="hljs-variable">profiles</span> <span class="hljs-operator">=</span> Profiles.of(<span class="hljs-string">&quot;dev&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-comment">//通过environment.acceptsProfiles判断是否处在自己设定的环境中</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> environment.acceptsProfiles(profiles);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>            .apiInfo(apiInfo())<br>            <span class="hljs-comment">//enable是否启动Swagger，如果为false，则swagger不能在浏览器中访问</span><br>            .enable(flag)<br>            .select() <span class="hljs-comment">//通过.select()方法去配置扫描接口</span><br>            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.study.controller&quot;</span>))<br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以在项目中增加一个 application-dev.properties 的配置文件查看效果</p></li></ol><h3 id="6-3-4-配置API文档分组"><a href="#6-3-4-配置API文档分组" class="headerlink" title="6.3.4 配置API文档分组"></a>6.3.4 配置API文档分组</h3><ol><li><p>如果API文档没有配置分组，默认是default。</p><p>通过groupName()方法即可配置分组： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">(Environment environment)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>            .apiInfo(apiInfo())<br>            .groupName(<span class="hljs-string">&quot;分组-01&quot;</span>)  <span class="hljs-comment">//配置分组</span><br>            <span class="hljs-comment">//enable是否启动Swagger，如果为false，则swagger不能在浏览器中访问</span><br>            .enable(<span class="hljs-literal">true</span>)<br>            .select() <span class="hljs-comment">//通过.select()方法去配置扫描接口</span><br>            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.study.controller&quot;</span>))<br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启项目查看分组</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221021191732.png" alt="QQ截图20221021191732"></p></li><li><p>配置多个分组</p><p>配置多个分组只需要配置多个docket即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group1&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group2&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket3</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启项目查看</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221021192158.png" alt="QQ截图20221021192158"></p></li></ol><h2 id="6-4-接口注释"><a href="#6-4-接口注释" class="headerlink" title="6.4 接口注释"></a>6.4 接口注释</h2><ol><li><p>新建一个实体类</p><p>@ApiModel为类添加注释</p><p>@ApiModelProperty为类属性添加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体&quot;)</span>  <span class="hljs-comment">//给实体类加中文注释</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户名&quot;)</span>  <span class="hljs-comment">//给属性加中文注释</span><br>    <span class="hljs-keyword">public</span> String username;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;密码&quot;)</span><br>    <span class="hljs-keyword">public</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>只要这个实体在请求接口的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//只要接口中返回值中存在实体类，就会被扫描到Swagger中</span><br><span class="hljs-meta">@PostMapping(value = &quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启查看测试</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221021193033.png" alt="QQ截图20221021193033"></p></li></ol><blockquote><p><strong>Swagger常用注解：</strong></p></blockquote><p>Swagger的所有注解定义在io.swagger.annotations包下</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags = “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value = “xxx属性说 明”,hidden = true)</td><td>作用在类方法和属性上，hidden设置为true可 以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似 @ApiModelProperty</td></tr></tbody></table><h2 id="6-5-Swagger总结"><a href="#6-5-Swagger总结" class="headerlink" title="6.5 Swagger总结"></a>6.5 Swagger总结</h2><ol><li>可以通过Swagger给一些比较难理解的属性或者接口增加注释信息</li><li>接口文档实时更新</li><li>可以在线测试</li></ol><h1 id="7-异步任务"><a href="#7-异步任务" class="headerlink" title="7. 异步任务"></a>7. 异步任务</h1><p>异步处理是非常常用的，比如在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功。一般会采用多线程的方式去处理这些任务，编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况。</p><p><strong>实现步骤：</strong></p><ol><li><p>在 service 包下创建一个类AsyncService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);  <span class="hljs-comment">//停止3s</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;数据处理中....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 controller 包下编写AsyncController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.controller;<br><br><span class="hljs-keyword">import</span> com.study.service.AsyncService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    AsyncService asyncService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        asyncService.hello();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>访问<a href="http://localhost:8080/hello%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello，3秒后出现success，这是同步等待的情况。</a></p></li></ol><p><strong>遇到问题：</strong></p><p>如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要手动去编写多线程的实现太麻烦了，只需要用一个简单的办法，在方法上加一个简单的注解即可。</p><p><strong>解决方法：</strong></p><ol><li><p>给hello方法添加@Async注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Async</span>  <span class="hljs-comment">//告诉Spring这是一个异步方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    Thread.sleep(<span class="hljs-number">3000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据处理中....&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot就会自己开一个线程池进行调用。但是要让这个注解生效，还需要在主程序上添加一个@EnableAsync注解，开启异步注解功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span> <span class="hljs-comment">//开启异步注解功能</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootTaskApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    SpringApplication.run(SpringbootTaskApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启测试</p><p>网页瞬间响应，后台代码依旧执行。</p></li></ol><h1 id="8-邮件任务"><a href="#8-邮件任务" class="headerlink" title="8. 邮件任务"></a>8. 邮件任务</h1><p>Springboot支持邮件发送：</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p><strong>实现步骤：</strong></p><ol><li><p>引入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>分析自动配置类源码：MailSenderAutoConfiguration</p><p>源码配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">prefix = &quot;spring.mail&quot;</span><br><span class="hljs-meta">)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_CHARSET;<br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> Integer port;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;smtp&quot;</span>;<br>    <span class="hljs-keyword">private</span> Charset defaultEncoding;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; properties;<br>    <span class="hljs-keyword">private</span> String jndiName;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.mail.username</span>=<span class="hljs-string">27462009111@qq.com</span><br><span class="hljs-comment"># 授权码</span><br><span class="hljs-attr">spring.mail.password</span>=<span class="hljs-string">yhkrgtqwbnrcbhcj</span><br><span class="hljs-attr">spring.mail.host</span>=<span class="hljs-string">smtp.qq.com</span><br><span class="hljs-comment"># 开启加密验证，qq需要配置ssl</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></li><li><p>测试类中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>JavaMailSenderImpl mailSender;<br><br><span class="hljs-comment">//邮件设置1：一个简单的邮件</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>    message.setSubject(<span class="hljs-string">&quot;UPC-放寒假通知&quot;</span>);<br>    message.setText(<span class="hljs-string">&quot;UPC于2022.01.18开始放寒假！&quot;</span>);<br>    <br>    message.setTo(<span class="hljs-string">&quot;321962327@qq.com&quot;</span>);<br>    message.setFrom(<span class="hljs-string">&quot;2746200911@qq.com&quot;</span>);<br>    mailSender.send(message);<br>&#125;<br><br><span class="hljs-comment">//邮件设置2：一个复杂的邮件</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException &#123;<br>    <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">mimeMessage</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>    <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(mimeMessage, <span class="hljs-literal">true</span>);<br>    <br>    helper.setSubject(<span class="hljs-string">&quot;UPC-放寒假通知&quot;</span>);<br>    helper.setText(<span class="hljs-string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;UPC于2022.01.18开始放寒假！&lt;/b&gt;&quot;</span>,<span class="hljs-literal">true</span>);<br>    <br>    <span class="hljs-comment">//发送附件</span><br>    helper.addAttachment(<span class="hljs-string">&quot;https://img.yiqiangshiyia.cn/blog/yiqiangshiyia.jpg&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;&quot;</span>));<br>    helper.addAttachment(<span class="hljs-string">&quot;https://img.yiqiangshiyia.cn/blog/yiqiangshiyia.jpg&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;&quot;</span>));<br>    <br>    helper.setTo(<span class="hljs-string">&quot;321962327@qq.com&quot;</span>);<br>    helper.setFrom(<span class="hljs-string">&quot;2746200911@qq.com&quot;</span>);<br>    <br>    mailSender.send(mimeMessage);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="9-定时任务"><a href="#9-定时任务" class="headerlink" title="9. 定时任务"></a>9. 定时任务</h1><h2 id="9-1-cron表达式"><a href="#9-1-cron表达式" class="headerlink" title="9.1 cron表达式"></a>9.1 cron表达式</h2><p><strong>Cron表达式生成器：<a href="https://www.bejson.com/othertools/cron/">https://www.bejson.com/othertools/cron/</a></strong></p><p>cron表达式：</p><blockquote><p>计划任务，是任务在约定的时间执行已经计划好的工作，这是表面的意思。在Linux中，我们经常用到 cron 服务器来完成这项工作。cron服务器可以根据配置文件约定的时间来执行特定的任务。</p></blockquote><p>crontab文件的格式：M H D m d cmd.（倒着看便于理解）</p><p>M: 分钟（0-59）。</p><p>H：小时（0-23）。</p><p>D：天（1-31）。</p><p>m: 月（1-12）。</p><p>d: 一星期内的天（0~7，0,7为星期天，6为星期六）。</p><p>cmd: 要执行的命令。</p><p>这个格式的前一部分是对时间的设定，后面一部分是要执行的命令，如果要执行的命令太多，可以把这些命令写到一个脚本里面，然后在这里直接调用这个脚本就可以了，调用的时候记得写出命令的完整路径。时间的设定我们有一定的约定，前面五个*号代表五个数字，数字的取值范围和含义如下：</p><p>分钟　（0-59）</p><p>小时　（0-23）</p><p>日期　（1-31）</p><p>月份　（1-12）</p><p>星期　（0-7）// 0和7均代表星期天</p><p>除了数字还有几个个特殊的符号就是”<em>“、”/“和”-“、”,”，</em>代表所有的取值范围内的数字，”/“代表每的意思,”*/5”表示每5个单位，”-“代表从某个数字到某个数字,”,”分开几个离散的数字。</p><h2 id="9-2-定时任务"><a href="#9-2-定时任务" class="headerlink" title="9.2 定时任务"></a>9.2 定时任务</h2><p>项目开发中经常需要执行一些定时任务，Spring提供了异步执行任务调度的方式。</p><p>Spring提供了两个接口： </p><ul><li>TaskExecutor接口 —- 任务执行</li><li>TaskScheduler接口 —- 任务调度</li></ul><p>两个注解：</p><ul><li>@EnableScheduling  —-  开启定时功能的注解</li><li>@Scheduled  —- 表示什么时候执行</li></ul><blockquote><p><strong>实现定时任务：</strong></p></blockquote><ol><li><p>创建一个ScheduledService</p><p>定时执行一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledService</span> &#123;<br>    <span class="hljs-comment">//在一个特定的时间执行这个方法</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello被执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在主程序上增加@EnableScheduling 开启定时任务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span> <span class="hljs-comment">//开启异步注解功能</span><br><span class="hljs-meta">@EnableScheduling</span> <span class="hljs-comment">//开启基于注解的定时任务</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootTaskApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    SpringApplication.run(SpringbootTaskApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>WebJars</tag>
      
      <tag>Thymeleaf</tag>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot入门及原理</title>
    <link href="/2022/10/01/SpringBoot%E5%85%A5%E9%97%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>/2022/10/01/SpringBoot%E5%85%A5%E9%97%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1. SpringBoot简介"></a>1. SpringBoot简介</h1><h2 id="1-1-Spring回顾"><a href="#1-1-Spring回顾" class="headerlink" title="1.1 Spring回顾"></a>1.1 Spring回顾</h2><blockquote><p><strong>回顾：什么是Spring</strong></p></blockquote><p> Spring 框架是一个开放源代码的 J2EE 应用程序框架，由 Rod Johnson 发起，是针对 bean 的生命周期进行管理的轻量级容器。</p><p>Spring 框架是由于软件开发的复杂性而创建的。为了解决企业级应用开发的复杂性、简化开发。</p><blockquote><p><strong>Spring是如何简化Java开发的</strong></p></blockquote><p>为了降低 Java 开发的复杂性，Spring采用了以下4种关键策略： </p><ol><li>基于POJO的轻量级和最小侵入性编程，所有东西都是bean</li><li>通过IOC，依赖注入（DI）和面向接口实现松耦合</li><li>基于切面（AOP）和惯例进行声明式编程</li><li>通过切面和模版减少样式代码，RedisTemplate，xxxTemplate</li></ol><h2 id="1-2-SpringBoot概述"><a href="#1-2-SpringBoot概述" class="headerlink" title="1.2 SpringBoot概述"></a>1.2 SpringBoot概述</h2><p><strong>什么是SpringBoot</strong></p><blockquote><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。</p></blockquote><p><strong>特点：</strong></p><blockquote><p>SpringBoot基于Spring4.0设计，不仅继承了Spring框架原有的优秀特性，而且还通过简化配置来进一步简化了Spring应用的整个搭建和开发过程。另外SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。</p><p>SpringBoot所具备的特征有：</p><ol><li>可以创建独立的Spring应用程序，并且基于其Maven或Gradle插件，可以创建可执行的JARs和WARs</li><li>内嵌Tomcat或Jetty等Servlet容器</li><li>提供自动配置的“starter”项目对象模型（POMS）以简化Maven配置</li><li>尽可能自动配置Spring容器</li><li>提供准备好的特性，如指标、健康检查和外部化配置</li><li>绝对没有代码生成，不需要XML配置</li></ol></blockquote><p><strong>重要策略：</strong></p><blockquote><p>SpringBoot框架中还有两个非常重要的策略：开箱即用和约定优于配置。</p></blockquote><blockquote><p><strong>开箱即用</strong>，Outofbox，是指在开发过程中，通过在MAVEN项目的pom文件中添加相关依赖包，然后使用对应注解来代替繁琐的XML配置文件以管理对象的生命周期。这个特点使得开发人员摆脱了复杂的配置工作以及依赖的管理工作，更加专注于业务逻辑。</p></blockquote><blockquote><p><strong>约定优于配置</strong>，Convention over configuration，是一种由SpringBoot本身来配置目标结构，由开发者在结构中添加信息的软件设计范式。这一特点虽降低了部分灵活性，增加了BUG定位的复杂性，但减少了开发人员需要做出决定的数量，同时减少了大量的XML配置，并且可以将代码编译、测试和打包等工作自动化。</p></blockquote><h2 id="1-3-微服务架构"><a href="#1-3-微服务架构" class="headerlink" title="1.3 微服务架构"></a>1.3 微服务架构</h2><p><strong>微服务</strong></p><blockquote><p>种软件开发技术- 面向服务的体系结构（SOA）架构样式的一种变体，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据上下文，选择合适的语言、工具对其进行构建。</p></blockquote><p><strong>单体应用架构</strong></p><blockquote><p>将所有的业务场景的表示层，业务逻辑层和数据访问层打包放在一个工程中，最终经过编译打包，部署在一台服务器上。例如：典型的<a href="https://so.csdn.net/so/search?q=J2EE&spm=1001.2101.3001.7020">J2EE</a>工程，把jsp,业务逻辑层的service,controller和数据访问层的dao,打包成wa包，部署在Tomcat或者Jetty或者其他容器上运行。</p></blockquote><p>优点：</p><ul><li>部署简单 ：由于是完整的结构体，可以直接部署在一份服务器上即可</li><li>技术单一 ：项目不需要复杂的技术栈，往往一套熟悉的技术栈就可以完成开发</li><li>用人成本低 ：单个程序员可以完成业务接口道数据库的整个流程</li></ul><p>缺点：</p><ul><li>业务越来越复杂，单体架构扩展性不足，业务扩展带来的代价越来越大；</li><li>用户越来越多，程序承受的并发越爱越高，单体应用的并发能力有限；</li><li>单体应用的业务都在同一个程序中，增删改业务修改，也会影响其他代码，给测试增加了难度</li></ul><p><strong>微服务架构</strong></p><p>all in one 的架构方式，我们把所有的功能单元放在一个应用里面。然后我们把整个应用部署到服务器上。如果负载能力不行，我们将整个应用进行水平复制，进行扩展，然后再负载均衡。</p><p>微服务架构：打破之前的all in one 的架构方式，把每个功能单元独立出来。把独立出来的功能元素动态组合，需要的功能元素才拿来组合，需要多一些元素可以整合多个功能元素。所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。</p><p>优点：</p><ul><li>节省调用资源</li><li>每个功能元素的服务都是一个可替代的、可独立升级的软件代码。</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.png" alt="微服务架构"></p><p><strong>相关论文：</strong></p><ul><li><p>微服务架构(Microservices) —Martin Flower：<a href="https://www.cnblogs.com/feng-zhi/p/14727169.html">https://www.cnblogs.com/feng-zhi/p/14727169.html</a></p></li><li><p>全英版原论文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p></li></ul><h1 id="2-第一个SpringBoot程序"><a href="#2-第一个SpringBoot程序" class="headerlink" title="2. 第一个SpringBoot程序"></a>2. 第一个SpringBoot程序</h1><blockquote><p><strong>方式1：官网下载jar包，IEDA导入（不推荐）</strong></p></blockquote><p><strong>官网：<a href="https://start.spring.io/">https://start.spring.io/</a></strong></p><p>注意导入Spring Web依赖</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221001172400.png" alt="QQ截图20221001172400"></p><p>……</p><blockquote><p><strong>方式2：IDEA创建（社区版IDEA插件收费，呜呜呜~😭，免费试用一个月）</strong></p></blockquote><ol><li><p><strong>新建项目</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221001171432.png" alt="QQ截图20221001171432"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221001171452.png" alt="QQ截图20221001171452"></p><p>项目创建成功！！！</p><p>一个空的 SpringBoot 项目</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221001173222.png" alt="QQ截图20221001173222"></p></li><li><p><strong>项目结构分析</strong></p><p>项目创建完成后，会自动生成以下文件：</p><ul><li>程序的主程序类</li><li>一个 application.properties 配置文件</li><li>一个测试类</li></ul><p>生成的 DemoApplication 和测试包下的 DemoApplicationTests 类都可以直接运行来启动当前创建的项目，由于该项目未配任何数据访问或 Web 模块，程序会在加载完 Spring 之后结束运行。</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221001180846.png" alt="QQ截图20221001180846"></p></li><li><p><strong>pom.xml 分析</strong></p><p>SpringBoot项目依赖：pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--有一个父项目--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.study<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web依赖：集成了tomcat，替代了dispatcherServlet,xml配置...--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--单元测试，等价于junit--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--打jar包插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主要部分：</p><ul><li>项目元数据信息：项目时候输入的Project Metadata部分，也就是Maven项目的基本元素，包括：groupId、artifactId、version、name、description</li><li>parent：继承 spring-boot-starter-parent 的依赖管理，控制版本与打包等内容。</li><li>dependencies：项目具体依赖，包含了 spring-boot-starter-web 用于实现 HTTP 接口（该依赖中包含了 Spring MVC）。官网描述：使用 Spring MVC 构建 Web （包括RestFul）应用程序的入门者，使用 Tomcat 作为默认嵌入式容器。spring-boot-starter-test：用于编写单元测试的依赖包。</li><li>build：构建配置部分，默认使用 spring-boot-maven-plugin ，配合 spring-boot-starter-parent 就可以把SpringBoot项目打包成 jar 包直接运行。</li></ul></li><li><p><strong>编写HTTP接口</strong></p><ul><li><p>同级目录建包：新建一个 controller 包</p></li><li><p>在包中编写  Controller 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.helloworld.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//调用业务，接收前端参数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,SpringBoot!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>浏览器访问</p><p>测试结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221001175708.png" alt="QQ截图20221001175708"></p></li></ul></li><li><p><strong>将SpringBoot打成jar包</strong></p><p>将 SpringBoot 打成jar包就可以在任何地方运行</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20221001183314.png" alt="QQ截图20221001183314"></p><p>运行jar包</p><p>…….</p></li></ol><h1 id="3-运行原理"><a href="#3-运行原理" class="headerlink" title="3. 运行原理"></a>3. 运行原理</h1><p><strong>SpringBoot 自动装配原理 —- SpringBoot启动原理</strong></p><h2 id="3-1-pom-xml"><a href="#3-1-pom-xml" class="headerlink" title="3.1 pom.xml"></a>3.1 pom.xml</h2><blockquote><p><strong>父依赖</strong></p></blockquote><p>主要是依赖一个父项目，主要是管理项目的资源过滤及插件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点进去，发现还有一个父依赖</p><ul><li>spring-boot-dependencies：核心依赖在父工程中，SpringBoot的版本控制中心</li><li>我们在写或者引入SpringBoot依赖时不需要指定版本，就是因为有这些版本仓库</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>启动器</strong></p></blockquote> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>springboot-boot-starter-xxx：spring-boot的场景启动器</p></li><li><p>如spring-boot-starter-web：自动导入web环境所有的依赖</p></li><li><p>SpringBoot将所有的功能场景都抽取出来，变成一个个的启动器，只需要在项目中引入这些 starter即可，所有相关的依赖都会导入进来。</p></li><li><p>要用什么功能就导入什么样的场景启动器即可</p></li></ul><h2 id="3-2-主启动类"><a href="#3-2-主启动类" class="headerlink" title="3.2 主启动类"></a>3.2 主启动类</h2><blockquote><p><strong>默认的主启动类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//本身就是Spring的一个组件</span><br><span class="hljs-comment">//程序的主入口</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(HelloWorldApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>@SpringBootApplication</strong></p></blockquote><p>作用：标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用。</p><p>进入@SpringBootApplication注解：可以看到上面还有很多其他注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">    excludeFilters = &#123;@Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="hljs-meta">), @Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="hljs-meta">)&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br><span class="hljs-comment">// ......</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>@ComponentScan</strong></p></blockquote><p>这个注解在Spring中很重要，它对应XML配置中的元素。</p><p>作用：自动扫描并加载符合条件的组件或者bean，将这个bean定义加载到IOC容器中 </p><blockquote><p><strong>@SpringBootConfiguration</strong></p></blockquote><p>作用：SpringBoot的配置类，标注在某个类上，表示这是一个SpringBoot的配置类</p><p>进入@SpringBootConfiguration注解查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 点进去得到下面的 @Component</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;&#125;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Configuration &#123;&#125;<br></code></pre></td></tr></table></figure><p>@Configuration：说明这是一个配置类，配置类就是对应Spring的xml 配置文件</p><p>@Component：说明启动类本身也是Spring中的一个组件，负责启动应用。</p><blockquote><p><strong>@EnableAutoConfiguration</strong> </p></blockquote><p>@EnableAutoConfiguration：开启自动配置功能</p><p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置，@EnableAutoConfiguration 告诉SpringBoot开启自动配置功能，这样自动配置才能生效。</p><p>@AutoConfigurationPackage：自动配置包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;Registrar.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>@import：Spring底层注解@import，给容器中导入一个组件</p><p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器</p><p>@Import({AutoConfigurationImportSelector.class}) ：给容器导入组件</p><p>AutoConfigurationImportSelector：自动配置导入选择器</p><ol><li><p>这个类中有一个这样的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得候选的配置</span><br><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata</span><br><span class="hljs-params">metadata, AnnotationAttributes attributes)</span> &#123;<br><span class="hljs-comment">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span><br><span class="hljs-comment">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span><br>List&lt;String&gt; configurations =<br>SpringFactoriesLoader.loadFactoryNames(<span class="hljs-built_in">this</span>.getSpringFactoriesLoaderFactoryCl<br><span class="hljs-title function_">ass</span><span class="hljs-params">()</span>, <span class="hljs-built_in">this</span>.getBeanClassLoader());<br>Assert.notEmpty(configurations, <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);<br><span class="hljs-keyword">return</span> configurations;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这个方法又调用了 SpringFactoriesLoader 类的静态方法，进入SpringFactoriesLoader类 loadFactoryNames() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryClass, <span class="hljs-meta">@Nullable</span></span><br><span class="hljs-params">ClassLoader classLoader)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">factoryClassName</span> <span class="hljs-operator">=</span> factoryClass.getName();<br><span class="hljs-comment">//这里它又调用了 loadSpringFactories 方法</span><br><span class="hljs-keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName,<br>Collections.emptyList());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>继续点击查看 loadSpringFactories 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">loadSpringFactories</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br><span class="hljs-comment">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span><br>MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);<br><span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> result;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//去获取一个资源 &quot;META-INF/spring.factories&quot;</span><br>Enumeration&lt;URL&gt; urls = classLoader != <span class="hljs-literal">null</span> ? classLoader.getResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>);<br><span class="hljs-type">LinkedMultiValueMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>();<br><br>            <span class="hljs-comment">//将读取到的资源遍历，封装成为一个Properties</span><br><span class="hljs-keyword">while</span>(urls.hasMoreElements()) &#123;<br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> (URL)urls.nextElement();<br><span class="hljs-type">UrlResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlResource</span>(url);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> PropertiesLoaderUtils.loadProperties(resource);<br><span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> properties.entrySet().iterator();<br><span class="hljs-keyword">while</span>(var6.hasNext()) &#123;<br>Entry&lt;?, ?&gt; entry = (Entry)var6.next();<br><span class="hljs-type">String</span> <span class="hljs-variable">factoryClassName</span> <span class="hljs-operator">=</span> ((String)entry.getKey()).trim();<br>String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());<br><span class="hljs-type">int</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> var9.length;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var11 &lt; var10; ++var11) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">factoryName</span> <span class="hljs-operator">=</span> var9[var11];<br>                        result.add(factoryClassName, factoryName.trim());<br>&#125;<br>&#125;<br>&#125;<br>            cache.put(classLoader, result);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var13) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发现一个多次出现的文件：spring.factories，全局搜索它</p></li></ol><blockquote><p><strong>spring.factories</strong></p></blockquote><p>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在。</p><p>结论：自动配置真正实现是从 classpath 中搜寻所有的 META-INF/spring.factories 配置文件，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration 的JavaConfig形式的IOC容器配置类，然后将这些都汇总成为一个实例并加载到IOC容器中。</p><blockquote><p><strong>结论：</strong></p></blockquote><ol><li>SpringBoot在启动的时候从类路径下的 META-INF/spring.factories 中获取 EnableAutoConfiguration 指定的值。</li><li>将这些值作为自动配置类导入容器，自动配置类就生效，帮我们进行自动配置工作。</li><li>整个J2EE的整体解决方案和自动配置都在 springboot-autoconfigure 的 jar 包中。</li><li>它会给容器中导入非常多的自动配置类（xxxAutoConfiguration），就是给容器中导入这个场景需要的所有组件，并配置好这些组件。</li><li>有了自动配置类，免去了手动编写配置注入功能组件等的工作。</li></ol><h2 id="3-3-SpringApplication"><a href="#3-3-SpringApplication" class="headerlink" title="3.3 SpringApplication"></a>3.3 SpringApplication</h2><blockquote><p><strong>不简单的方法</strong></p></blockquote><p>SpringApplication开启了一个服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringApplication.run 分析，分析该方法主要分两部分：一部分是SpringApplication的实例化，二是run方法的执行</p><blockquote><p><strong>SpringApplication</strong></p></blockquote><p>这个类主要做了以下四件事情：</p><ol><li>推断应用的类型是普通的项目还是Web项目</li><li>查找并加载所有可用初始化器，设置到initializers属性中</li><li>找出所有的应用程序监听器，设置到listeners属性中</li><li>推断并设置main方法的定义类，找到运行的主类</li></ol><p>查看构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class... primarySources)</span> &#123;<br><span class="hljs-comment">// ......</span><br><span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br><span class="hljs-built_in">this</span>.setInitializers(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances();<br><span class="hljs-built_in">this</span>.setListeners(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationListener.class));<br><span class="hljs-built_in">this</span>.mainApplicationClass = <span class="hljs-built_in">this</span>.deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> <strong>run方法</strong></p></blockquote><p><img src="https://img.yiqiangshiyia.cn/blog/IMG_20221004_163853.png" alt="IMG_20221004_163853"></p><h1 id="4-yaml语法"><a href="#4-yaml语法" class="headerlink" title="4. yaml语法"></a>4. yaml语法</h1><h2 id="4-1-配置文件"><a href="#4-1-配置文件" class="headerlink" title="4.1 配置文件"></a>4.1 配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名称是固定的</p><ul><li>application.properties<ul><li>语法结构：key=value</li></ul></li><li>application.yml <ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p>配置文件的作用：修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了。</p><h2 id="4-2-yaml概述"><a href="#4-2-yaml概述" class="headerlink" title="4.2 yaml概述"></a>4.2 yaml概述</h2><blockquote><p>YAML是”YAML Ain’t a Markup Language”（YAML不是一种<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink">标记语言</a>）的<a href="https://baike.baidu.com/item/%E9%80%92%E5%BD%92%E7%BC%A9%E5%86%99?fromModule=lemma_inlink">递归缩写</a>。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink">标记语言</a>），但为了强调这种语言以数据做为中心，而不是以标记语言为重点，而用反向缩略语重命名。</p></blockquote><ul><li><p>yaml 格式可以保存键值对、对象、数组…  properties 格式只能保存键值对</p></li><li><p>以前配置文件大多数使用 xml 配置，对比 yaml 和 xml</p><p>传统xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8081<span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yaml配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server：</span><br><span class="hljs-attr">prot:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="4-3-yml基础语法"><a href="#4-3-yml基础语法" class="headerlink" title="4.3 yml基础语法"></a>4.3 yml基础语法</h2><p>yaml 格式对空格的要求非常高</p><ol><li>空格不能省略</li><li>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</li><li>属性和值的大小写都是十分敏感的。</li></ol><blockquote><p><strong>普通 key-value</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>对象</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">林慕椿</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">林慕椿</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>数组</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">animal:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br></code></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">animal:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]<br></code></pre></td></tr></table></figure><h1 id="5-注入配置文件"><a href="#5-注入配置文件" class="headerlink" title="5. 注入配置文件"></a>5. 注入配置文件</h1><h2 id="5-1-yaml注入配置文件"><a href="#5-1-yaml注入配置文件" class="headerlink" title="5.1 yaml注入配置文件"></a>5.1 yaml注入配置文件</h2><p>yaml文件更强大的地方在于可以给实体类直接注入匹配值</p><blockquote><p><strong>原注入配置文件方法</strong></p></blockquote><ol><li><p>在springboot项目中的 resources 目录下新建一个文件 application.yml</p></li><li><p>编写一个实体类 Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 @Value 注解给bean注入属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.helloworld.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;汪汪&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;3&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在SpringBoot的测试类下注入Dog后测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span>  <span class="hljs-comment">//自动装配</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(dog);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>Dog{name=’汪汪’, age=3}</p></blockquote><p>结果成功输出，@Value注入成功，这是原来的注入方法</p></li></ol><blockquote><p><strong>yaml注入配置文件</strong></p></blockquote><ol><li><p>编写一个复杂一点的实体类：Person 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.helloworld.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用yaml配置的方式进行注入</p><p>编写一个yaml配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">林慕椿</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">yes</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2002</span><span class="hljs-string">/02/02</span><br>  <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;<br>  <span class="hljs-attr">lists:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">study</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">汪汪</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>将yaml配置文件注入到类中</p><p>**@ConfigurationProperties(prefix = “person”)**作用：将配置文件中配置的每一个属性的值，映射到这个组件中，告诉SpringBoot将本类中的所有属性和配置文件中相关配置进行绑定。</p><p>参数 prefix = “person” ：将配置文件中的person下面的所有属性一一对应</p><p>只有这个组件是容器中的组件，才能使用容器提供的@ConfigurationProperties功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.helloworld.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试类中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span>  <span class="hljs-comment">//自动装配</span><br>    <span class="hljs-keyword">private</span> Person person;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(person);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>Person{name=’林慕椿’, age=18, happy=true, birth=Sat Feb 02 00:00:00 CST 2002, maps={k1=v1, k2=v2}, lists=[music, code, study], dog=Dog{name=’汪汪’, age=3}}</p></blockquote></li></ol><blockquote><p><strong>yaml配置文件占位符</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">linmuchun$&#123;random.uuid&#125;</span> <span class="hljs-comment"># 随机uuid</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-string">$&#123;random.int&#125;</span> <span class="hljs-comment"># 随机int</span><br>    <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">birth:</span> <span class="hljs-number">2002</span><span class="hljs-string">/02/02</span><br>    <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;<br>    <span class="hljs-attr">lists:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">girl</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-attr">dog:</span><br>      <span class="hljs-comment"># 引用person.hello 的值，如果不存在就用 ：后面的值，即 other，然后拼接上_旺财</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;person.hello:other&#125;_旺财</span><br>      <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="5-2-properties注入配置文件"><a href="#5-2-properties注入配置文件" class="headerlink" title="5.2 properties注入配置文件"></a>5.2 properties注入配置文件</h2><blockquote><p><strong>加载指定配置文件</strong></p></blockquote><p><strong>@PropertySource</strong>：加载指定的配置文件</p><p><strong>@ConfigurationProperties</strong>：默认从全局配置文件中获取值</p><ol><li><p>在resources目录下新建一个person.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">林慕椿</span><br></code></pre></td></tr></table></figure></li><li><p>在代码中指定加载person.properties文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br>......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次输出测试一下：指定配置文件绑定成功</p></li></ol><blockquote><p><strong>properties注入配置文件</strong></p></blockquote><p>yaml方法都是最简单的方式，开发中最常用的，也是springboot所推荐的。</p><p>其他实现方式：配置文件除了yml还有properties</p><p><strong>测试步骤：</strong></p><ol><li><p>新建一个实体类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编辑配置文件 user.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user1.name</span>=<span class="hljs-string">kuangshen</span><br><span class="hljs-attr">user1.age</span>=<span class="hljs-string">18</span><br><span class="hljs-attr">user1.sex</span>=<span class="hljs-string">男</span><br></code></pre></td></tr></table></figure></li><li><p>在User类上使用@Value来进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//直接使用@value</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span> <span class="hljs-comment">//从配置文件中取值</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;#&#123;9*2&#125;&quot;)</span> <span class="hljs-comment">// #&#123;SPEL&#125; Spring表达式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Value(&quot;男&quot;)</span> <span class="hljs-comment">// 字面量</span><br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpringBoot测试</p></li></ol><blockquote><p><strong>对比</strong></p></blockquote><p>功能对比图：</p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><ol><li>@ConfigurationProperties只需要写一次即可，@Value则需要每个字段都添加</li><li>松散绑定：yml配置文件中写的last-name和lastName是一样的，- 后面跟着的字母默认是大写的。</li><li>JSR303数据校验，这个就是可以在字段是增加一层过滤器验证，可以保证数据的合法性</li><li>复杂类型封装，yml中可以封装对象，使用value就不支持</li></ol><p>结论： </p><ul><li>配置yml和配置properties都可以获取到值（建议yaml）</li></ul><ul><li>如果在某个业务中，只需要获取配置文件中的某个值，可以使用 @value</li></ul><ul><li>如果专门编写了一个JavaBean来和配置文件进行一一映射，就直接使用@ConfigurationProperties</li></ul><h2 id="5-3-JSR303数据校验"><a href="#5-3-JSR303数据校验" class="headerlink" title="5.3 JSR303数据校验"></a>5.3 JSR303数据校验</h2><p>SpringBoot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。</p><p>例：添加注解让 name 只能支持 Email 格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-meta">@Validated</span> <span class="hljs-comment">//数据校验</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="hljs-comment">//name必须是邮箱格式</span><br><span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>运行结果 ： default message [不是一个合法的电子邮件地址]</p></blockquote><p>使用数据校验，可以保证数据的正确性，下面列出一些常见的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="hljs-keyword">private</span> String userName;<br><span class="hljs-meta">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-meta">@Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs less">空检查<br><span class="hljs-variable">@Null</span> 验证对象是否为null<br><span class="hljs-variable">@NotNull</span> 验证对象是否不为null, 无法查检长度为<span class="hljs-number">0</span>的字符串<br><span class="hljs-variable">@NotBlank</span> 检查约束字符串是不是Null还有被Trim的长度是否大于<span class="hljs-number">0</span>,只对字符串,且会去掉前后空格<br><span class="hljs-variable">@NotEmpty</span> 检查约束元素是否为NULL或者是EMPTY<br><br>Booelan检查<br><span class="hljs-variable">@AssertTrue</span> 验证 Boolean 对象是否为 true<br><span class="hljs-variable">@AssertFalse</span> 验证 Boolean 对象是否为 false<br><br>长度检查<br><span class="hljs-variable">@Size</span>(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内<br><span class="hljs-variable">@Length</span>(min=, max=) string is between min and max included<br><br>日期检查<br><span class="hljs-variable">@Past</span> 验证 Date 和 Calendar 对象是否在当前时间之前<br><span class="hljs-variable">@Future</span> 验证 Date 和 Calendar 对象是否在当前时间之后<br><span class="hljs-variable">@Pattern</span> 验证 String 对象是否符合正则表达式的规则<br><br>......<br>除此以外，还可以自定义一些数据校验规则<br></code></pre></td></tr></table></figure><h1 id="6-多环境切换"><a href="#6-多环境切换" class="headerlink" title="6. 多环境切换"></a>6. 多环境切换</h1><h2 id="6-1-多环境切换"><a href="#6-1-多环境切换" class="headerlink" title="6.1 多环境切换"></a>6.1 多环境切换</h2><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境。</p><blockquote><p><strong>方式1：多配置文件</strong></p></blockquote><p>在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本。</p><p>例如：</p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置 </p><p>但是Springboot并不会直接启动这些配置文件，它默认使用application.properties主配置文件。</p><p>需要通过一个配置来选择需要激活的环境： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#比如在配置文件中指定使用dev环境</span><br><span class="hljs-comment">#springboot的多环境配置，可以选择激活哪一个配置</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>方法2：yml的多文档块</strong> </p></blockquote><p>yml和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-comment">#选择要激活那个环境块</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><br>    <br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#配置环境的名称</span><br>  <br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span> <span class="hljs-comment">#配置环境的名称</span><br></code></pre></td></tr></table></figure><p>Note：如果yml和properties同时都配置了端口，并且没有激活其他环境，默认会使用properties配置文件。</p><h2 id="6-2-配置文件加载位置"><a href="#6-2-配置文件加载位置" class="headerlink" title="6.2 配置文件加载位置"></a>6.2 配置文件加载位置</h2><p>外部加载配置文件的方式很多，我们选择最常用的即可，在开发的资源文件中进行配置。</p><p>官方外部配置文件说明参考文档：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-external-config-command-line-args">Spring Boot Reference Documentation</a></p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">优先级<span class="hljs-number">1</span>：项目路径下的config文件夹配置文件<br>优先级<span class="hljs-number">2</span>：项目路径下配置文件<br>优先级<span class="hljs-number">3</span>：资源路径下的config文件夹配置文件<br>优先级<span class="hljs-number">4</span>：资源路径下配置文件<br></code></pre></td></tr></table></figure><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置。</p><p>SpringBoot会从这四个位置全部加载主配置文件，互补配置。</p><p>在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置项目的访问路径</span><br><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/lin</span><br></code></pre></td></tr></table></figure><p>扩展：指定位置加载配置文件</p><p>还可以通过spring.config.location来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置，相同配置，外部指定的配置文件优先级最高。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar spring-boot-config.jar --<br>spring.config.location=F:/application.properties<br></code></pre></td></tr></table></figure><h1 id="7-自动装配原理"><a href="#7-自动装配原理" class="headerlink" title="7. 自动装配原理"></a>7. 自动装配原理</h1><blockquote><p><strong>配置文件到底能写什么</strong></p></blockquote><p>SpringBoot官方文档：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#common-application-properties">Spring Boot Reference Documentation</a></p><blockquote><p><strong>分析自动配置原理</strong></p></blockquote><p>以HttpEncodingAutoConfiguration（Http编码自动配置）为例解释自动配置原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件</span><br><span class="hljs-meta">@Configuration</span><br><br><span class="hljs-comment">//启动指定类的ConfigurationProperties功能</span><br><span class="hljs-comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来</span><br><span class="hljs-comment">//并把HttpProperties加入到IOC容器中</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span><br><br><span class="hljs-comment">//Spring底层@Conditional注解</span><br><span class="hljs-comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span><br><span class="hljs-comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span><br><span class="hljs-meta">@ConditionalOnWebApplication(</span><br><span class="hljs-meta">type = Type.SERVLET</span><br><span class="hljs-meta">)</span><br><br><span class="hljs-comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span><br><br><span class="hljs-comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span><br><span class="hljs-comment">//如果不存在，判断也是成立的</span><br><span class="hljs-comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的</span><br><span class="hljs-meta">@ConditionalOnProperty(</span><br><span class="hljs-meta">prefix = &quot;spring.http.encoding&quot;,</span><br><span class="hljs-meta">value = &#123;&quot;enabled&quot;&#125;,</span><br><span class="hljs-meta">matchIfMissing = true</span><br><span class="hljs-meta">)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpEncodingAutoConfiguration</span> &#123;<br><span class="hljs-comment">//他已经和SpringBoot的配置文件映射了</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Encoding properties;<br><span class="hljs-comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpEncodingAutoConfiguration</span><span class="hljs-params">(HttpProperties properties)</span> &#123;<br><span class="hljs-built_in">this</span>.properties = properties.getEncoding();<br>&#125;<br><br>    <span class="hljs-comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">//判断容器没有这个组件？</span><br><span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title function_">characterEncodingFilter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedCharacterEncodingFilter</span>();<br>filter.setEncoding(<span class="hljs-built_in">this</span>.properties.getCharset().name());<br>        filter.setForceRequestEncoding(<span class="hljs-built_in">this</span>.properties.shouldForce(org.springframew<br>ork.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));<br>filter.setForceResponseEncoding(<span class="hljs-built_in">this</span>.properties.shouldForce(org.springframe work.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));<br><span class="hljs-keyword">return</span> filter;<br>&#125;<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>根据当前不同的条件判断，决定这个配置类是否生效</p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件。</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的。</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着。</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从配置文件中获取指定的值和bean的属性进行绑定</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpProperties</span> &#123;<br><span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>精髓</strong></p></blockquote><ol><li>SpringBoot启动会加载大量的自动配置类</li><li>看需要的功能有没有在SpringBoot默认写好的自动配置类当中</li><li>看这个自动配置类中到底配置了哪些组件（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</li><li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中 指定这些属性的值即可。</li></ol><p> xxxxAutoConfigurartion：自动配置类，给容器中添加组件</p><p>xxxxProperties：封装配置文件中相关属性</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大前端进阶</title>
    <link href="/2022/09/18/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    <url>/2022/09/18/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<p><strong>Node.js 中文网：<a href="http://nodejs.cn/">http://nodejs.cn/</a></strong></p><h1 id="1-Nodejs"><a href="#1-Nodejs" class="headerlink" title="1. Nodejs"></a>1. Nodejs</h1><h2 id="1-1-Nodejs介绍与安装"><a href="#1-1-Nodejs介绍与安装" class="headerlink" title="1.1 Nodejs介绍与安装"></a>1.1 Nodejs介绍与安装</h2><p><strong>Node.js 中文网：<a href="http://nodejs.cn/">http://nodejs.cn/</a></strong></p><p><strong>介绍：</strong></p><ol><li>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。  发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</li><li>简单的说 Node.js 就是运行在服务端的 JavaScript。 Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。底层架构是：javascript. 文件后缀：.js</li><li>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</li></ol><p><img src="https://img.yiqiangshiyia.cn/blog/nodejs-01.png" alt="nodejs-01"></p><p><strong>安装：</strong></p><p><strong>下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220918111557.png" alt="QQ截图20220918111557"></p><p>安装默认安装即可，安装完成之后，查看是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br></code></pre></td></tr></table></figure><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220918105830.png" alt="QQ截图20220918105830"></p><p><strong>小结：</strong></p><p>Nodejs是一门计算机语言，运行在系统中的v8（jvm）引擎中。文件后缀是 js 运行的命令是：node</p><h2 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h2><h3 id="1-2-1-快速入门"><a href="#1-2-1-快速入门" class="headerlink" title="1.2.1 快速入门"></a>1.2.1 快速入门</h3><ol><li><p>创建文件夹Nodejs</p></li><li><p>创建 hello.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>终端运行</p><p>js是解释型语言，不需要去编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node hello.js<br></code></pre></td></tr></table></figure><p>运行结果：Hello World!</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220918114838.png" alt="QQ截图20220918114838"></p></li></ol><p>浏览器的内核包括两部分核心：</p><ul><li>DOM渲染引擎；</li><li>java script 解析器（js引擎）</li><li>js运行在浏览器内核中的js引擎内部</li></ul><p><strong>小结：</strong></p><p>Node.js是脱离浏览器环境运行的JavaScript程序，基于V8 引擎</p><h3 id="1-2-2-Node实现请求响应"><a href="#1-2-2-Node实现请求响应" class="headerlink" title="1.2.2 Node实现请求响应"></a>1.2.2 Node实现请求响应</h3><ol><li><p>创建 httpserver.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入模块是require 就类似于import java.io </span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-comment">// 1: 创建一个httpserver服务</span><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">request,response</span>)&#123;<br>    <span class="hljs-comment">// 浏览器怎么认识hello server!!! </span><br>    response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;Content-type&#x27;</span>:<span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;); <span class="hljs-comment">//这句话的含义是：告诉浏览器将</span><br>    <span class="hljs-comment">// 以text-plain去解析hello server 这段数据。</span><br>    <span class="hljs-comment">// 给浏览器输出内容</span><br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;strong&gt;hello server!!!&lt;/strong&gt;&quot;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;你启动的服务是：http://localhpst:8888以启动成功!!&quot;</span>);<br><span class="hljs-comment">// 2: 监听一端口8888</span><br><span class="hljs-comment">// 3: 启动运行服务 node httpserver.js</span><br><span class="hljs-comment">// 4: 在浏览器访问http://localhost:8888</span><br></code></pre></td></tr></table></figure></li><li><p>运行服务器程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node httpserver.js<br></code></pre></td></tr></table></figure></li><li><p>服务器启动成功后，在浏览器中输入：<a href="http://localhost:8888/">http://localhost:8888/</a> 查看webserver成功运行，并输出html页面</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220918153050.png" alt="QQ截图20220918153050"></p></li><li><p>停止服务：ctrl + c</p></li></ol><h3 id="1-2-3-Node操作数据库"><a href="#1-2-3-Node操作数据库" class="headerlink" title="1.2.3 Node操作数据库"></a>1.2.3 Node操作数据库</h3><p><strong>参考文档：<a href="https://www.npmjs.com/package/mysql">https://www.npmjs.com/package/mysql</a></strong></p><ol><li><p>安装mysql依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install mysql<br></code></pre></td></tr></table></figure><p>安装成功后项目目录下会出现一个 node_modules 文件夹。类似于 maven 中导入的 Java 库。</p></li><li><p>定义db.js进行操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1: 导入mysql依赖包,  mysql属于第三方的模块就类似于 java.sql一样的道理</span><br><span class="hljs-keyword">var</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><span class="hljs-comment">// 1: 创建一个mysql的Connection对象</span><br><span class="hljs-comment">// 2: 配置数据连接的信息 </span><br><span class="hljs-keyword">var</span> connection = mysql.<span class="hljs-title function_">createConnection</span>(&#123;<br>    <span class="hljs-attr">host</span>:<span class="hljs-string">&quot;192.168.119.1&quot;</span>,<br>    <span class="hljs-attr">port</span>:<span class="hljs-number">3306</span>,<br>    <span class="hljs-attr">user</span>:<span class="hljs-string">&quot;root&quot;</span>,<br>    <span class="hljs-attr">password</span>:<span class="hljs-string">&quot;123456&quot;</span>,<br>    <span class="hljs-attr">database</span>:<span class="hljs-string">&quot;mysql_test&quot;</span><br>&#125;);<br><span class="hljs-comment">// 3：开辟连接</span><br>connection.<span class="hljs-title function_">connect</span>();<br><span class="hljs-comment">// 4: 执行curd</span><br>connection.<span class="hljs-title function_">query</span>(<span class="hljs-string">&quot;select * from user&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">error,results,fields</span>)&#123;<br>    <span class="hljs-comment">// 如果查询出错，直接抛出</span><br>    <span class="hljs-keyword">if</span>(error) <span class="hljs-keyword">throw</span> error;<br>    <span class="hljs-comment">// 查询成功</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;results = &quot;</span>,results);<br>&#125;);<br><span class="hljs-comment">// 5: 关闭连接</span><br>connection.<span class="hljs-title function_">end</span>();<br><span class="hljs-comment">// 最后一步：运行node db.js 查看效果</span><br></code></pre></td></tr></table></figure></li><li><p>新建数据库：mysql_test  表：user</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220918155458.png" alt="QQ截图20220918155458"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET NAMES utf8mb4;<br>SET FOREIGN_KEY_CHECKS = 0;<br>DROP TABLE IF EXISTS `user`;<br>CREATE TABLE `user`  (<br>  `username` varchar(11) NOT NULL,<br>  `password` varchar(255) NOT NULL,<br>  PRIMARY KEY (`username`) USING BTREE<br>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;<br>INSERT INTO `user` VALUES (&#x27;林慕椿&#x27;, &#x27;123456&#x27;);<br>INSERT INTO `user` VALUES (&#x27;林南芊&#x27;, &#x27;123456&#x27;);<br>SET FOREIGN_KEY_CHECKS = 1;<br></code></pre></td></tr></table></figure></li><li><p>运行db.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node db.js<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>如果想开发更复杂的基于Node.js的应用程序后台，需要进一步学习Node.js的Web开发相关框架 express，art-template、koa等</p></blockquote><h1 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h1><h2 id="2-1-ES6概述"><a href="#2-1-ES6概述" class="headerlink" title="2.1 ES6概述"></a>2.1 ES6概述</h2><blockquote><p><strong>ECMAScript</strong>是一种由<a href="https://baike.baidu.com/item/Ecma%E5%9B%BD%E9%99%85?fromModule=lemma_inlink">Ecma国际</a>（前身为<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%B4%B2%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%B6%E9%80%A0%E5%95%86%E5%8D%8F%E4%BC%9A/2052072?fromModule=lemma_inlink">欧洲计算机制造商协会</a>，European Computer Manufacturers Association）通过ECMA-262标准化的脚本<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink">程序设计语言</a>。这种语言在<a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91?fromModule=lemma_inlink">万维网</a>上应用广泛，它往往被称为<a href="https://baike.baidu.com/item/JavaScript?fromModule=lemma_inlink">JavaScript</a>或<a href="https://baike.baidu.com/item/JScript?fromModule=lemma_inlink">JScript</a>，所以它可以理解为是JavaScript的一个标准,但实际上后两者是ECMA-262标准的实现和扩展。</p></blockquote><p>ES6: 是JavaScript语言的下一代标准，2015年6月正式发布。它的目标，是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><p>编程语言JavaScript是ECMAScript的实现和扩展 。ECMAScript是由ECMA（一个类似W3C的标准组织）参与进行标准化的语法规范。ECMAScript定义了：</p><p>[语言语法] – 语法解析规则、关键字、语句、声明、运算符等。</p><p>[类型]– 布尔型、数字、字符串、对象等。</p><p>[原型和继承]</p><p>[标准库] – [JSON]、[Math]、[数组方法]、[对象自省方法]等。</p><p>ECMAScript标准不定义HTML或CSS的相关功能，也不定义类似DOM（文档对象模型）的[Web API]，这些都在独立的标准中进行定义。ECMAScript涵盖了各种环境中JS的使用场景，无论是浏览器环境还是类似[node.js]的非浏览器环境。</p><p><strong>ECMAScript的快速发展：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/es6-001.png" alt="es6-001"></p><h2 id="2-2-ES6语法：let和const命令"><a href="#2-2-ES6语法：let和const命令" class="headerlink" title="2.2 ES6语法：let和const命令"></a>2.2 ES6语法：let和const命令</h2><table><thead><tr><th>区别</th><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>是否有块级作用域</td><td>×</td><td>✔️</td><td>✔️</td></tr><tr><td>是否存在变量提升</td><td>✔️</td><td>×</td><td>×</td></tr><tr><td>是否添加全局属性</td><td>✔️</td><td>×</td><td>×</td></tr><tr><td>能否重复声明变量</td><td>✔️</td><td>×</td><td>×</td></tr><tr><td>是否存在暂时性死区</td><td>×</td><td>✔️</td><td>✔️</td></tr><tr><td>是否必须设置初始值</td><td>×</td><td>×</td><td>✔️</td></tr><tr><td>能否改变指针指向</td><td>✔️</td><td>✔️</td><td>×</td></tr></tbody></table><h2 id="2-3-ES6语法：模板字符串"><a href="#2-3-ES6语法：模板字符串" class="headerlink" title="2.3 ES6语法：模板字符串"></a>2.3 ES6语法：模板字符串</h2><blockquote><p>以前： 我们都是使用 ‘’ 或者 “” 来把字符串套起来</p><p>ES6： ``</p></blockquote><p>在 ES6 我们通过 `` 来做多行字符串或者字符串一行行拼接。基本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定。</p><blockquote><p><strong>example</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板字符串<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> username = <span class="hljs-string">&quot;张三&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> age = <span class="hljs-number">30</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 1: 原始的做法就是去拼接字符串</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;我名字叫 &quot;</span> + username+<span class="hljs-string">&quot;,年龄是: &quot;</span>+age;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);  </span><br><span class="language-javascript">        <span class="hljs-comment">// 2: ES6模板字符串</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> str2 = <span class="hljs-string">`我名字叫 <span class="hljs-subst">$&#123;username&#125;</span>,年龄是: <span class="hljs-subst">$&#123;age&#125;</span>`</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-ES6语法：函数默认参数与箭头函数"><a href="#2-4-ES6语法：函数默认参数与箭头函数" class="headerlink" title="2.4 ES6语法：函数默认参数与箭头函数"></a>2.4 ES6语法：函数默认参数与箭头函数</h2><blockquote><p><strong>函数默认参数</strong></p></blockquote><p>在方法的参数后面加上一个默认值即可。</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 默认参数 给参数列表设定初始值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a =<span class="hljs-number">100</span>,b=<span class="hljs-number">100</span></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b);    </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 执行方法，会用默认值填充，打印出来100,200</span></span><br><span class="language-javascript">        <span class="hljs-title function_">add</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">// 覆盖默认值打印  结果是1，2      </span></span><br><span class="language-javascript">        <span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>箭头函数</strong></p></blockquote><p>箭头函数简化函数的定义，可以让我们不用使用function关键字。</p><p>箭头函数特点：</p><ol><li>不需要function关键字来创建函数</li><li>省略return关键字</li><li>继承当前上下文的 this 关键字</li></ol><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>箭头函数<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 无参数的函数</span></span><br><span class="language-javascript">        <span class="hljs-comment">//var sum = function()&#123;&#125;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params"></span>)=&gt;&#123;&#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 有一个参数</span></span><br><span class="language-javascript">        <span class="hljs-comment">//var sum2 = function(a)&#123;&#125;;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> <span class="hljs-title function_">sum2</span> = (<span class="hljs-params">a</span>)=&gt;&#123;&#125;;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> <span class="hljs-title function_">sum2</span> = a=&gt;&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> a;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 有二个参数的以上,记住括号一定要加</span></span><br><span class="language-javascript">        <span class="hljs-comment">//var sum3 = function(a,b)&#123;return a + b;&#125;;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> <span class="hljs-title function_">sum3</span> = (<span class="hljs-params">a,b</span>)=&gt;&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> a + b;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 如果没有逻辑体，只有返回值可以简化如下</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> <span class="hljs-title function_">sum4</span> = (<span class="hljs-params">a,b</span>)=&gt;a+b</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum2</span>(<span class="hljs-number">100</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum3</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum4</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-ES6语法：对象初始化简写"><a href="#2-5-ES6语法：对象初始化简写" class="headerlink" title="2.5 ES6语法：对象初始化简写"></a>2.5 ES6语法：对象初始化简写</h2><p><strong>对象简写：</strong></p><ol><li>因为对象是按照 key:value 显示定义的，如果 key 和变量的名字一致，可以只定义一次即可。</li><li>如果一个对象中的 key 和 value 的名字一样的情况下可以定义成一个。</li><li>如果 value 是一个函数，可以把 function 去掉，只剩下 () 即可。</li></ol><p><strong>代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>对象简写<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">name, age</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//return &#123;name:name,age:age&#125;;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 对象简写</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123; name, age &#125;;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-comment">// 调用和执行</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> json = <span class="hljs-title function_">person</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>, <span class="hljs-number">20</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json.<span class="hljs-property">name</span>, json.<span class="hljs-property">age</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//&lt;button onclick=&quot;login()&quot;&gt;登录&lt;/button&gt;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">// 发送ajax</span></span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">// 对象简写</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123; username, password &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 原始写分</span></span><br><span class="language-javascript">            <span class="hljs-comment">//data:&#123;username:username,password:password&#125;,</span></span><br><span class="language-javascript">            <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-6-ES6的语法：对象解构"><a href="#2-6-ES6的语法：对象解构" class="headerlink" title="2.6 ES6的语法：对象解构"></a>2.6 ES6的语法：对象解构</h2><p><strong>对象解构：</strong>ES6 提供一些获取快捷获取对象属性和行为方式。</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>对象解构<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> person = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;linmuchun&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>:<span class="hljs-number">32</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">language</span>:<span class="hljs-string">&quot;cn&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;年龄是：&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);</span><br><span class="language-javascript">            &#125; </span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取对象的属性和行为</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 方法1：通过.的方式</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> name = person.<span class="hljs-property">name</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> age = person.<span class="hljs-property">age</span>;</span><br><span class="language-javascript">        person.<span class="hljs-title function_">say</span>();</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 方法2：通过[]的方式</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> name = person[<span class="hljs-string">&quot;name&quot;</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> age = person[<span class="hljs-string">&quot;age&quot;</span>];</span><br><span class="language-javascript">        person[<span class="hljs-string">&quot;say&quot;</span>]();</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 方法2：对象解构</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> &#123;name,age&#125; = person;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,age);</span><br><span class="language-javascript">        <span class="hljs-comment">// 可以用冒号取小名</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> &#123;name,age,<span class="hljs-attr">language</span>:lan&#125; = person;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,age,lan);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-7-ES6的语法：传播操作符"><a href="#2-7-ES6的语法：传播操作符" class="headerlink" title="2.7 ES6的语法：传播操作符"></a>2.7 ES6的语法：传播操作符</h2><p><strong>对象传播操作符：</strong>…</p><p>作用：把一个对象的属性传播到另外一个对象中。</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>传播操作符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 对象传播</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> person = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;林慕椿&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;山东青岛&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">school</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我在UPC上学！&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">//解构出来</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> &#123;name,age,...person2&#125; = person;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220919192108.png" alt="QQ截图20220919192108"></p><h1 id="3-NPM包管理器"><a href="#3-NPM包管理器" class="headerlink" title="3. NPM包管理器"></a>3. NPM包管理器</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><p><strong>npm 官方网站：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220919200201.png" alt="QQ截图20220919200201"></p><blockquote><p><strong>Nodejs软件包管理工具</strong></p><p>NPM的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。 类似于 Maven。</p><p>2020年3月17日，Github宣布收购npm，GitHub现在已经保证npm将永远免费。</p></blockquote><p><strong>作用：</strong></p><ol><li>快速构建 nodejs 工程。</li><li>快速安装依赖和第三方模块，比如 npm install mysql redis 等等。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在命令提示符输入 npm -v 可查看当前npm版本</span><br>npm -v<br></code></pre></td></tr></table></figure><h2 id="3-2-使用npm管理项目"><a href="#3-2-使用npm管理项目" class="headerlink" title="3.2 使用npm管理项目"></a>3.2 使用npm管理项目</h2><ol><li><p>创建文件夹NPM</p></li><li><p>项目初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init  #项目初始化命令<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果想直接生成 package.json 文件，那么可以使用命令</span><br>npm init -y<br></code></pre></td></tr></table></figure><p>初始化：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220919194729.png" alt="QQ截图20220919194729"></p></li><li><p>初始化完成</p><p>项目初始化完成之后会在项目目录下生成一个 package.json 的文件，类似于 maven 中的 pom.xml 文件作用管理依赖。</p><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我是一个nodejs项目&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一腔诗意啊&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>解释：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//项目名称</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//项目版本号</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我是一个nodejs项目&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//项目描述</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//入口js</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-comment">//运行脚本</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一腔诗意啊&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//开发者</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span>  <span class="hljs-comment">//授权协议</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="3-3-Npm包管理器安装模块"><a href="#3-3-Npm包管理器安装模块" class="headerlink" title="3.3 Npm包管理器安装模块"></a>3.3 Npm包管理器安装模块</h2><p><strong>npm install</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用 npm install 安装依赖包的最新版，</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">模块安装的位置：项目目录\node_modules</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装会自动在项目目录下添加 package-lock.json文件，这个文件帮助锁定安装包的版本</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时package.json 文件中，依赖包会被添加到dependencies节点下，类似maven中的 &lt;dependencies&gt;</span><br>npm install jquery<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果安装时想指定特定的版本</span><br>npm install jquery@2.1.x<br><span class="hljs-meta prompt_">#</span><span class="language-bash">devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用 -D参数将依赖添加到devDependencies节点</span><br>npm install --save-dev eslint<br><span class="hljs-meta prompt_">#</span><span class="language-bash">或</span><br>npm install -D eslint<br><span class="hljs-meta prompt_">#</span><span class="language-bash">全局安装</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Node.js全局安装的npm包和工具的位置：用户目录\AppData\Roaming\npm\node_modules</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">一些命令行工具常使用全局安装的方式</span><br>npm install -g webpack<br><span class="hljs-meta prompt_">#</span><span class="language-bash">npm管理的项目在备份和传输的时候一般不携带node_modules文件夹</span><br>npm install #根据package.json中的配置下载依赖，初始化项目<br></code></pre></td></tr></table></figure><p><strong>其他命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">更新包（更新到最新版本）</span><br>npm update 包名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">全局更新</span><br>npm update -g 包名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">卸载包</span><br>npm uninstall 包名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">全局卸载</span><br>npm uninstall -g 包名<br></code></pre></td></tr></table></figure><p><strong>Npm下载下来的模块如何使用？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;redis&quot;</span>);<br></code></pre></td></tr></table></figure><p>参考官网：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220919201050.png" alt="QQ截图20220919201050"></p><h2 id="3-4-修改npm镜像"><a href="#3-4-修改npm镜像" class="headerlink" title="3.4 修改npm镜像"></a>3.4 修改npm镜像</h2><ol><li><p>修改npm镜像</p><blockquote><p>NPM官方的管理的包都是从 <a href="http://npmjs.com下载的,但是这个网站在国内速度很慢./">http://npmjs.com下载的，但是这个网站在国内速度很慢。</a></p><p>这里推荐使用淘宝 NPM 镜像 <a href="http://npm.taobao.org/">http://npm.taobao.org/</a></p><p>淘宝 NPM 镜像是一个完整 npmjs.com 镜像，同步频率目前为 10分钟一次，以保证尽量与官方服务同步。</p></blockquote></li><li><p>设置镜像地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</span><br>npm config set registry https://registry.npm.taobao.org <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看npm配置信息</span><br>npm config list<br></code></pre></td></tr></table></figure></li></ol><h1 id="4-Babel"><a href="#4-Babel" class="headerlink" title="4. Babel"></a>4. Babel</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h2><ul><li><p>ES6的某些高级语法在浏览器环境甚至是Node.js环境中无法执行。</p></li><li><p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行执行。</p></li><li><p>这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p></li></ul><h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h2><p>安装命令行转码工具</p><p>Babel提供babel-cli工具，用于命令行转码。它的安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g babel-cli<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看是否安装成功</span><br>babel --version<br></code></pre></td></tr></table></figure><h2 id="4-3-Babel的使用"><a href="#4-3-Babel的使用" class="headerlink" title="4.3 Babel的使用"></a>4.3 Babel的使用</h2><ol><li><p>创建babel文件夹</p></li><li><p>初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init -y<br></code></pre></td></tr></table></figure></li><li><p>创建文件 src/example.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 转码前</span><br><span class="hljs-comment">// 定义数据</span><br><span class="hljs-keyword">let</span> input = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment">// 将数组的每个元素 +1</span><br>input = input.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item + <span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(input)<br></code></pre></td></tr></table></figure></li><li><p>配置 .babelrc</p><p>Babel的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，基本格式如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [],<br>    <span class="hljs-string">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>presets字段设定转码规则，将es2015规则加入 .babelrc：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>],<br>    <span class="hljs-string">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>安装转码器，在项目中安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save-dev babel-preset-es2015<br></code></pre></td></tr></table></figure></li><li><p>转码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm install --save-dev csv-loader xml-loader</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">转码结果写入一个文件</span><br>mkdir dist1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">--out-file 或 -o 参数指定输出文件</span><br>babel src/example.js --out-file dist1/compiled.js<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>babel src/example.js -o dist1/compiled.js<br><span class="hljs-meta prompt_"># </span><span class="language-bash">整个目录转码</span><br>mkdir dist2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">--out-dir 或 -d 参数指定输出目录</span><br>babel src --out-dir dist2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>babel src -d dist2<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-4-自定义脚本"><a href="#4-4-自定义脚本" class="headerlink" title="4.4 自定义脚本"></a>4.4 自定义脚本</h2><ol><li><p>改写package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-string">&quot;babel src\\example.js -o dist\\compiled.js&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>转码的时候，执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir dist<br>npm run build<br></code></pre></td></tr></table></figure></li></ol><h1 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5. 模块化"></a>5. 模块化</h1><h2 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h2><p><strong>模块化产生的背景</strong></p><p>随着网站逐渐变成”互联网应用程序”，嵌入网页的Javascript代码越来越庞大，越来越复杂。</p><p>Javascript模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。但是，Javascript不是一种模块化编程语言，它不支持”类”（class），包（package）等概念，也不支持”模块”（module）。</p><p><strong>模块化规范</strong></p><ul><li>CommonJS模块化规范</li><li>ES6模块化规范</li></ul><h2 id="5-2-CommonJS规范"><a href="#5-2-CommonJS规范" class="headerlink" title="5.2 CommonJS规范"></a>5.2 CommonJS规范</h2><p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p><p><strong>CommonJS使用 exports 和require 来导出、导入模块。</strong></p><ol><li><p>创建“module”文件夹</p></li><li><p>创建 mokuai-common-js/四则运算.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义成员：</span><br><span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-keyword">const</span> subtract = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a - b<br>&#125;<br><span class="hljs-keyword">const</span> multiply = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a * b<br>&#125;<br><span class="hljs-keyword">const</span> divide = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a / b<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>导出模块中的成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导出成员：</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">sum</span>: sum,<br>    <span class="hljs-attr">subtract</span>: subtract,<br>    <span class="hljs-attr">multiply</span>: multiply,<br>    <span class="hljs-attr">divide</span>: divide<br>&#125;<br></code></pre></td></tr></table></figure><p>简写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//简写</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    sum,<br>    subtract,<br>    multiply,<br>    divide<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 mokuai-common-js/引入模块.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入模块，注意：当前路径必须写 ./</span><br><span class="hljs-keyword">const</span> m = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./四则运算.js&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m)<br><span class="hljs-keyword">const</span> r1 = m.<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">const</span> r2 = m.<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1,r2)<br></code></pre></td></tr></table></figure></li><li><p>运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node 引入模块.js<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-3-ES6模块化规范"><a href="#5-3-ES6模块化规范" class="headerlink" title="5.3 ES6模块化规范"></a>5.3 ES6模块化规范</h2><p><strong>ES6使用 export 和 import 来导出、导入模块。</strong></p><ol><li><p>创建 mokuai-es6 文件夹</p></li><li><p>创建 src/userApi.js 文件，导出模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取数据列表&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">save</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;保存数据&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 src/userComponent.js文件，导入模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//只取需要的方法即可，多个方法用逗号分隔</span><br><span class="hljs-keyword">import</span> &#123; getList, save &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./userApi.js&#x27;</span><br><span class="hljs-title function_">getList</span>()<br><span class="hljs-title function_">save</span>()<br></code></pre></td></tr></table></figure><p>注意：这时的程序无法运行的，因为ES6的模块化无法在Node.js中执行，需要用Babel编辑成ES5后再执行。</p></li><li><p>初始化项目</p><p>把项目变成一个 nodejs 项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init -y<br></code></pre></td></tr></table></figure></li><li><p>配置 .babelrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs .babelrc">&#123;<br>    &quot;presets&quot;: [&quot;es2015&quot;],<br>    &quot;plugins&quot;: []<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>安装转码器，在项目中安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save-dev babel-preset-es2015<br></code></pre></td></tr></table></figure></li><li><p>定义运行脚本，package.json中增加”build”</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel src -d dist&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>执行命令转码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run build<br></code></pre></td></tr></table></figure></li><li><p>运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node dist/userComponent.js<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-4-ES6模块化写法2"><a href="#5-4-ES6模块化写法2" class="headerlink" title="5.4 ES6模块化写法2"></a>5.4 ES6模块化写法2</h2><ol><li><p>创建 src/userApi2.js ，导出模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取数据列表2&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-title function_">save</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;保存数据2&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 src/userComponent2.js，导入模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./userApi2.js&quot;</span><br>user.<span class="hljs-title function_">getList</span>()<br>user.<span class="hljs-title function_">save</span>()<br></code></pre></td></tr></table></figure></li><li><p>执行命令转码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run build<br></code></pre></td></tr></table></figure></li><li><p>运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node dist/userComponent2.js<br></code></pre></td></tr></table></figure></li></ol><h1 id="6-Webpack"><a href="#6-Webpack" class="headerlink" title="6. Webpack"></a>6. Webpack</h1><p><strong>webpack官方文档：<a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></strong></p><h2 id="6-1-什么是Webpack"><a href="#6-1-什么是Webpack" class="headerlink" title="6.1 什么是Webpack"></a>6.1 什么是Webpack</h2><p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p>从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。</p><p><img src="https://img.yiqiangshiyia.cn/blog/webpack001.png" alt="webpack001"></p><h2 id="6-2-Webpack安装"><a href="#6-2-Webpack安装" class="headerlink" title="6.2 Webpack安装"></a>6.2 Webpack安装</h2><ol><li><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g webpack webpack-cli<br></code></pre></td></tr></table></figure></li><li><p>安装后查看版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">webpack -v<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-3-初始化项目"><a href="#6-3-初始化项目" class="headerlink" title="6.3 初始化项目"></a>6.3 初始化项目</h2><ol><li><p>创建webpack文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init -y<br></code></pre></td></tr></table></figure></li><li><p>创建src文件夹</p></li><li><p>src下创建common.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">exports.info = function (str) &#123;<br>    document.write(str);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>src下创建utils.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">exports.add = function (a, b) &#123;<br>    return a + b;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>src下创建main.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">const common = require(&#x27;./common&#x27;);<br>const utils = require(&#x27;./utils&#x27;);<br>common.info(&#x27;Hello world!&#x27; + utils.add(100, 200));<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-4-JS打包"><a href="#6-4-JS打包" class="headerlink" title="6.4 JS打包"></a>6.4 JS打包</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220920102637.png" alt="QQ截图20220920102637"></p><p><strong>打包步骤：</strong></p><ol><li><p>webpack目录下创建配置文件webpack.config.js</p><p>读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入path模块 Node.js内置模块</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-comment">//定义打包规则</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>, <span class="hljs-comment">//配置入口文件</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-comment">//定义输出指定的目录__dirname当前项目根目录，产生一个dist文件夹</span><br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>), <span class="hljs-comment">//输出路径，__dirname：当前文件所在路径</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span> <span class="hljs-comment">//输出文件</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>命令行执行编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">webpack<br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行后查看bundle.js 里面包含了上面两个js文件的内容并进行了代码压缩</span><br></code></pre></td></tr></table></figure></li><li><p>webpack目录下创建index.html ， 引用bundle.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>浏览器中查看index.html</p></li></ol><h2 id="6-5-CSS打包"><a href="#6-5-CSS打包" class="headerlink" title="6.5 CSS打包"></a>6.5 CSS打包</h2><ol><li><p>安装style-loader和 css-loader</p><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p><p>Loader 可以理解为是模块和资源的转换器。</p><p>首先我们需要安装相关Loader插件：</p><ul><li>css-loader 是将 css 装载到 javascript</li><li>style-loader 是让 javascript 认识css</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save-dev style-loader css-loader<br></code></pre></td></tr></table></figure></li><li><p>修改webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入path模块 Node.js内置模块</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-comment">//...,</span><br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-comment">//其他配置</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [  <br>            &#123;  <br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,    <span class="hljs-comment">//打包规则应用到以css结尾的文件上</span><br>                <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;  <br>        ]  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在src文件夹创建style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background</span>:pink;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改main.js，在第一行引入style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">require(&#x27;./style<span class="hljs-selector-class">.css</span>&#x27;);<br></code></pre></td></tr></table></figure></li><li><p>运行编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run dev<br></code></pre></td></tr></table></figure></li><li><p>浏览器中查看index.html ， 看看背景是不是变成粉色</p></li></ol><h1 id="7-Vue-element-admin"><a href="#7-Vue-element-admin" class="headerlink" title="7. Vue-element-admin"></a>7. Vue-element-admin</h1><p><strong>官网地址：<a href="https://panjiachen.github.io/vue-element-admin-site/zh/">https://panjiachen.github.io/vue-element-admin-site/zh/</a></strong></p><p><strong>项目Github开源地址：<a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a></strong></p><blockquote><p><a href="http://panjiachen.github.io/vue-element-admin">vue-element-admin</a> 是一个后台前端解决方案，它基于 <a href="https://github.com/vuejs/vue">vue</a> 和 <a href="https://github.com/ElemeFE/element">element-ui</a>实现。它使用了最新的前端技术栈，内置了 i18 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。相信不管你的需求是什么，本项目都能帮助到你。</p></blockquote><p><strong>运行工程和编译工程：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆项目</span><br>git clone https://github.com/PanJiaChen/vue-element-admin.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入项目目录</span><br>cd vue-element-admin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>npm install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地开发 启动项目</span><br>npm run dev<br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><p>启动完成后会自动打开浏览器访问 <a href="http://localhost:9527/">http://localhost:9527</a></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220920200845.png" alt="QQ截图20220920200845"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220920200856.png" alt="QQ截图20220920200856"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220920201307.png" alt="QQ截图20220920201307"></p><p><strong>小结：</strong></p><p>nodejs 项目几要素</p><ul><li>package.json（npm init / npmt init -y）</li><li>node_modules（npm install -g jquery / npm iinstall jquery）</li><li>运行是使用：查看官网提供 几乎所有的nodejs都启动和打包都是如下：<ul><li>npm run dev（开发运行）</li><li>npm run build（打包）</li></ul></li></ul><h1 id="8-package-json"><a href="#8-package-json" class="headerlink" title="8. package.json"></a>8. package.json</h1><ol><li>在发布项目或者拷贝项目的时候，node_moudles 其实是没意义的。因为它仅仅在开发和打包的时候使用</li><li>如果托管代码其实没必要，为什么。因为你package.json文件中已经记录了这些模块坐标。我们可以直接使用npm install 去重新安装和生成 node-modules 。所以的nodejs项目下载以后第一个要执行的命令都是 npm install 的原因也就是如此。</li><li>这也就是为什么官方不提供 node-modules 的原因。因为你可以直接用 npm install 去下载</li></ol>]]></content>
    
    
    <categories>
      
      <category>大前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
      <tag>Es6</tag>
      
      <tag>Npm</tag>
      
      <tag>Bable</tag>
      
      <tag>模块化</tag>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大前端-jQuery</title>
    <link href="/2022/09/17/%E5%A4%A7%E5%89%8D%E7%AB%AF-jQuery/"/>
    <url>/2022/09/17/%E5%A4%A7%E5%89%8D%E7%AB%AF-jQuery/</url>
    
    <content type="html"><![CDATA[<p><strong>jQuery官方网站：<a href="https://jquery.com/">https://jquery.com/</a></strong></p><p><strong>jQuery工具文档：<a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a></strong></p><h2 id="1-什么是jQuery"><a href="#1-什么是jQuery" class="headerlink" title="1. 什么是jQuery"></a>1. 什么是jQuery</h2><blockquote><p>jQuery是一个快速、简洁的<a href="https://baike.baidu.com/item/JavaScript/321142?fromModule=lemma_inlink">JavaScript</a>框架，是继Prototype之后又一个优秀的JavaScript代码库（框架）于2006年1月由[John Resig](<a href="https://baike.baidu.com/item/John">https://baike.baidu.com/item/John</a> Resig/6336344?fromModule=lemma_inlink)发布。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript<a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549?fromModule=lemma_inlink">设计模式</a>，优化<a href="https://baike.baidu.com/item/HTML/97049?fromModule=lemma_inlink">HTML</a>文档操作、事件处理、动画设计和<a href="https://baike.baidu.com/item/Ajax/8425?fromModule=lemma_inlink">Ajax</a>交互。</p><p>jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的<a href="https://baike.baidu.com/item/CSS%E9%80%89%E6%8B%A9%E5%99%A8/2819686?fromModule=lemma_inlink">CSS选择器</a>，并且可对<a href="https://baike.baidu.com/item/CSS/5457?fromModule=lemma_inlink">CSS</a>选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如<a href="https://baike.baidu.com/item/IE/69103?fromModule=lemma_inlink">IE</a> 6.0+、FF 1.5+、<a href="https://baike.baidu.com/item/Safari/597?fromModule=lemma_inlink">Safari</a> 2.0+、Opera 9.0+等。</p></blockquote><blockquote><p><strong>获取jQuery</strong></p></blockquote><p><strong>方式1：官网下载</strong></p><p>jQuery官方网站：<a href="https://jquery.com/">https://jquery.com/</a></p><p>下载界面：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220917224201.png" alt="QQ截图20220917224201"></p><p><strong>方式2：CDN引入</strong></p><p>通过CDN引入jQuery的几种方式：</p><p>百度 CDN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新浪 CDN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>又拍云 CDN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Google CDN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Microsoft CDN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>公式： $(selector).action()</strong></p></blockquote><ul><li><p>美元符号定义 jQuery</p></li><li><p>选择符（selector）”查询”和”查找” HTML 元素</p></li><li><p>jQuery 的 action() 执行对元素的操作</p></li></ul><blockquote><p><strong>使用jQuery</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--方式1：CDN引用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--方式2：本地lib引入--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;script src=&quot;lib/jquery-3.4.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-jquery&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//选择器就是css选择器</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#test-jquery&#x27;</span>).<span class="hljs-title function_">click</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello jQuery!&quot;</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h2><p>为什么jQuery要发明选择器：原生 js 代码操作 DOM 太繁琐，jQuery的选择器就是帮助我们快速定位到一个或多个DOM节点。</p><blockquote><p><strong>jQuery选择器</strong></p></blockquote><p><strong>按ID查找</strong></p><p>如果某个DOM节点有 id 属性，利用jQuery查找如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 查找&lt;div id=&quot;abc&quot;&gt;:</span><br><span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&#x27;#abc&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>按tag查找</strong></p><p>按tag查找只需要写上tag名称就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ps = $(<span class="hljs-string">&#x27;p&#x27;</span>); <span class="hljs-comment">// 返回所有&lt;p&gt;节点</span><br>ps.<span class="hljs-property">length</span>; <span class="hljs-comment">// 数一数页面有多少个&lt;p&gt;节点</span><br></code></pre></td></tr></table></figure><p><strong>按class查找</strong></p><p>按class查找注意在class名称前加一个 . ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = $(<span class="hljs-string">&#x27;.red&#x27;</span>); <span class="hljs-comment">// 所有节点包含`class=&quot;red&quot;`都将返回</span><br><span class="hljs-comment">// 例如:</span><br><span class="hljs-comment">// &lt;div class=&quot;red&quot;&gt;...&lt;/div&gt;</span><br><span class="hljs-comment">// &lt;p class=&quot;green red&quot;&gt;...&lt;/p&gt;</span><br></code></pre></td></tr></table></figure><p><strong>按属性查找</strong></p><p>一个DOM节点除了 id 和 class 外还可以有很多属性，很多时候按属性查找会非常方便，比如在一个表单中按属性来查找：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> email = $(<span class="hljs-string">&#x27;[name=email]&#x27;</span>); <span class="hljs-comment">// 找出&lt;??? name=&quot;email&quot;&gt;</span><br><span class="hljs-keyword">var</span> passwordInput = $(<span class="hljs-string">&#x27;[type=password]&#x27;</span>); <span class="hljs-comment">// 找出&lt;??? type=&quot;password&quot;&gt;</span><br><span class="hljs-keyword">var</span> a = $(<span class="hljs-string">&#x27;[items=&quot;A B&quot;]&#x27;</span>); <span class="hljs-comment">// 找出&lt;??? items=&quot;A B&quot;&gt;</span><br></code></pre></td></tr></table></figure><p>当属性的值包含空格等特殊字符时，需要用双引号括起来。</p><p>按属性查找还可以使用前缀查找或者后缀查找：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> icons = $(<span class="hljs-string">&#x27;[name^=icon]&#x27;</span>); <span class="hljs-comment">// 找出所有name属性值以icon开头的DOM</span><br><span class="hljs-comment">// 例如: name=&quot;icon-1&quot;, name=&quot;icon-2&quot;</span><br><span class="hljs-keyword">var</span> names = $(<span class="hljs-string">&#x27;[name$=with]&#x27;</span>); <span class="hljs-comment">// 找出所有name属性值以with结尾的DOM</span><br><span class="hljs-comment">// 例如: name=&quot;startswith&quot;, name=&quot;endswith&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>example：</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//原生js，选择器少且麻烦不好记</span></span><br><span class="language-javascript">        <span class="hljs-comment">//标签选择器</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">//id选择器</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">//类选择器</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-property">getElementsByClassName</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//jQuery css中的选择器jQuery全部都能使用</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">click</span>()  <span class="hljs-comment">//标签选择器</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#id1&#x27;</span>).<span class="hljs-title function_">click</span>()  <span class="hljs-comment">//id选择器</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;.class1&#x27;</span>).<span class="hljs-title function_">click</span>()  <span class="hljs-comment">//class选择器</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-操作DOM"><a href="#3-操作DOM" class="headerlink" title="3. 操作DOM"></a>3. 操作DOM</h2><blockquote><p><strong>获取 text 和 HTML</strong></p></blockquote><p>jQuery对象的 text() 和 html() 方法分别获取节点的文本和原始HTML文本，例如，如下的HTML结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-ul&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span>Java <span class="hljs-symbol">&amp;amp;</span> JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#test-ul li[name=js]&#x27;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// &#x27;JavaScript&#x27;</span></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#test-ul li[name=book]&#x27;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// &#x27;Java &amp; JavaScript&#x27;</span></span><br><span class="language-javascript">$(<span class="hljs-string">&#x27;#test-ul li[name=book]&#x27;</span>).<span class="hljs-title function_">html</span>(); <span class="hljs-comment">// &#x27;Java &amp;amp; JavaScript&#x27;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>设置文本或HTML</strong></p></blockquote><p>无参数调用 text() 是获取文本，传入参数就变成设置文本，HTML也是类似操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#test-ul li.js&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;span style=&quot;color: red&quot;&gt;JavaScript&lt;/span&gt;&#x27;</span>);<br>$(<span class="hljs-string">&#x27;#test-ul li[name=book]&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;JavaScript &amp; ECMAScript&#x27;</span>);<br><span class="hljs-comment">//一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上</span><br>$(<span class="hljs-string">&#x27;#test-ul li&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;JS&#x27;</span>); <span class="hljs-comment">// 两个节点都变成了JS</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>修改CSS</strong></p></blockquote><p>jQuery对象有“批量操作”的特点，用于修改CSS很方便。要高亮显示动态语言，调用jQuery对象的 css(‘name’, ‘value’) 方法，用一行语句实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lang dy&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lang&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lang dy&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lang&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Swift<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lang dy&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Scheme<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#test-css li.dy&gt;span&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background-color&#x27;</span>, <span class="hljs-string">&#x27;#ffd351&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还有很多操作具体可查看文档……</p><blockquote><p><strong>显示和隐藏DOM</strong></p></blockquote><p>显示和隐藏DOM元素使用非常普遍，jQuery直接提供 show() 和 hide() 方法。</p><p>本质：设置CSS的 display 属性为 none</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">a = $(<span class="hljs-string">&#x27;a[target=_blank]&#x27;</span>).<span class="hljs-property">a</span>.<span class="hljs-title function_">hide</span>();  <span class="hljs-comment">// 隐藏</span><br>a = $(<span class="hljs-string">&#x27;a[target=_blank]&#x27;</span>).<span class="hljs-property">a</span>.<span class="hljs-title function_">show</span>(); <span class="hljs-comment">// 显示</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>获取DOM信息</strong></p></blockquote><p>jQuery对象的方法可以直接获取DOM的高宽等信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浏览器可视窗口大小:</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">width</span>(); <span class="hljs-comment">// 800</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>(); <span class="hljs-comment">// 600</span><br><span class="hljs-comment">// HTML文档大小:</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">width</span>(); <span class="hljs-comment">// 800</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>(); <span class="hljs-comment">// 3500</span><br><span class="hljs-comment">// 某个div的大小:</span><br><span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&#x27;#test-div&#x27;</span>);<br>div.<span class="hljs-title function_">width</span>(); <span class="hljs-comment">// 600</span><br>div.<span class="hljs-title function_">height</span>(); <span class="hljs-comment">// 300</span><br>div.<span class="hljs-title function_">width</span>(<span class="hljs-number">400</span>); <span class="hljs-comment">// 设置CSS属性 width: 400px，是否生效要看CSS是否有效</span><br>div.<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;200px&#x27;</span>); <span class="hljs-comment">// 设置CSS属性 height: 200px，是否生效要看CSS是否有效</span><br></code></pre></td></tr></table></figure><p>jQuery对象 attr() 和 removeAttr() 方法用于操作DOM节点的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;test-div&quot;</span> name=<span class="hljs-string">&quot;Test&quot;</span> start=<span class="hljs-string">&quot;1&quot;</span>&gt;...&lt;/div&gt;<br><span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&#x27;#test-div&#x27;</span>);<br>div.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data&#x27;</span>); <span class="hljs-comment">// undefined, 属性不存在</span><br>div.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;name&#x27;</span>); <span class="hljs-comment">// &#x27;Test&#x27;</span><br>div.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>); <span class="hljs-comment">// div的name属性变为&#x27;Hello&#x27;</span><br>div.<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&#x27;name&#x27;</span>); <span class="hljs-comment">// 删除name属性</span><br>div.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;name&#x27;</span>); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>操作表单</strong></p></blockquote><p>对于表单元素，jQuery对象统一提供 val() 方法获取和设置对应的 value 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    &lt;input id=&quot;test-input&quot; name=&quot;email&quot; value=&quot;&quot;&gt;</span><br><span class="hljs-comment">    &lt;select id=&quot;test-select&quot; name=&quot;city&quot;&gt;</span><br><span class="hljs-comment">        &lt;option value=&quot;BJ&quot; selected&gt;Beijing&lt;/option&gt;</span><br><span class="hljs-comment">        &lt;option value=&quot;SH&quot;&gt;Shanghai&lt;/option&gt;</span><br><span class="hljs-comment">        &lt;option value=&quot;SZ&quot;&gt;Shenzhen&lt;/option&gt;</span><br><span class="hljs-comment">    &lt;/select&gt;</span><br><span class="hljs-comment">    &lt;textarea id=&quot;test-textarea&quot;&gt;Hello&lt;/textarea&gt;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span><br>input = $(<span class="hljs-string">&#x27;#test-input&#x27;</span>),<br>    select = $(<span class="hljs-string">&#x27;#test-select&#x27;</span>),<br>textarea = $(<span class="hljs-string">&#x27;#test-textarea&#x27;</span>);<br>input.<span class="hljs-title function_">val</span>(); <span class="hljs-comment">// &#x27;test&#x27;</span><br>input.<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;abc@example.com&#x27;</span>); <span class="hljs-comment">// 文本框的内容已变为abc@example.com</span><br><br>select.<span class="hljs-title function_">val</span>(); <span class="hljs-comment">// &#x27;BJ&#x27;</span><br>select.<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;SH&#x27;</span>); <span class="hljs-comment">// 选择框已变为Shanghai</span><br><br>textarea.<span class="hljs-title function_">val</span>(); <span class="hljs-comment">// &#x27;Hello&#x27;</span><br>textarea.<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;Hi&#x27;</span>); <span class="hljs-comment">// 文本区域已更新为&#x27;Hi&#x27;</span><br></code></pre></td></tr></table></figure><p>可见，一个 val() 就统一了各种输入框的取值和赋值的问题。</p><blockquote><p><strong>添加DOM</strong></p></blockquote><p>添加新的DOM节点，除了通过jQuery的 html() 这种暴力方法外，还可以用 append() 方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-div&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Swift<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>向列表新增一个语言，首先要拿到 &lt;ul&gt; 节点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ul = $(<span class="hljs-string">&#x27;#test-div&gt;ul&#x27;</span>);<br></code></pre></td></tr></table></figure><p>然后，调用 append() 传入HTML片段，append() 把DOM添加到最后， prepend() 则把DOM添加到最前：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">ul.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>如果要把新节点插入到指定位置，可以先定位到JavaScript，然后用 after() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> js = $(<span class="hljs-string">&#x27;#test-div&gt;ul&gt;li:first-child&#x27;</span>);<br>js.<span class="hljs-title function_">after</span>(<span class="hljs-string">&#x27;&lt;li&gt;&lt;span&gt;Lua&lt;/span&gt;&lt;/li&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p><strong>删除节点</strong></p></blockquote><p>删除DOM节点：拿到jQuery对象后直接调用 remove() 方法。如果jQuery对象包含若干DOM节点，实际上可以一次删除多个DOM节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&#x27;#test-div&gt;ul&gt;li&#x27;</span>);<br>li.<span class="hljs-title function_">remove</span>(); <span class="hljs-comment">// 所有&lt;li&gt;全被删除</span><br></code></pre></td></tr></table></figure><h2 id="4-事件"><a href="#4-事件" class="headerlink" title="4. 事件"></a>4. 事件</h2><p>jQuery能够绑定的事件主要包括：</p><blockquote><p><strong>鼠标事件</strong></p></blockquote><p>click: 鼠标单击时触发</p><p>dblclick：鼠标双击时触发</p><p>mouseenter：鼠标进入时触发</p><p>mouseleave：鼠标移出时触发</p><p>mousemove：鼠标在DOM内部移动时触发</p><p>hover：鼠标进入和退出时触发两个函数</p><blockquote><p><strong>键盘事件</strong></p></blockquote><p>键盘事件仅作用在当前焦点的DOM上 。</p><p>keydown：键盘按下时触发</p><p>keyup：键盘松开时触发</p><p>keypress：按一次键后触发。</p><blockquote><p><strong>其他事件</strong></p></blockquote><p>focus：当DOM获得焦点时触发</p><p>blur：当DOM失去焦点时触发</p><p>change：当 、 或 的内容改变时触发</p><p>submit：当 提交时触发</p><p>ready：当页面被载入并且DOM树完成初始化后触发</p><blockquote><p><strong>test：</strong></p></blockquote><p>获取鼠标当前坐标：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#testMouseMoveDiv</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--获取鼠标当前的一个坐标--&gt;</span><br>mousemove: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testMouseMoveSpan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testMouseMoveDiv&quot;</span>&gt;</span><br>    在此区域移动鼠标试试<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!--由于ready事件常用，此处为省略写法--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!--等价于：$(document).ready(function () &#123;...&#125;--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    $(function () &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        $(&#x27;#testMouseMoveDiv&#x27;).mousemove(function (e) &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        $(&#x27;#testMouseMoveSpan&#x27;).text(&#x27;pageX = &#x27; + e.pageX + &#x27;, pageY = &#x27; + e.pageY);</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220917233013.png" alt="QQ截图20220917233013"></p>]]></content>
    
    
    <categories>
      
      <category>大前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大前端-JavaScript</title>
    <link href="/2022/09/13/%E5%A4%A7%E5%89%8D%E7%AB%AF-JavaScript/"/>
    <url>/2022/09/13/%E5%A4%A7%E5%89%8D%E7%AB%AF-JavaScript/</url>
    
    <content type="html"><![CDATA[<p><strong>JavaScript参考网站：<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">https://www.liaoxuefeng.com/wiki/1022910821149312</a></strong></p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-什么是JavaScript"><a href="#1-1-什么是JavaScript" class="headerlink" title="1.1 什么是JavaScript"></a>1.1 什么是JavaScript</h2><blockquote><ul><li><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/9845131?fromModule=lemma_inlink">编程语言</a>。虽然它是作为开发<a href="https://baike.baidu.com/item/Web/150564?fromModule=lemma_inlink">Web</a>页面的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708?fromModule=lemma_inlink">脚本语言</a>而出名，但是它也被用到了很多非<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911?fromModule=lemma_inlink">浏览器</a>环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089?fromModule=lemma_inlink">面向对象</a>、命令式、声明式、<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0/301912?fromModule=lemma_inlink">函数</a>式编程范式。</p></li><li><p>JavaScript在1995年由<a href="https://baike.baidu.com/item/Netscape/2778944?fromModule=lemma_inlink">Netscape</a>公司的Brendan Eich，在网景导航者浏览器上首次设计实现而成。因为Netscape与<a href="https://baike.baidu.com/item/Sun/69463?fromModule=lemma_inlink">Sun</a>合作，Netscape管理层希望它外观看起来像Java，因此取名为JavaScript。但实际上它的语法风格与Self及<a href="https://baike.baidu.com/item/Scheme/8379129?fromModule=lemma_inlink">Scheme</a>较为接近。</p></li><li><p>JavaScript的标准是[ECMAScript ](<a href="https://baike.baidu.com/item/ECMAScript">https://baike.baidu.com/item/ECMAScript</a> /1889420?fromModule=lemma_inlink)。截至 2012 年，所有浏览器都完整的支持ECMAScript 5.1，旧版本的浏览器至少支持ECMAScript 3 标准。2015年6月17日，ECMA国际组织发布了ECMAScript的第六版，该版本正式名称为 ECMAScript 2015，但通常被称为ECMAScript 6 或者ES2015。</p></li></ul></blockquote><p>JavaScript是一种运行在浏览器中的解释型的编程语言。因为在Web世界里，只有JavaScript能跨平台、跨浏览器驱动网页，与用户交互。</p><p>新兴的Node.js把JavaScript引入到了服务器端，JavaScript已经变成了全能型语言。</p><h2 id="1-2-ECMAScript"><a href="#1-2-ECMAScript" class="headerlink" title="1.2 ECMAScript"></a>1.2 ECMAScript</h2><blockquote><p><strong>ECMAScript</strong>是一种由<a href="https://baike.baidu.com/item/Ecma%E5%9B%BD%E9%99%85?fromModule=lemma_inlink">Ecma国际</a>（前身为<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%B4%B2%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%B6%E9%80%A0%E5%95%86%E5%8D%8F%E4%BC%9A/2052072?fromModule=lemma_inlink">欧洲计算机制造商协会</a>，European Computer Manufacturers Association）通过ECMA-262标准化的脚本<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink">程序设计语言</a>。这种语言在<a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91?fromModule=lemma_inlink">万维网</a>上应用广泛，它往往被称为<a href="https://baike.baidu.com/item/JavaScript?fromModule=lemma_inlink">JavaScript</a>或<a href="https://baike.baidu.com/item/JScript?fromModule=lemma_inlink">JScript</a>，所以它可以理解为是JavaScript的一个标准,但实际上后两者是ECMA-262标准的实现和扩展。</p></blockquote><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h1><h2 id="2-1-引入JavaScript"><a href="#2-1-引入JavaScript" class="headerlink" title="2.1 引入JavaScript"></a>2.1 引入JavaScript</h2><ol><li><p>内部标签</p><p>JavaScript代码可以直接嵌在网页的任何地方，不过通常都把JavaScript代码放到&lt;head&gt;中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--script标签内写JavaScript代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由 &lt;script&gt;&lt;/script&gt; 包含的代码就是JavaScript代码，它将直接被浏览器执行。</p></li><li><p>外部引用</p><p>把JavaScript代码放到一个单独的.js文件，然后在HTML中通过 &lt;script src=”…”&gt;&lt;/script&gt; 引入这个文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--外部引入--&gt;</span><br>    <span class="hljs-comment">&lt;!--主要：script标签必须成对出现--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/hello.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p> &lt;script&gt; 标签的type属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--不用显式定义，也默认是JavaScript--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-基本语法"><a href="#2-2-基本语法" class="headerlink" title="2.2 基本语法"></a>2.2 基本语法</h2><p>……</p><p><strong>浏览器调试：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220914184905.png" alt="QQ截图20220914184905"></p><h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h2><p>在JavaScript中定义了以下几种数据类型：</p><ul><li><p><strong>number</strong></p><p>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">123</span>;  <span class="hljs-comment">// 整数123</span><br><span class="hljs-number">0.456</span>;  <span class="hljs-comment">// 浮点数0.456</span><br><span class="hljs-number">1.2345e3</span>;  <span class="hljs-comment">// 科学计数法表示1.2345x1000，等同于1234.5</span><br>-<span class="hljs-number">99</span>;  <span class="hljs-comment">// 负数</span><br><span class="hljs-title class_">NaN</span>;  <span class="hljs-comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span><br><span class="hljs-title class_">Infinity</span>;  <span class="hljs-comment">// Infinity表示无限大</span><br></code></pre></td></tr></table></figure></li><li><p><strong>字符串</strong></p><p>字符串是以单引号和双引号括起来的任意文本，如：’abc’，”abc”</p></li><li><p><strong>布尔型</strong></p><p>true，false</p></li><li><p><strong>逻辑运算符</strong></p><p>&amp;&amp;    ||    !</p></li><li><p><strong>比较运算符</strong></p><p>=    赋值</p><p>==    等于（类型不一样，值一样，也会判断为true）</p><p>===    绝对等于（类型一样，值一样，才会判断为true）</p><p>由于JavaScript这个设计缺陷，不要使用 == 比较，始终坚持使用 === 比较。</p><p>Note：</p><ul><li><p>NaN 这个特殊的Number与所有其他值都不相等，包括它自己，唯一能判断 NaN 的方法是通过 isNaN() 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span>;  <span class="hljs-comment">// false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">NaN</span>);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>注意浮点数的相等比较：浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span> / <span class="hljs-number">3</span> === (<span class="hljs-number">1</span> - <span class="hljs-number">2</span> / <span class="hljs-number">3</span>);  <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-number">1</span> / <span class="hljs-number">3</span> - (<span class="hljs-number">1</span> - <span class="hljs-number">2</span> / <span class="hljs-number">3</span>)) &lt; <span class="hljs-number">0.0000001</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>null和undefined</strong></p><p>null：表示空的值</p><p>undefined：未定义</p></li><li><p><strong>数组</strong></p><p>Java中数组必须是相同类型的对象，JavaScript中不要求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//保证代码的可读性，尽量使用[]</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>];<br><span class="hljs-keyword">var</span> array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>如果数组越界报错：undefined</p></li><li><p><strong>对象</strong></p><p>JavaScript的对象是一组由键-值组成的无序集合</p><p>对象是大括号，数组是中括号。每个属性之间使用逗号隔开，最后一个不需要添加</p><p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">tags</span>: [<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-string">&#x27;web&#x27;</span>, <span class="hljs-string">&#x27;mobile&#x27;</span>],<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Beijing&#x27;</span>,<br>    <span class="hljs-attr">hasCar</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">zipcode</span>: <span class="hljs-literal">null</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>取对象的值：对象变量.属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">person.<span class="hljs-property">name</span>;  <span class="hljs-comment">// &#x27;Bob&#x27;</span><br>person.<span class="hljs-property">zipcode</span>;  <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure></li><li><p><strong>变量</strong></p><p>变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、 $ 和 _ 的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如 if 、 while 等。申明一个变量用 var 语句，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a; <span class="hljs-comment">// 申明了变量a，此时a的值为undefined</span><br><span class="hljs-keyword">var</span> $b = <span class="hljs-number">1</span>; <span class="hljs-comment">// 申明了变量$b，同时给$b赋值，此时$b的值为1</span><br><span class="hljs-keyword">var</span> s_007 = <span class="hljs-string">&#x27;007&#x27;</span>; <span class="hljs-comment">// s_007是一个字符串</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Answer</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// Answer是一个布尔值true</span><br><span class="hljs-keyword">var</span> t = <span class="hljs-literal">null</span>; <span class="hljs-comment">// t的值是null</span><br></code></pre></td></tr></table></figure><p>在JavaScript中，使用等号 = 对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用 var 申明一次，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>; <span class="hljs-comment">// a的值是整数123</span><br>a = <span class="hljs-string">&#x27;ABC&#x27;</span>; <span class="hljs-comment">// a变为字符串</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-4-严格检查模式"><a href="#2-4-严格检查模式" class="headerlink" title="2.4 严格检查模式"></a>2.4 严格检查模式</h2><p>如果一个变量没有通过 var 申明就被使用，那么该变量就自动被申明为全局变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">strict模式前提：IDEA需要支持ES6语法</span><br><span class="hljs-comment">&#x27;use strict&#x27;：严格检查模式，防止JavaScript随意性产生的一些问题</span><br><span class="hljs-comment">必须写在JavaScript的第一行</span><br><span class="hljs-comment">局部变量都建议用let定义</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">        &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h1><h2 id="3-1-字符串"><a href="#3-1-字符串" class="headerlink" title="3.1 字符串"></a>3.1 字符串</h2><ol><li><p><strong>正常字符串使用单引号或双引号</strong></p></li><li><p>**转义字符 **</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">\<span class="hljs-string">&#x27;</span><br><span class="hljs-string">\n    // 换行</span><br><span class="hljs-string">\t    // Tab换行</span><br><span class="hljs-string">\u4e2d\u6587    // Unicode字符 完全等同于 &#x27;</span>中文<span class="hljs-string">&#x27;</span><br><span class="hljs-string">\x41    //Ascll字符 完全等同于 &#x27;</span>A<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>多行字符串</strong></p><p>由于多行字符串用 \n 写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ``表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">`这是一个</span><br><span class="hljs-string">多行</span><br><span class="hljs-string">字符串`</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>模板字符串</strong></p><p>要把多个字符串连接起来，可以用 + 号连接，如果有很多变量需要连接，用 + 号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;linmuchun&quot;</span>;<br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">var</span> msg = <span class="hljs-string">`&quot;我是&quot;<span class="hljs-subst">$&#123;name&#125;</span>&quot;，我今年&quot;<span class="hljs-subst">$&#123;age&#125;</span>&quot;岁了！&quot;`</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg);<br><span class="hljs-comment">//输出：&quot;我是&quot;linmuchun&quot;，我今年&quot;18&quot;岁了！&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>操作字符串</strong></p><ul><li><p>字符串长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Hello, world!&#x27;</span>;<br>s.<span class="hljs-property">length</span>; <span class="hljs-comment">// 13</span><br></code></pre></td></tr></table></figure></li><li><p>可变性与不可变性</p><p>要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Hello, world!&#x27;</span>;<br><br>s[<span class="hljs-number">0</span>]; <span class="hljs-comment">// &#x27;H&#x27;</span><br>s[<span class="hljs-number">6</span>]; <span class="hljs-comment">// &#x27; &#x27;</span><br>s[<span class="hljs-number">7</span>]; <span class="hljs-comment">// &#x27;w&#x27;</span><br>s[<span class="hljs-number">12</span>]; <span class="hljs-comment">// &#x27;!&#x27;</span><br>s[<span class="hljs-number">13</span>]; <span class="hljs-comment">// undefined 超出范围的索引不会报错，但一律返回undefined</span><br></code></pre></td></tr></table></figure><p>需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Test&#x27;</span>;<br>s[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;X&#x27;</span>;<br><span class="hljs-title function_">alert</span>(s); <span class="hljs-comment">// s仍然为&#x27;Test&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>toUpperCase() 把一个字符串全部变为大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Hello&#x27;</span>;<br>s.<span class="hljs-title function_">toUpperCase</span>(); <span class="hljs-comment">// 返回&#x27;HELLO&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>toLowerCase() 把一个字符串全部变为小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Hello&#x27;</span>;<br><span class="hljs-keyword">var</span> lower = s.<span class="hljs-title function_">toLowerCase</span>(); <span class="hljs-comment">// 返回&#x27;hello&#x27;并赋值给变量lower</span><br>lower; <span class="hljs-comment">// &#x27;hello&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>indexOf() 会搜索指定字符串出现的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;hello, world&#x27;</span>;<br>s.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;world&#x27;</span>); <span class="hljs-comment">// 返回7</span><br>s.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;World&#x27;</span>); <span class="hljs-comment">// 没有找到指定的子串，返回-1</span><br></code></pre></td></tr></table></figure></li><li><p>substring() 返回指定索引区间的子串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;hello, world&#x27;</span><br>s.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 从索引0开始到5（不包括5），返回&#x27;hello&#x27;</span><br>s.<span class="hljs-title function_">substring</span>(<span class="hljs-number">7</span>); <span class="hljs-comment">// 从索引7开始到结束，返回&#x27;world&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-2-数组"><a href="#3-2-数组" class="headerlink" title="3.2 数组"></a>3.2 数组</h2><p>JavaScript的 Array 可以包含任意数据类型，并通过索引来访问每个元素。</p><p>要取得 Array 的长度，直接访问 length 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3.14</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>];<br>arr.<span class="hljs-property">length</span>; <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><p>请注意，直接给 Array 的 length 赋一个新的值会导致 Array 大小的变化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.<span class="hljs-property">length</span>; <span class="hljs-comment">// 3</span><br>arr.<span class="hljs-property">length</span> = <span class="hljs-number">6</span>;<br>arr; <span class="hljs-comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span><br>arr.<span class="hljs-property">length</span> = <span class="hljs-number">2</span>;<br>arr; <span class="hljs-comment">// arr变为[1, 2]</span><br></code></pre></td></tr></table></figure><p>Array 可以通过索引把对应的元素修改为新的值，因此，对 Array 的索引进行赋值会直接修改这个 Array</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>];<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">99</span>;<br>arr; <span class="hljs-comment">// arr现在变为[&#x27;A&#x27;, 99, &#x27;C&#x27;]</span><br></code></pre></td></tr></table></figure><p>注意：如果通过索引赋值时，索引超过了范围，同样会引起 Array 大小的变化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>arr; <span class="hljs-comment">// arr变为[1, 2, 3, undefined, undefined, &#x27;x&#x27;]</span><br></code></pre></td></tr></table></figure><p>大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。但是JavaScript的 Array 却不会有任何错误。在编写代码时，最好不要直接修改 Array 的大小，访问索引时要确保索引不会越界。</p><p><strong>常用方法：</strong></p><ul><li><p><strong>indexOf()</strong></p><p>与String类似，Array 也可以通过 indexOf() 来搜索一个指定的元素的位置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;30&#x27;</span>, <span class="hljs-string">&#x27;xyz&#x27;</span>];<br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 元素10的索引为0</span><br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">// 元素20的索引为1</span><br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">30</span>); <span class="hljs-comment">// 元素30没有找到，返回-1</span><br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;30&#x27;</span>); <span class="hljs-comment">// 元素&#x27;30&#x27;的索引为2</span><br></code></pre></td></tr></table></figure></li><li><p><strong>slice()</strong></p><p>slice() 就是对应String的 substring() ，它截取 Array 的部分元素，然后返回一个新的 Array</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>];<br>arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 从索引0开始，到索引3结束，但不包括索引3: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br>arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// 从索引3开始到结束: [&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span><br></code></pre></td></tr></table></figure><p>如果不给 slice() 传递任何参数，它就会从头到尾截取所有元素。酱紫可以很容易地复制一个 Array ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>];<br><span class="hljs-keyword">var</span> aCopy = arr.<span class="hljs-title function_">slice</span>();<br>aCopy; <span class="hljs-comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span><br>aCopy === arr; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p><strong>push() 和 pop()</strong></p><p>push() 向 Array 的末尾添加若干元素，pop() 则把 Array 的最后一个元素删除掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>); <span class="hljs-comment">// 返回Array新的长度: 4</span><br>arr; <span class="hljs-comment">// [1, 2, &#x27;A&#x27;, &#x27;B&#x27;]</span><br>arr.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// pop()返回&#x27;B&#x27;</span><br>arr; <span class="hljs-comment">// [1, 2, &#x27;A&#x27;]</span><br>arr.<span class="hljs-title function_">pop</span>(); arr.<span class="hljs-title function_">pop</span>(); arr.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 连续pop 3次</span><br>arr; <span class="hljs-comment">// []</span><br>arr.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 空数组继续pop不会报错，而是返回undefined</span><br>arr; <span class="hljs-comment">// []</span><br></code></pre></td></tr></table></figure></li><li><p><strong>unshift() 和 shift()</strong></p><p>unshift() 往 Array 的头部添加若干元素，shift() 把Array 的第一个元素删掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>); <span class="hljs-comment">// 返回Array新的长度: 4</span><br>arr; <span class="hljs-comment">// [&#x27;A&#x27;, &#x27;B&#x27;, 1, 2]</span><br>arr.<span class="hljs-title function_">shift</span>(); <span class="hljs-comment">// &#x27;A&#x27;</span><br>arr; <span class="hljs-comment">// [&#x27;B&#x27;, 1, 2]</span><br>arr.<span class="hljs-title function_">shift</span>(); arr.<span class="hljs-title function_">shift</span>(); arr.<span class="hljs-title function_">shift</span>(); <span class="hljs-comment">// 连续shift 3次</span><br>arr; <span class="hljs-comment">// []</span><br>arr.<span class="hljs-title function_">shift</span>(); <span class="hljs-comment">// 空数组继续shift不会报错，而是返回undefined</span><br>arr; <span class="hljs-comment">// []</span><br></code></pre></td></tr></table></figure></li><li><p><strong>sort()</strong></p><p>sort() 可以对当前 Array 进行排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>];<br>arr.<span class="hljs-title function_">sort</span>();<br>arr; <span class="hljs-comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>reverse()</strong></p><p>reverse() 把整个 Array 的元素反转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>];<br>arr.<span class="hljs-title function_">reverse</span>();<br>arr; <span class="hljs-comment">// [&#x27;three&#x27;, &#x27;two&#x27;, &#x27;one&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>splice</strong></p><p>splice() 方法是修改 Array 的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Facebook&#x27;</span>); <span class="hljs-comment">// 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;,&#x27;Excite&#x27;]</span><br>arr; <span class="hljs-comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;,&#x27;Oracle&#x27;]</span><br><span class="hljs-comment">// 只删除,不添加:</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// [&#x27;Google&#x27;, &#x27;Facebook&#x27;]</span><br>arr; <span class="hljs-comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Oracle&#x27;]</span><br><span class="hljs-comment">// 只添加,不删除:</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Facebook&#x27;</span>); <span class="hljs-comment">// 返回[],因为没有删除任何元</span><br>arr; <span class="hljs-comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>concat()</strong></p><p>concat() 方法把当前的 Array 和另一个 Array 连接起来，并返回一个新的 Array</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>];<br><span class="hljs-keyword">var</span> added = arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br>added; <span class="hljs-comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3]</span><br>arr; <span class="hljs-comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>join()</strong></p><p>join() 方法把当前 Array 的每个元素都用指定的字符串连接起来，然后返回连接后的字符串，如果 Array 的元素不是字符串，将自动转换为字符串后再连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">// &#x27;A-B-C-1-2-3&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>多维数组</strong></p><p>如果数组的某个元素又是一个 Array ，则可以形成多维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],[<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>],[<span class="hljs-number">400</span>, <span class="hljs-number">500</span>, <span class="hljs-number">600</span>]];<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-3-对象"><a href="#3-3-对象" class="headerlink" title="3.3 对象"></a>3.3 对象</h2><p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。JavaScript的对象用于描述现实世界中的某个对象。</p><p>JavaScript中所有的键都是字符串，值是任意对象</p><p><strong>对象的常用操作：</strong></p><ol><li><p>定义一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    name : <span class="hljs-string">&quot;林慕椿&quot;</span>,<br>    age : <span class="hljs-number">18</span>,<br>    school : <span class="hljs-string">&quot;upc&quot;</span>,<br>    <span class="hljs-attr">location</span>: <span class="hljs-string">&quot;Qingdao&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对象赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">person.<span class="hljs-property">age</span> = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure></li><li><p>获取对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">对象.属性<br></code></pre></td></tr></table></figure></li><li><p>动态的删减属性</p><p>动态删除：通过delete动态的删除对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">delete</span> person.<span class="hljs-property">name</span><br></code></pre></td></tr></table></figure><p>动态添加：直接给新的属性添加值即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">person.<span class="hljs-property">apperance</span> = <span class="hljs-string">&quot;beautiful&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>判断属性值是否在这个对象中</p><p>要检测对象是否拥有某一属性，可以用 in 操作符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;age&#x27;</span> <span class="hljs-keyword">in</span> person;  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>如果用 in 判断一个属性存在，这个属性不一定是这个对象的，它可能是这个对象继承得到的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;toString&#x27;</span> <span class="hljs-keyword">in</span> xiaoming; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>因为 toString 定义在 object 对象中，而所有对象最终都会在原型链上指向 object，所以xiaoming 也拥有 toString 属性。</p></li><li><p>判断一个属性是否是对象自身拥有的，而不是继承得到的，可以用 hasOwnProperty() 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">person.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;age&#x27;</span>)  <span class="hljs-comment">// true</span><br>person.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;toString&#x27;</span>)  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="3-4-流程控制"><a href="#3-4-流程控制" class="headerlink" title="3.4 流程控制"></a>3.4 流程控制</h2><ul><li><p><strong>if 判断</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;adult&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">6</span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;teenager&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;kid&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>for循环</strong></p><p>基础语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> i;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10000</span>; i++) &#123;<br>x = x + i;<br>&#125;<br>x; <span class="hljs-comment">// 50005000</span><br></code></pre></td></tr></table></figure><p>遍历数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Microsoft&#x27;</span>];<br><span class="hljs-keyword">var</span> i, x;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>    x = arr[i];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure><p>无限循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (;;) &#123; <span class="hljs-comment">// 将无限循环下去</span><br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 通过if判断来退出循环</span><br>    &#125;<br>x ++;<br>&#125;<br></code></pre></td></tr></table></figure><p>for … in，它可以把一个对象的所有属性依次循环出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jack&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Beijing&#x27;</span><br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> o) &#123;<br>    <span class="hljs-keyword">if</span> (o.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key); <span class="hljs-comment">// &#x27;name&#x27;, &#x27;age&#x27;, &#x27;city&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于 Array 也是对象，而它的每个元素的索引被视为对象的属性，所以遍历出来是下标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> a) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[i]); <span class="hljs-comment">// &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>note：</strong>for in 打印数组的下标，for of打印数组的元素</p></li><li><p><strong>while循环</strong></p><p>基本操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> n = <span class="hljs-number">99</span>;<br><span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>    x = x + n;<br>    n = n - <span class="hljs-number">2</span>;<br>&#125;<br>x; <span class="hljs-comment">// 2500</span><br></code></pre></td></tr></table></figure><p>do while</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>n = n + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">while</span> (n &lt; <span class="hljs-number">100</span>);<br>n; <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-5-Map-和-Set"><a href="#3-5-Map-和-Set" class="headerlink" title="3.5 Map 和 Set"></a>3.5 Map 和 Set</h2><p>JavaScript的默认对象表示方式 { } 可以视为其他语言中的 Map 或 Dictionary 的数据结构，即一组键值对。但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。为了解决这个问题，最新的ES6规范引入了新的数据类型 Map 。</p><ul><li><p><strong>Map</strong></p><p>Map 是一组键值对的结构，具有极快的查找速度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//学生的名字 -- 学生成绩</span><br><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;stu1&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;stu2&quot;</span>,<span class="hljs-number">98</span>],[<span class="hljs-string">&quot;stu3&quot;</span>,<span class="hljs-number">80</span>]]);<br><span class="hljs-keyword">var</span> score = map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;stu1&quot;</span>);  <span class="hljs-comment">//通过key获取value</span><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;stu4&quot;</span>,<span class="hljs-number">95</span>);<br></code></pre></td></tr></table></figure><p>初始化 Map 需要一个二维数组，或者直接初始化一个空 Map。Map 具有以下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(); <span class="hljs-comment">// 空Map</span><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-number">67</span>); <span class="hljs-comment">// 添加新的key-value</span><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">59</span>);<br>m.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;Adam&#x27;</span>); <span class="hljs-comment">// 是否存在key &#x27;Adam&#x27;: true</span><br>m.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;Adam&#x27;</span>); <span class="hljs-comment">// 67</span><br>m.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;Adam&#x27;</span>); <span class="hljs-comment">// 删除key &#x27;Adam&#x27;</span><br>m.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;Adam&#x27;</span>); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>一个key只能对应一个value，多次对一个key放入value，后面的值会把前面的值顶替。</p></li><li><p><strong>Set</strong></p><p>Set 和 Map 类似，也是一组key的集合，但不存储value。由于key不能重复，所以Set 中没有重复的key。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// 空Set</span><br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">// 含1, 2, 3</span><br></code></pre></td></tr></table></figure><p>Set具有以下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]);<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 添加</span><br>set.<span class="hljs-title function_">delete</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">// 删除</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set.<span class="hljs-title function_">has</span>(<span class="hljs-number">3</span>))  <span class="hljs-comment">// 是否包含某个元素</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-6-Iterable"><a href="#3-6-Iterable" class="headerlink" title="3.6 Iterable"></a>3.6 Iterable</h2><p><strong>遍历数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>];<br><span class="hljs-comment">//for in打印数组的下标</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> x <span class="hljs-keyword">in</span> arr)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);  <span class="hljs-comment">// 0,1,2,3,4</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[x]);  <span class="hljs-comment">// 1,3,5,2,4</span><br>&#125;<br><span class="hljs-comment">//for of打印数组的元素</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> arr)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);  <span class="hljs-comment">// 1,3,5,2,4</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>遍历map</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;x&#x27;</span>], [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;y&#x27;</span>], [<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;z&#x27;</span>]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> map) &#123; <span class="hljs-comment">// 遍历Map</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;=&#x27;</span> + x[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>遍历set</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> set) &#123; <span class="hljs-comment">// 遍历Set</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Iterable</strong></p><p>遍历 Array 可以采用下标循环，遍历Map 和 Set 就无法使用下标。为了统一集合类型，ES6标准引入了新的 iterable 类型，Array，Map，Set 属于。</p><p>使用 iterable 内置的 forEach 方法，它接收一个函数，每次迭代就自动回调该函数。</p><p>以 Array 为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">element, index, array</span>) &#123;<br>    <span class="hljs-comment">// element: 指向当前元素的值</span><br>    <span class="hljs-comment">// index: 指向当前索引</span><br>    <span class="hljs-comment">// array: 指向Array对象本身</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(element + <span class="hljs-string">&#x27;, index = &#x27;</span> + index);<br>&#125;);<br></code></pre></td></tr></table></figure><p>Set 没有索引，因此回调函数的前两个参数都是元素本身：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]);<br>s.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">element, sameElement, set</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(element);<br>&#125;);<br></code></pre></td></tr></table></figure><p>Map 的回调函数参数依次为 value 、 key 和 map 本身：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;x&#x27;</span>], [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;y&#x27;</span>], [<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;z&#x27;</span>]]);<br>m.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">value, key, map</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h1><h2 id="4-1-函数定义"><a href="#4-1-函数定义" class="headerlink" title="4.1 函数定义"></a>4.1 函数定义</h2><p><strong>方式1：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abs</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一旦执行到 return 时，函数就执行完毕，并将结果返回。</p><p>如果没有 return 语句，函数执行完毕后也会返回结果，只是结果为 undefined 。</p><p><strong>方式2：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>function (x) { … } 是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量 abs ，所以，通过变量 abs 就可以调用该函数。</p><p>按照完整语法需要在函数体末尾加一个 ; ，表示赋值语句结束。</p><h2 id="4-2-函数调用"><a href="#4-2-函数调用" class="headerlink" title="4.2 函数调用"></a>4.2 函数调用</h2><p>调用函数时，按顺序传入参数即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">abs</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 返回10</span><br><span class="hljs-title function_">abs</span>(-<span class="hljs-number">9</span>); <span class="hljs-comment">// 返回9</span><br></code></pre></td></tr></table></figure><p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">abs</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;blablabla&#x27;</span>); <span class="hljs-comment">// 返回10</span><br><span class="hljs-title function_">abs</span>(-<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;haha&#x27;</span>, <span class="hljs-string">&#x27;hehe&#x27;</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">// 返回9</span><br></code></pre></td></tr></table></figure><p>传入的参数比定义的少也没有问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">abs</span>(); <span class="hljs-comment">// 返回NaN</span><br></code></pre></td></tr></table></figure><p>此时 abs(x) 函数的参数 x 将收到 undefined，计算结果为 NaN 。</p><p>要避免收到 undefined ，可以对参数进行检查：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abs</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;Not a number&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>arguments关键字</strong></p></blockquote><p>JavaScript还有一个免费赠送的关键字 arguments ，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;x = &#x27;</span> + x); <span class="hljs-comment">// 10</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;arg &#x27;</span> + i + <span class="hljs-string">&#x27; = &#x27;</span> + <span class="hljs-variable language_">arguments</span>[i]); <span class="hljs-comment">// 10, 20, 30</span><br>    &#125;<br>&#125;<br><span class="hljs-title function_">foo</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><p>利用 arguments ，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abs</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> ? x : -x;<br>&#125;<br><span class="hljs-title function_">abs</span>(); <span class="hljs-comment">// 0</span><br><span class="hljs-title function_">abs</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 10</span><br><span class="hljs-title function_">abs</span>(-<span class="hljs-number">9</span>); <span class="hljs-comment">// 9</span><br></code></pre></td></tr></table></figure><p>实际上 arguments 最常用于判断传入参数的个数。你可能会看到这样的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// foo(a[, b], c)</span><br><span class="hljs-comment">// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// 实际拿到的参数是a和b，c为undefined</span><br>        c = b; <span class="hljs-comment">// 把b赋给c</span><br>        b = <span class="hljs-literal">null</span>; <span class="hljs-comment">// b变为默认值</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>rest参数</strong></p></blockquote><p>由于JavaScript函数允许接收任意个参数，于是我们就不得不用 arguments 来获取所有参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">var</span> i, rest = [];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>        rest.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>[i]);<br>        &#125;<br>&#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a = &#x27;</span> + a);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b = &#x27;</span> + b);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>&#125;<br></code></pre></td></tr></table></figure><p>问题：arguments 包含所有的参数，我们有的时候可以用多余的参数来进行附加操作，需要排除已有的参数。ES6标准引入了rest参数，上面的函数可以改写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b, ...rest</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a = &#x27;</span> + a);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b = &#x27;</span> + b);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>&#125;<br><span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-comment">// 结果:</span><br><span class="hljs-comment">// a = 1</span><br><span class="hljs-comment">// b = 2</span><br><span class="hljs-comment">// Array [ 3, 4, 5 ]</span><br><span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 结果:</span><br><span class="hljs-comment">// a = 1</span><br><span class="hljs-comment">// b = undefined</span><br><span class="hljs-comment">// Array []</span><br></code></pre></td></tr></table></figure><p>rest参数只能写在最后，前面用 … 标识（类似于可变长参数），从运行结果可知，传入的参数先绑定a，b，多余的参数以数组形式交给变量 rest ，所以，不再需要 arguments 我们就获取了全部参数。</p><h2 id="4-3-变量作用域"><a href="#4-3-变量作用域" class="headerlink" title="4.3 变量作用域"></a>4.3 变量作用域</h2><blockquote><p><strong>变量的作用域</strong></p></blockquote><p>在JavaScript中，用 var 申明的变量实际上是有作用域的。</p><p>如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    x = x + <span class="hljs-number">1</span>;<br>&#125;<br>x = x + <span class="hljs-number">2</span>;  <span class="hljs-comment">// ReferenceError 无法在函数体外引用变量x</span><br></code></pre></td></tr></table></figure><p>如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    x = x + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;A&#x27;</span>;<br>    x = x + <span class="hljs-string">&#x27;B&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行（类似于匿名内部类）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//内部函数可以访问外部函数的成员，反之则不行</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> y = x + <span class="hljs-number">1</span>; <span class="hljs-comment">// bar可以访问foo的变量x</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> z = y + <span class="hljs-number">1</span>; <span class="hljs-comment">// ReferenceError foo不可以访问bar的变量y</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果内部函数和外部函数的变量名重名：函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;A&#x27;</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;x in bar() = &#x27;</span> + x); <span class="hljs-comment">// &#x27;A&#x27;</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;x in foo() = &#x27;</span> + x); <span class="hljs-comment">// 1</span><br>    <span class="hljs-title function_">bar</span>();<br>    &#125;<br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><blockquote><p><strong>变量提升</strong></p></blockquote><p>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;Hello, &#x27;</span> + y;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-string">&#x27;Bob&#x27;</span>;<br>&#125;<br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><p>输出：Hello, undefined</p><p>并没有报错，因为JavaScript引擎自动提升了变量 y 的声明，但不会提升变量 y 的赋值。</p><p>对于上述 foo() 函数，JavaScript引擎看到的代码相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> y; <span class="hljs-comment">// 提升变量y的申明，此时y为undefined</span><br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;Hello, &#x27;</span> + y;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>    y = <span class="hljs-string">&#x27;Bob&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个 var 申明函数内部用到的所有变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span><br>        x = <span class="hljs-number">1</span>, <span class="hljs-comment">// x初始化为1</span><br>        y = x + <span class="hljs-number">1</span>, <span class="hljs-comment">// y初始化为2</span><br>        z, i; <span class="hljs-comment">// z和i为undefined</span><br>    <span class="hljs-comment">// 其他语句:</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>    ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>全局作用域</strong></p></blockquote><p>不在任何函数内定义的变量就具有全局作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>&#125;<br><span class="hljs-title function_">f</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br></code></pre></td></tr></table></figure><p>JavaScript默认有一个全局对象 window ，全局作用域的变量实际上被绑定到 window 的一个属性，直接访问全局变量 course 和访问 window.course 是完全一样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> course = <span class="hljs-string">&#x27;Learn JavaScript&#x27;</span>;<br><span class="hljs-title function_">alert</span>(course); <span class="hljs-comment">// &#x27;Learn JavaScript&#x27;</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">course</span>); <span class="hljs-comment">// &#x27;Learn JavaScript </span><br><span class="hljs-comment">// 默认所有全局变量都会自动绑定在windows对象下</span><br></code></pre></td></tr></table></figure><p>顶层函数的定义也被视为一个全局变量，并绑定到 window 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br>&#125;<br><span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// 直接调用foo()</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// 通过window.foo()调用</span><br></code></pre></td></tr></table></figure><p>每次直接调用的 alert() 函数其实也是 window 的一个变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;调用window.alert()&#x27;</span>);<br><span class="hljs-comment">// 把alert保存到另一个变量:</span><br><span class="hljs-keyword">var</span> old_alert = <span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span>;<br><span class="hljs-comment">// 给alert赋一个新函数:</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;无法用alert()显示了!&#x27;</span>);<br><span class="hljs-comment">// 恢复alert:</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = old_alert;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;又可以用alert()了!&#x27;</span>);<br></code></pre></td></tr></table></figure><p>JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报 ReferenceError 错误。</p><blockquote><p><strong>规范</strong></p></blockquote><p>全局变量会绑定到 window 上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p><p><strong>减少冲突的方法：</strong>是把自己的所有变量和函数全部绑定到一个全局变量中。例如把自己的代码全部放入唯一的名字空间 MYAPP 中，会大大减少全局变量冲突的可能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 唯一的全局变量MYAPP:</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">MYAPP</span> = &#123;&#125;;<br><span class="hljs-comment">// 其他变量:</span><br><span class="hljs-variable constant_">MYAPP</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;myapp&#x27;</span>;<br><span class="hljs-variable constant_">MYAPP</span>.<span class="hljs-property">version</span> = <span class="hljs-number">1.0</span>;<br><span class="hljs-comment">// 其他函数:</span><br><span class="hljs-variable constant_">MYAPP</span>.<span class="hljs-property">foo</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;foo&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><strong>局部作用域：let</strong></p></blockquote><p>由于JavaScript的变量作用域实际上是函数内部，我们在 for 循环等语句块中是无法定义具有局部作用域的变量的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-comment">//</span><br>    &#125;<br>    i += <span class="hljs-number">100</span>; <span class="hljs-comment">// 仍然可以引用变量i</span><br>&#125;<br></code></pre></td></tr></table></figure><p>解决方法：ES6引入了新的关键字 let ，用 let 替代 var 可以申明一个块级作用域的变量：</p><p>建议使用 let 去定义局部作用域的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>    sum += i;<br>    &#125;<br>    i += <span class="hljs-number">1</span>;  <span class="hljs-comment">// SyntaxError</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>常量：const</strong></p></blockquote><p>在ES6之前要申明一个常量，通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><p>ES6标准引入了新的关键字 const 来定义常量， const 与 let 都具有块级作用域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14</span>;  <span class="hljs-comment">// 只读变量</span><br><span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3</span>; <span class="hljs-comment">// 某些浏览器不报错，但是无效果</span><br><span class="hljs-variable constant_">PI</span>; <span class="hljs-comment">// 3.14</span><br></code></pre></td></tr></table></figure><h2 id="4-4-方法"><a href="#4-4-方法" class="headerlink" title="4.4 方法"></a>4.4 方法</h2><blockquote><p><strong>定义方法</strong></p></blockquote><p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> linmuchun = &#123;<br>    name : <span class="hljs-string">&#x27;林慕椿&#x27;</span>,<br>    birth : <span class="hljs-number">2002</span>,<br>    <span class="hljs-comment">//方法</span><br>    age : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();<br>        <span class="hljs-keyword">return</span> now-<span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//属性</span><br>linmuchun.<span class="hljs-property">name</span><br><span class="hljs-comment">//方法，一定要带()</span><br>linmuchun.<span class="hljs-title function_">age</span>()<br></code></pre></td></tr></table></figure><p>this关键字：在一个方法内部， this 是一个特殊变量，它始终指向当前对象。</p><p>拆开写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();<br><span class="hljs-keyword">return</span> y - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;<br>&#125;<br><span class="hljs-keyword">var</span> linmuchun = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">2002</span>,<br>    <span class="hljs-attr">age</span>: getAge<br>&#125;;<br>xiaoming.<span class="hljs-title function_">age</span>(); <span class="hljs-comment">// 20 正常结果</span><br><span class="hljs-title function_">getAge</span>(); <span class="hljs-comment">// NaN 单独调用函数，函数的this指向全局对象window</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>apply</strong></p></blockquote><p>apply 关键字可以控制 this 的指向，要指定函数的 this 指向哪个对象，可以用函数本身的 apply 方法，它接收两个参数，第一个参数就是需要绑定的 this 变量，第二个参数是 Array ，表示函数本身的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();<br><span class="hljs-keyword">return</span> y - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;<br>&#125;<br><span class="hljs-keyword">var</span> linmuchun = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">2002</span>,<br>    <span class="hljs-attr">age</span>: getAge<br>&#125;;<br>getAge.<span class="hljs-title function_">apply</span>(linmuchun,[]);  <span class="hljs-comment">//this指向了linmuchun，参数为空</span><br></code></pre></td></tr></table></figure><h1 id="5-标准对象"><a href="#5-标准对象" class="headerlink" title="5.  标准对象"></a>5.  标准对象</h1><h2 id="5-1-标准对象"><a href="#5-1-标准对象" class="headerlink" title="5.1 标准对象"></a>5.1 标准对象</h2><p>在JavaScript的世界里，一切都是对象。但是某些对象还是和其他对象不太一样。为了区分对象的类型，我们用 typeof 操作符获取对象的类型，它总是返回一个字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-number">123</span>; <span class="hljs-comment">// &#x27;number&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">NaN</span>; <span class="hljs-comment">// &#x27;number&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;str&#x27;</span>; <span class="hljs-comment">// &#x27;string&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// &#x27;boolean&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// &#x27;undefined&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Math</span>.<span class="hljs-property">abs</span>; <span class="hljs-comment">// &#x27;function&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// &#x27;object&#x27;</span><br><span class="hljs-keyword">typeof</span> []; <span class="hljs-comment">// &#x27;object&#x27;</span><br><span class="hljs-keyword">typeof</span> &#123;&#125;; <span class="hljs-comment">// &#x27;object&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="5-2-Date"><a href="#5-2-Date" class="headerlink" title="5.2 Date"></a>5.2 Date</h2><p>在JavaScript中，Date 对象用来表示日期和时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>now; <span class="hljs-comment">// Thu Sep 15 2022 18:53:40 GMT+0800 (中国标准时间)</span><br>now.<span class="hljs-title function_">getFullYear</span>(); <span class="hljs-comment">// 2022 年份</span><br>now.<span class="hljs-title function_">getMonth</span>(); <span class="hljs-comment">// 8 月份 注意月份范围是0~11 8代表9月</span><br>now.<span class="hljs-title function_">getDate</span>(); <span class="hljs-comment">// 15 表示15号</span><br>now.<span class="hljs-title function_">getDay</span>(); <span class="hljs-comment">// 4 表示星期四</span><br>now.<span class="hljs-title function_">getHours</span>(); <span class="hljs-comment">// 18 24小时制</span><br>now.<span class="hljs-title function_">getMinutes</span>(); <span class="hljs-comment">// 53 分钟</span><br>now.<span class="hljs-title function_">getSeconds</span>(); <span class="hljs-comment">// 40 秒</span><br>now.<span class="hljs-title function_">getMilliseconds</span>(); <span class="hljs-comment">// 844 毫秒数</span><br>now.<span class="hljs-title function_">getTime</span>(); <span class="hljs-comment">// 1663239220844 以number形式表示的时间戳</span><br></code></pre></td></tr></table></figure><p><strong>时区</strong></p><p>Date 对象表示的时间总是按浏览器所在时区显示的，不过我们既可以显示本地时间，也可以显示调整后的UTC时间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1663239220844</span>);<br>d.<span class="hljs-title function_">toLocaleString</span>(); <span class="hljs-comment">// &#x27;2022/9/15 18:53:40&#x27; 显示的字符串与操作系统设定的格式有关</span><br>d.<span class="hljs-title function_">toUTCString</span>(); <span class="hljs-comment">// &#x27;Thu, 15 Sep 2022 10:53:40 GMT&#x27; UTC时间与本地时间相差8小时</span><br></code></pre></td></tr></table></figure><p>JavaScript时区转换：只要传递的是一个 number 类型的时间戳，就不用关心时区转换。任何浏览器都可以把一个时间戳正确转换为本地时间。</p><h2 id="5-3-JSON"><a href="#5-3-JSON" class="headerlink" title="5.3 JSON"></a>5.3 JSON</h2><blockquote><p>JSON（<a href="https://baike.baidu.com/item/JavaScript?fromModule=lemma_inlink">JavaScript</a> Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于 <a href="https://baike.baidu.com/item/ECMAScript?fromModule=lemma_inlink">ECMAScript</a>（European Computer Manufacturers Association, 欧洲计算机协会制定的js规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote><p>在 JavaScript 语言中，一切都是对象。因此任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。</p><p>语法格式：</p><ul><li><p>对象都用 {}</p></li><li><p>数组都用 []</p></li><li><p>对象表示为键值对，数据由逗号分隔</p></li></ul><p>JSON 键值对是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linmuchun&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;18&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;女&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> JSON 和 JavaScript 对象的关系可以这么理解：JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;; <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="hljs-keyword">var</span> json = <span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></td></tr></table></figure><p>JSON 字符串和 JavaScript 对象互转：</p><ul><li><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>);<br><span class="hljs-comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;);<br><span class="hljs-comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>代码测试：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--script标签内写JavaScript代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">        &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> user = &#123;</span><br><span class="language-javascript">            name : <span class="hljs-string">&quot;林慕椿&quot;</span>,</span><br><span class="language-javascript">            age : <span class="hljs-number">18</span>,</span><br><span class="language-javascript">            sex : <span class="hljs-string">&#x27;女&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 对象转换为json字符串</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> jsonUser = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonUser);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// json字符串转换为对象 参数为json字符串</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;林慕椿&quot;,&quot;age&quot;:&quot;18&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-面向对象编程"><a href="#6-面向对象编程" class="headerlink" title="6. 面向对象编程"></a>6. 面向对象编程</h1><h2 id="6-1-面向对象编程"><a href="#6-1-面向对象编程" class="headerlink" title="6.1 面向对象编程"></a><strong>6.1 面向对象编程</strong></h2><p>JavaScript的面向对象编程和大多数其他语言如Java、C#的面向对象编程都不太一样。Java面向对象的两个基本概念：</p><ol><li>类：类是对象的类型模板，例如，定义 Student 类来表示学生，类本身是一种类型，Student 表示学生类型，但不表示任何具体的某个学生。</li><li>实例：实例是根据类创建的对象，例如，根据 Student 类可以创建出 student1、student2、student3 等多个实例，每个实例表示一个具体的学生，他们全都属于Student 类型。</li></ol><h2 id="6-2-原型继承"><a href="#6-2-原型继承" class="headerlink" title="6.2 原型继承"></a>6.2 原型继承</h2><p>类和实例是大多数面向对象编程语言的基本概念。不过，在JavaScript中这个概念有所不同。JavaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。</p><p>创建对象 Student ，然后创建出 xiaoming，把 xiaoming 的原型指向了对象 Student （类似于Java中的继承）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Student</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robot&#x27;</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">1.2</span>,<br>    <span class="hljs-attr">run</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27; is running...&#x27;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">var</span> xiaoming = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span><br>&#125;;<br>xiaoming.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Student</span>;<br></code></pre></td></tr></table></figure><p>xiaoming 有自己的 name 属性，但并没有定义 run() 方法。不过，由于小明是从 Student继承而来，只要 Student 有 run() 方法， xiaoming 也可以调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">xiaoming.<span class="hljs-property">name</span>; <span class="hljs-comment">// &#x27;小明&#x27;</span><br>xiaoming.<span class="hljs-title function_">run</span>(); <span class="hljs-comment">// 小明 is running...</span><br></code></pre></td></tr></table></figure><p>JavaScript的原型链和Java的Class区别就在，它没有“Class”的概念，所有对象都是实例，所谓继承关系不过是把一个对象的原型指向另一个对象而已。</p><h2 id="6-3-class继承"><a href="#6-3-class继承" class="headerlink" title="6.3 class继承"></a><strong>6.3 class继承</strong></h2><p>新的关键字 class 从ES6开始正式被引入到JavaScript中。 class 的目的就是让定义类更简单。</p><p>用函数实现 Student 的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-comment">// 给Student新增一个方法</span><br><span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果用新的 class 关键字来编写 Student，可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-comment">// 给Student新增一个方法</span><br>    <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;!&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比较一下就可以发现，class 的定义包含了构造函数 constructor 和定义在原型对象上的函数hello() （注意没有 function 关键字），这样就避免了 Student.prototype.hello = function () {…} 这样分散的代码。</p><p>创建一个 Student 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xiaoming = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;小明&#x27;</span>);<br>xiaoming.<span class="hljs-title function_">hello</span>();<br></code></pre></td></tr></table></figure><p>用 class 定义对象的另一个巨大的好处是继承更方便了。我们从 Student 派生一个PrimaryStudent 需要编写的代码量。现在，原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过 extends 来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimaryStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Student</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, grade</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(name); <span class="hljs-comment">// 记得用super调用父类的构造方法!</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade;<br>    &#125;<br>    <span class="hljs-title function_">myGrade</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;I am at grade &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-操作BOM（重点）"><a href="#6-操作BOM（重点）" class="headerlink" title="6. 操作BOM（重点）"></a>6. 操作BOM（重点）</h1><h2 id="6-1-浏览器"><a href="#6-1-浏览器" class="headerlink" title="6.1 浏览器"></a>6.1 浏览器</h2><p>由于JavaScript的出现就是为了能在浏览器中运行，所以浏览器自然是JavaScript开发者必须要关注的。</p><p>目前主流的浏览器分这么几种：</p><p>原生浏览器：</p><ul><li><p>IE</p></li><li><p>Chrome</p></li><li><p>Safari</p></li><li><p>Firefox</p></li></ul><p>套壳浏览器：</p><ul><li>QQ浏览器</li><li>360浏览器</li></ul><h2 id="6-2-BOM"><a href="#6-2-BOM" class="headerlink" title="6.2 BOM"></a>6.2 BOM</h2><p>BOM（Browser Object Mode）浏览器对象模型，是Javascript的重要组成部分。它提供了一系列对象用于与浏览器窗口进行交互，这些对象通常统称为BOM。</p><p>各内置对象之间按照某种层次组织起来的模型统称为Bom浏览器对象模型</p><p><img src="https://img.yiqiangshiyia.cn/blog/bom.png" alt="bom"></p><h2 id="6-3-window"><a href="#6-3-window" class="headerlink" title="6.3 window"></a>6.3 window</h2><p>window 代表浏览器窗口，也可以充当全局作用域。因为window对象是Bom中所有对象的核心和父对象，所以定义在全局作用域中的变量 函数以及 Javascript中的内置函数都可以被window对象调用。</p><p>window 对象有 innerWidth 和 innerHeight 属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。还有一个 outerWidth 和 outerHeight 属性，可以获取浏览器窗口的整个宽高。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">// 浏览器的内部高度和内部宽度</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br><br><span class="hljs-comment">// 浏览器的外部高度和外部宽度</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">outerWidth</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">outerHeight</span>);<br></code></pre></td></tr></table></figure><h2 id="6-4-navigator"><a href="#6-4-navigator" class="headerlink" title="6.4 navigator"></a>6.4 navigator</h2><p>navigator 对象表示浏览器的信息，最常用的属性包括：</p><ul><li><p>navigator.appName：浏览器名称</p></li><li><p>navigator.appVersion：浏览器版本</p></li><li><p>navigator.language：浏览器设置的语言</p></li><li><p>navigator.platform：操作系统类型</p></li><li><p>navigator.userAgent：浏览器设定的 User-Agent 字符串</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(navigator.<span class="hljs-property">appName</span>);  <span class="hljs-comment">// &#x27;Netscape&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(navigator.<span class="hljs-property">appVersion</span>);  <span class="hljs-comment">// &#x27;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(navigator.<span class="hljs-property">language</span>);  <span class="hljs-comment">// &#x27;zh-CN&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(navigator.<span class="hljs-property">platform</span>);  <span class="hljs-comment">// &#x27;Win32&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(navigator.<span class="hljs-property">userAgent</span>);  <span class="hljs-comment">// &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36&#x27;</span><br></code></pre></td></tr></table></figure><p>大多时候不会使用 navigator 对象，因为会被人为修改，不建议使用这些属性来判断和编写代码。</p><h2 id="6-5-screen"><a href="#6-5-screen" class="headerlink" title="6.5 screen"></a>6.5 screen</h2><p>screen 对象表示屏幕的信息，常用的属性有：</p><ul><li><p>screen.width：屏幕宽度，以像素为单位</p></li><li><p>screen.height：屏幕高度，以像素为单位</p></li><li><p>screen.colorDepth：返回颜色位数，如8、16、24。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(screen.<span class="hljs-property">width</span>);  <span class="hljs-comment">// 1280</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(screen.<span class="hljs-property">height</span>);  <span class="hljs-comment">// 800</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(screen.<span class="hljs-property">colorDepth</span>);   <span class="hljs-comment">// 24</span><br></code></pre></td></tr></table></figure><h2 id="6-6-location"><a href="#6-6-location" class="headerlink" title="6.6 location"></a>6.6 location</h2><p>location 对象表示当前页面的URL信息。例如：<a href="https://www.baidu.com/">https://www.baidu.com/</a></p><p>location 代表当前页面 URL 信息：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220916194325.png" alt="QQ截图20220916194325"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">location.<span class="hljs-title function_">reload</span>();  <span class="hljs-comment">// 刷新网页</span><br>location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&#x27;https://yiqiangshiyia.cn/&#x27;</span>); <span class="hljs-comment">// 设置一个新的URL地址</span><br></code></pre></td></tr></table></figure><h2 id="6-7-document"><a href="#6-7-document" class="headerlink" title="6.7 document"></a>6.7 document</h2><p>document 对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构， document 对象就是整个DOM树的根节点。</p><blockquote><p><strong>title 属性</strong></p></blockquote><p>document 的 title 属性是从HTML文档中读取的，但是可以动态改变：观览器窗口标题发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;一腔诗意啊&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p><strong>获取具体的文档树节点</strong></p></blockquote><p>要查找DOM树的某个节点，需要从 document 对象开始查找。最常用的查找是根据ID和Tag Name。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;code-menu&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:solid 1px #ccc;padding:6px;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Spring<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Django<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Linux<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Docker<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用 document 对象提供的 getElementById() 和 getElementsByTagName() 可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">menu</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&#x27;code-menu&#x27;</span>);<br><span class="hljs-type">var</span> <span class="hljs-variable">drinks</span> <span class="hljs-operator">=</span> document.getElementsByTagName(<span class="hljs-string">&#x27;dt&#x27;</span>);<br><span class="hljs-keyword">var</span> i, s;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;drinks.length; i++) &#123;<br>s = s + drinks[i].innerHTML + <span class="hljs-string">&#x27;,&#x27;</span>;<br>&#125;<br>console.log(s);<br></code></pre></td></tr></table></figure><blockquote><p><strong>cookie 属性</strong></p></blockquote><p>document 对象还有一个 cookie 属性，可以获取当前页面的Cookie。</p><p>JavaScript可以通过 document.cookie 读取到当前页面的Cookie：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>; <span class="hljs-comment">// &#x27;v=123; remember=true; prefer=zh&#x27;</span><br></code></pre></td></tr></table></figure><p>由于JavaScript能读取到页面的Cookie，而用户的登录信息通常也存在Cookie中，这就造成了巨大的安全隐患，这是因为在HTML页面中引入第三方的JavaScript代码是允许的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--www.example.com--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.foo.com/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果引入的第三方的JavaScript中存在恶意代码，则 <a href="http://www.foo.com/">www.foo.com</a> 网站将直接获取到 <a href="http://www.example.com/">www.example.com</a> 网站的用户登录信息。</p><p>为了解决这个问题，服务器在设置Cookie时可以使用 httpOnly ，设定了 httpOnly 的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持 httpOnly 选项，IE从IE6 SP1开始支持。</p><p>为了确保安全，服务器端在设置Cookie时，应该始终坚持使用 httpOnly 。</p><h2 id="6-8-history"><a href="#6-8-history" class="headerlink" title="6.8 history"></a>6.8 history</h2><p>history 对象保存了浏览器的历史记录，JavaScript可以调用 history 对象的 back() 或 forward () ，相当于用户点击了浏览器的“后退”或“前进”按钮。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">history.<span class="hljs-title function_">back</span>();  <span class="hljs-comment">// 后退</span><br>history.<span class="hljs-title function_">forward</span>();  <span class="hljs-comment">// 前进</span><br></code></pre></td></tr></table></figure><h1 id="7-操作DOM（重点）"><a href="#7-操作DOM（重点）" class="headerlink" title="7. 操作DOM（重点）"></a>7. 操作DOM（重点）</h1><h2 id="7-1-DOM"><a href="#7-1-DOM" class="headerlink" title="7.1 DOM"></a>7.1 DOM</h2><blockquote><p>文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。</p></blockquote><p>先来看看下面代码：</p><p><img src="https://img.yiqiangshiyia.cn/blog/dom1.jpg" alt="dom1"></p><p>将HTML代码分解为DOM节点层次图：</p><p><img src="https://img.yiqiangshiyia.cn/blog/dom2.jpg" alt="dom2"></p><p>由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。DOM是一个树形结构。操作一个DOM节点有以下几个操作：</p><ul><li><p>更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容</p></li><li><p>遍历：遍历该DOM节点下的子节点，以便进行进一步操作</p></li><li><p>添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点</p></li><li><p>删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点</p></li></ul><h2 id="7-2-获取DOM"><a href="#7-2-获取DOM" class="headerlink" title="7.2 获取DOM"></a>7.2 获取DOM</h2><p>在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是 document.getElementById() 和 document.getElementsByTagName() ，以及CSS选择器document.getElementsByClassName() 。</p><p>要操作一个DOM节点，就必须首先获得这个DOM节点：</p><p>获取DOM节点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//对应css选择器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> h1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;h1&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> p1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;p1&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> p2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;p2&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;father&quot;</span>);  <span class="hljs-comment">//获取父节点</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> children = father.<span class="hljs-property">children</span>;  <span class="hljs-comment">//获取父节点下的所有子节点</span></span><br><span class="language-javascript">        father.<span class="hljs-property">firstChild</span>;</span><br><span class="language-javascript">        father.<span class="hljs-property">lastChild</span>;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>原生JS代码，后面尽量使用 jQuery()</p><h2 id="7-3-更新DOM"><a href="#7-3-更新DOM" class="headerlink" title="7.3 更新DOM"></a>7.3 更新DOM</h2><p>拿到一个DOM节点后，我们可以对它进行更新。可以利用 JS 动态的操作网页。</p><p><strong>操作文本：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> id1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;id1&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//操作文本</span></span><br><span class="language-javascript">        id1.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;456&#x27;</span>;  <span class="hljs-comment">//修改文本的值</span></span><br><span class="language-javascript">        id1.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>;  <span class="hljs-comment">//可以解析HTML文本标签</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>操作css：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> id1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;id1&quot;</span>);</span><br><span class="language-javascript">        id1.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;abc&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">//操作css</span></span><br><span class="language-javascript">        id1.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">        id1.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&#x27;20px&#x27;</span>;</span><br><span class="language-javascript">        id1.<span class="hljs-property">style</span>.<span class="hljs-property">padding</span> = <span class="hljs-string">&#x27;2em&#x27;</span>;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-4-插入DOM"><a href="#7-4-插入DOM" class="headerlink" title="7.4 插入DOM"></a>7.4 插入DOM</h2><p>我们获得了某个DOM节点，假设这个节点是空的，通过 innerHTML 就可以增加一个元素，但是这个DOM节点以及存在元素就会产生覆盖。</p><blockquote><p><strong>appendChild</strong></p></blockquote><p>插入新的节点：使用 appendChild，把一个子节点添加到父节点的最后一个子节点。插入的 js 节点已经存在于当前的文档树，因此这个节点首先会从原先的位置删除，再插入到新的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javase&quot;</span>&gt;</span>JavaSE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javaee&quot;</span>&gt;</span>JavaEE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javame&quot;</span>&gt;</span>JavaME<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> js = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;js&quot;</span>);  <span class="hljs-comment">//已经存在的节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>);</span><br><span class="language-javascript">        list.<span class="hljs-title function_">appendChild</span>(js);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建一个新的节点，然后插入到指定位置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javase&quot;</span>&gt;</span>JavaSE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javaee&quot;</span>&gt;</span>JavaEE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javame&quot;</span>&gt;</span>JavaME<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//通过js创建一个新的节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newP = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);  <span class="hljs-comment">//创建一个p标签</span></span><br><span class="language-javascript">        newP.<span class="hljs-property">id</span> = <span class="hljs-string">&#x27;newP&#x27;</span>;</span><br><span class="language-javascript">        newP.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;  &lt;!--等价于&lt;p id=<span class="hljs-string">&quot;newP&quot;</span>&gt;<span class="hljs-title class_">Hello</span> <span class="hljs-title class_">World</span>!&lt;/p&gt;--&gt;</span><br><span class="language-javascript">        list.<span class="hljs-title function_">appendChild</span>(newP);  <span class="hljs-comment">//追加节点</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>动态创建一个节点然后添加到DOM树中，可以实现很多功能。</p><p>例如：创建了一个节点，然后把它添加到节点的末尾，这样就动态地给文档添加了新的CSS定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myStyle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>);<br>myStyle.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;text/css&#x27;</span>);<br>myStyle.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;p &#123; color: red &#125;&#x27;</span>;<br><span class="hljs-comment">//head 头部标签</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(d);<br></code></pre></td></tr></table></figure><blockquote><p><strong>insertBefore</strong></p></blockquote><p>把子节点插入到指定的位置：可以使用 parentElement.insertBefore(newElement, referenceElement);，子节点会插入到 referenceElement 之前。</p><p>任意位置插入节点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javase&quot;</span>&gt;</span>JavaSE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javaee&quot;</span>&gt;</span>JavaEE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javame&quot;</span>&gt;</span>JavaME<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> javaee = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;javaee&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> js = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;js&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 参数：(newNode,targetNode)</span></span><br><span class="language-javascript">        list.<span class="hljs-title function_">insertBefore</span>(js,javaee);  <span class="hljs-comment">//把js出入到javaee前面</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-5-删除DOM"><a href="#7-5-删除DOM" class="headerlink" title="7.5 删除DOM"></a>7.5 删除DOM</h2><p>要删除一个节点，首先要获得该节点本身以及它的父节点，然后调用父节点的 removeChild 把自己删掉：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;p1&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> father = p1.<span class="hljs-property">parentElement</span>;  <span class="hljs-comment">//通过子节点获取父节点</span></span><br><span class="language-javascript">        father.<span class="hljs-title function_">removeChild</span>(self);  <span class="hljs-comment">//删除子节点</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过指定的下标删除：删除多个节点的时候 children 是在时刻变化的（下标在变）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> father = p1.<span class="hljs-property">parentElement</span>;  <span class="hljs-comment">//通过子节点获取父节点</span></span><br><span class="language-javascript">        <span class="hljs-comment">//删除是一个动态的过程</span></span><br><span class="language-javascript">        father.<span class="hljs-title function_">removeChild</span>(father.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">        father.<span class="hljs-title function_">removeChild</span>(father.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">        father.<span class="hljs-title function_">removeChild</span>(father.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="8-操作表单"><a href="#8-操作表单" class="headerlink" title="8. 操作表单"></a>8. 操作表单</h1><h2 id="8-1-回顾"><a href="#8-1-回顾" class="headerlink" title="8.1 回顾"></a>8.1 回顾</h2><p>用JavaScript操作表单和操作DOM是类似的，因为表单本身也是DOM树。</p><p>不过表单的输入框、下拉框等可以接收用户输入，所以用JavaScript来操作表单，可以获得用户输入的内容，或者对一个输入框设置新的内容。</p><p>表单的目的：提交信息</p><p>HTML表单的输入控件主要有以下几种：</p><ul><li><p>文本框：对应的 &lt;input type=”text”&gt;  —-  用于输入文本</p></li><li><p>密码框：对应的 &lt;input type=”password”&gt;  —-  用于输入密码</p></li><li><p>单选框：对应的 &lt;input type=”radio”&gt;  —-  用于选择一项</p></li><li><p>复选框：对应的 &lt;input type=”checkbox”&gt;  —- 用于选择多项</p></li><li><p>下拉框：对应的 &lt;select&gt;  —-  用于选择一项</p></li><li><p>隐藏文本：对应的 &lt;input type=”hidden”&gt;  —-  用户不可见，但表单提交时会把隐藏文本发送到服务器。</p></li></ul><h2 id="8-2-获取和设置值"><a href="#8-2-获取和设置值" class="headerlink" title="8.2 获取和设置值"></a>8.2 获取和设置值</h2><blockquote><p><strong>获取值</strong></p></blockquote><p>如果我们获得了一个 &lt;input&gt; 节点的引用，就可以直接调用 value 获得对应的用户输入值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;email&quot;</span>&gt;<br><span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;email&#x27;</span>);<br>input.<span class="hljs-property">value</span>; <span class="hljs-comment">// &#x27;用户输入的值&#x27;</span><br></code></pre></td></tr></table></figure><p>这种方式可以应用于 text 、 password 、 hidden 以及 select 。但是，对于单选框和复选框， value 属性返回的永远是HTML预设的值，而我们需要获得的实际是用户是否“勾上了”选项，所以应该用 checked 判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;label&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;weekday&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;monday&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>Monday<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;weekday&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tuesday&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Tuesday<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">var mon = document.getElementById(&#x27;monday&#x27;);</span><br><span class="language-xml">var tue = document.getElementById(&#x27;tuesday&#x27;);</span><br><span class="language-xml">mon.value; // &#x27;1&#x27;</span><br><span class="language-xml">tue.value; // &#x27;2&#x27;</span><br><span class="language-xml">mon.checked; // true或者false</span><br><span class="language-xml">tue.checked; // true或者false</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>设置值</strong></p></blockquote><p>设置值和获取值类似，对于 text 、 password 、 hidden 以及 select ，直接设置 value就可以。对于单选框和复选框，设置 checked 为 true 或 false 即可。：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;email&quot;</span>&gt;<br><span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;email&#x27;</span>);<br>input.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;test@example.com&#x27;</span>; <span class="hljs-comment">// 文本框的内容已更新</span><br></code></pre></td></tr></table></figure><p><strong>example：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--多选框的值就是定义好的value--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;man&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;boy&quot;</span>&gt;</span>男<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;women&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;girl&quot;</span>&gt;</span>女<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//得到输入框的值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input_text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//得到输入框的值</span></span><br><span class="language-javascript">        input_text.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">//修改输入框的值</span></span><br><span class="language-javascript">        input_text.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;123456&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//得到多选框的值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> boy_radio = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;boy&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> girl_radio = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;girl&quot;</span>);</span><br><span class="language-javascript">        boy_radio.<span class="hljs-property">value</span>;  <span class="hljs-comment">//获取值，但是获取到的可能不是所选中的值</span></span><br><span class="language-javascript">        girl_radio.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">//对于单选框，多选框等固定的值，boy_radio.value只能获取到当前值</span></span><br><span class="language-javascript">        boy_radio.<span class="hljs-property">checked</span>;  <span class="hljs-comment">//查看返回的结果，是否为true，如果为true则被选中</span></span><br><span class="language-javascript">        boy_radio.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//通过js赋值操作表单</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-4-提交表单（验证）"><a href="#8-4-提交表单（验证）" class="headerlink" title="8.4 提交表单（验证）"></a>8.4 提交表单（验证）</h2><p>JavaScript可以以两种方式来处理表单的提交。</p><blockquote><p><strong>方式一：</strong>通过 &lt;form&gt; 元素的 submit() 方法提交一个表单</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- <span class="hljs-variable constant_">HTML</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-form&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;doSubmitForm()&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSubmitForm</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test-form&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 可以在此修改form的input...</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 提交form:</span></span></span><br><span class="language-javascript"><span class="language-xml">    form.<span class="hljs-title function_">submit</span>();</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这种方式的缺点是扰乱了浏览器对form的正常提交。浏览器默认点击&lt;button type=”submit”&gt; 时提交表单，或者用户在最后一个输入框按回车键。因此可以用方式二。</p><blockquote><p><strong>方式二：</strong>响应 &lt;form&gt; 本身的onsubmit 事件，在提交form时作修改</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- <span class="hljs-variable constant_">HTML</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-form&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkForm</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test-form&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 可以在此修改form的input...</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 继续下一步:</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意要 return true 来告诉浏览器继续提交，如果 return false，浏览器将不会继续提交form，这种情况通常对应用户输入有误，提示用户错误信息后终止提交form。</p><p>在检查和修改 &lt;input&gt; 时，要充分利用 &lt;input type=”hidden”&gt; 来传递数据。</p><blockquote><p><strong>MD5 算法</strong></p></blockquote><p>登录表单希望用户输入用户名和口令，出于安全考虑提交表单时不传输明文口令，而是口令的MD5。</p><p>直接修改 &lt;input&gt; ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- <span class="hljs-variable constant_">HTML</span> --&gt;<br>&lt;form id=&quot;login-form&quot; method=&quot;post&quot; onsubmit=&quot;return checkForm()&quot;&gt;<br>    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;<br>    &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;<br>    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>&lt;/form&gt;<br>&lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;&gt;<br>&lt;/script&gt;<br>&lt;script&gt;<br>function checkForm() &#123;<br>    var pwd = document.getElementById(&#x27;password&#x27;);<br>    // 把用户输入的明文变为MD5:<br>    pwd.value = md5(pwd.value);<br>    // 继续下一步:<br>    return true;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这个做法看上去没啥问题，但用户输入了口令提交时，口令框的显示会突然从几个 * 变成32个（因为MD5有32个字符）。<br>要想不改变用户的输入，可以利用 &lt;input type=”hidden”&gt; 实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login-form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return checkForm()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;md5-password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkForm</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input_pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;input-password&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> md5_pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;md5-password&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 把用户输入的明文变为MD5:</span></span><br><span class="language-javascript">        md5_pwd.<span class="hljs-property">value</span> = <span class="hljs-title function_">md5</span>(input_pwd.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 继续下一步:</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架整合-书籍管理系统</title>
    <link href="/2022/09/09/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88-%E4%B9%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/09/09/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88-%E4%B9%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><strong>业务流程：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B.png" alt="业务流程"></p><p><strong>项目目录结构图：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.png" alt="项目目录"></p><h2 id="2-数据库创建"><a href="#2-数据库创建" class="headerlink" title="2. 数据库创建"></a>2. 数据库创建</h2><p><strong>创建一个存放书籍数据的数据库表</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220909200447.png" alt="QQ截图20220909200447"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE `ssmbuild`;<br><br>USE `ssmbuild`;<br><br>DROP TABLE IF EXISTS `books`;<br><br>CREATE TABLE `books` (<br>`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;书id&#x27;,<br>`bookName` VARCHAR(100) NOT NULL COMMENT &#x27;书名&#x27;,<br>`bookCounts` INT(11) NOT NULL COMMENT &#x27;数量&#x27;,<br>`detail` VARCHAR(200) NOT NULL COMMENT &#x27;描述&#x27;,<br>KEY `bookID` (`bookID`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8<br><br>INSERT INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`)VALUES<br>(1,&#x27;Java&#x27;,50,&#x27;从入门到放弃&#x27;),<br>(2,&#x27;MySQL&#x27;,10,&#x27;从删库到跑路&#x27;),<br>(3,&#x27;Linux&#x27;,20,&#x27;从进门到进牢&#x27;),<br>(4,&#x27;Python&#x27;,30,&#x27;从入门到入土&#x27;);<br></code></pre></td></tr></table></figure><h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3. 环境搭建"></a>3. 环境搭建</h2><ol><li><p><strong>新建Maven项目</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220910114207.png" alt="QQ截图20220910114207"></p></li><li><p><strong>导入相关的pom依赖</strong></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ssmbuild<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ssmbuild Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet-jsp依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--lombok--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--静态资源导出问题--&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>配置maven资源过滤</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>建立基本结构和配置框架</strong></p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ApplicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="4-Mybatis层"><a href="#4-Mybatis层" class="headerlink" title="4. Mybatis层"></a>4. Mybatis层</h2><ol><li><p><strong>数据库配置文件</strong></p><p>database.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure></li><li><p><strong>IDEA连接数据库</strong></p></li><li><p><strong>编写MyBatis的核心配置文件</strong></p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置数据源，交给spring去做--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--标准的日志工厂实现--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.ssm.pojo&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/ssm/dao/BookMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>使用lombok插件，编写数据库对应的实体类Books</strong></p><p>Books.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ssm.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Books</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> bookID;<br>    <span class="hljs-keyword">private</span> String bookName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> bookCounts;<br>    <span class="hljs-keyword">private</span> String detail;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>编写Dao层的 Mapper接口</strong></p><p>BookMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ssm.dao;<br><br><span class="hljs-keyword">import</span> com.ssm.pojo.Books;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br>    <span class="hljs-comment">//增加一个Book</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Books books)</span>;<br><br>    <span class="hljs-comment">//根据id删除一个Book</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookID&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//更新Book</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Books books)</span>;<br><br>    <span class="hljs-comment">//根据id查询，返回一个Book</span><br>    Books <span class="hljs-title function_">queryBookById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookID&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//查询所有Book，返回list集合</span><br>    List&lt;Books&gt; <span class="hljs-title function_">queryAllBook</span><span class="hljs-params">()</span>;<br><br>    Books <span class="hljs-title function_">queryBookByName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookName&quot;)</span> String bookName)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>编写接口对应的 xml 文件</strong></p><p>BookMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace绑定一个对应的Mapper/Dao接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.ssm.dao.BookMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--增加一个Book--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        insert into books(bookName,bookCounts,detail)<br>        values(#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--根据id删除一个Book--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBookById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from books where bookID = #&#123;bookID&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--更新Book--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        update books set bookName=#&#123;bookName&#125;,bookCounts=#&#123;bookCounts&#125;,detail=#&#123;detail&#125;<br>        where bookID = #&#123;bookID&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--根据id查询，返回一个Book--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBookById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        select * from books where bookID = #&#123;bookID&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询全部Book--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAllBook&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        select * from books<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBookByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        select * from books where bookName = #&#123;bookName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>编写Service层的接口和实现类</strong></p><p>Service层的接口：BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ssm.service;<br><br><span class="hljs-keyword">import</span> com.ssm.pojo.Books;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-comment">//增加一个Book</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Books books)</span>;<br><br>    <span class="hljs-comment">//根据id删除一个Book</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//更新Book</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Books books)</span>;<br><br>    <span class="hljs-comment">//根据id查询，返回一个Book</span><br>    Books <span class="hljs-title function_">queryBookById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//查询全部Book，返回list集合</span><br>    List&lt;Books&gt; <span class="hljs-title function_">queryAllBook</span><span class="hljs-params">()</span>;<br><br>    Books <span class="hljs-title function_">queryBookByName</span><span class="hljs-params">(String bookName)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Service层的实现类：BookServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ssm.service;<br><br><span class="hljs-keyword">import</span> com.ssm.dao.BookMapper;<br><span class="hljs-keyword">import</span> com.ssm.pojo.Books;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-comment">//service层调dao层：组合Dao</span><br>    <span class="hljs-keyword">private</span> BookMapper bookMapper;<br>    <span class="hljs-comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookMapper</span><span class="hljs-params">(BookMapper bookMapper)</span>&#123;<br>        <span class="hljs-built_in">this</span>.bookMapper = bookMapper;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Books books)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookMapper.addBook(books);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookMapper.deleteBookById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Books books)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookMapper.updateBook(books);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Books <span class="hljs-title function_">queryBookById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryBookById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title function_">queryAllBook</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryAllBook();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Books <span class="hljs-title function_">queryBookByName</span><span class="hljs-params">(String bookName)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryBookByName(bookName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-Spring层"><a href="#5-Spring层" class="headerlink" title="5. Spring层"></a>5. Spring层</h2><ol><li><p><strong>配置Spring整合MyBatis</strong></p><p>数据源使用c3p0连接池</p></li><li><p><strong>编写Spring整合Mybatis的相关的配置文件</strong></p><p>spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">   https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.关联数据库属性文件：database.properties--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--2.数据库连接池--&gt;</span><br>    <span class="hljs-comment">&lt;!--DataSource：数据库连接池 c3p0 dbcp druid</span><br><span class="hljs-comment">        dbcp：半自动化操作，不能自动连接</span><br><span class="hljs-comment">        c3p0：自动化操作（自动的加载配置文件，并设置到对象里面）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置连接池属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><br><br>        <span class="hljs-comment">&lt;!--配置c3po连接池的私有属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--关闭后不自动commit--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--获取连接超时时间--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--当获取连接失败重试次数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--3.配置sqlSessionFactory对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数据库连接池--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--绑定Mybatis配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--4.配置扫描dao接口包，动态实现dao接口注入到Spring容器中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入sqlSessionFactory--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--给出需要扫描的dao接口包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.ssm.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Spring整合service层</strong></p><p>spring-service.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.扫描service相关的bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ssm.service&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--2.BookServiceImpl注入到IOC容器中：可以通过配置或者注解实现--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ssm.service.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--3.配置事物管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数据库连接池--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--4.aop事物支持：AOP事物横切--&gt;</span><br>    <span class="hljs-comment">&lt;!--note：除查询外所有的数据库操作都需要提交事物--&gt;</span><br>    <span class="hljs-comment">&lt;!--配置事物通知--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--给哪些方法配置事物--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置事物切入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.ssm.dao.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="6-SpringMVC层"><a href="#6-SpringMVC层" class="headerlink" title="6. SpringMVC层"></a>6. SpringMVC层</h2><h3 id="6-1-SpringMVC层配置"><a href="#6-1-SpringMVC层配置" class="headerlink" title="6.1 SpringMVC层配置"></a>6.1 SpringMVC层配置</h3><ol><li><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--1.注册DispatcherServlet SpringMVC核心：请求分发器，前端控制器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatchServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--关联一个Spring的配置文件：applicationContext.xml--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatchServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--2.配置encodingFilter：处理乱码问题--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--3.设置Session过期时间--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>spring-mvc.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置SpringMVC--&gt;</span><br>    <span class="hljs-comment">&lt;!--1.开启SpringMVC注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--2.静态资源过滤--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--3.扫描包：扫描web相关的bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ssm.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--4.视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Spring配置整合文件</strong></p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-dao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-service.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mvc.xml&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>项目配置文件结束！！！</p><h3 id="6-2-Controller层"><a href="#6-2-Controller层" class="headerlink" title="6.2 Controller层"></a>6.2 Controller层</h3><ol><li><p><strong>查询全部书籍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span>  <span class="hljs-comment">//使用注解自动装配</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-comment">//查询全部书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/allBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">list</span><span class="hljs-params">(Model model)</span>&#123;<br>        List&lt;Books&gt; list = bookService.queryAllBook();<br>        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>添加书籍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span>  <span class="hljs-comment">//使用注解自动装配</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br>    <br>    <span class="hljs-comment">//添加书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/toAddBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toAddPaper</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addBook&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/addBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addPaper</span><span class="hljs-params">(Books books)</span>&#123;<br>        System.out.println(books);<br>        bookService.addBook(books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>修改书籍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span>  <span class="hljs-comment">//使用注解自动装配</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br>    <br>    <span class="hljs-comment">//修改书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toUpdateBook</span><span class="hljs-params">(Model model,<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-type">Books</span> <span class="hljs-variable">books</span> <span class="hljs-operator">=</span> bookService.queryBookById(id);<br>        System.out.println(books);<br>        model.addAttribute(<span class="hljs-string">&quot;books&quot;</span>,books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;updateBook&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/updateBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Model model,Books book)</span>&#123;<br>        System.out.println(book);<br>        bookService.updateBook(book);<br>        <span class="hljs-type">Books</span> <span class="hljs-variable">books</span> <span class="hljs-operator">=</span> bookService.queryBookById(book.getBookID());<br>        model.addAttribute(<span class="hljs-string">&quot;books&quot;</span>,books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>删除书籍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span>  <span class="hljs-comment">//使用注解自动装配</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br>    <br>    <span class="hljs-comment">//删除书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bookId&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        bookService.deleteBookById(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>BookController类编写</strong></p><p>BookController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ssm.controller;<br><br><span class="hljs-keyword">import</span> com.ssm.pojo.Books;<br><span class="hljs-keyword">import</span> com.ssm.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-comment">//controller层调用service层</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span>  <span class="hljs-comment">//使用注解自动装配</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-comment">//查询全部书籍，并且返回到一个书籍展示页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/allBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">list</span><span class="hljs-params">(Model model)</span>&#123;<br>        List&lt;Books&gt; list = bookService.queryAllBook();<br>        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//跳转到增加书籍页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/toAddBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toAddPaper</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//添加书籍的请求</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/addBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(Books books)</span>&#123;<br>        bookService.addBook(books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;  <span class="hljs-comment">//重定向到我们的@RequestMapping(&quot;allBook&quot;)请求</span><br>    &#125;<br><br>    <span class="hljs-comment">//跳转到修改书籍页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toUpdatePaper</span><span class="hljs-params">(Model model,<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-type">Books</span> <span class="hljs-variable">books</span> <span class="hljs-operator">=</span> bookService.queryBookById(id);<br>        <span class="hljs-comment">//通过Model页面返回给前端页面</span><br>        model.addAttribute(<span class="hljs-string">&quot;QBook&quot;</span>,books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;updateBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//修改书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/updateBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Books books)</span>&#123;<br>        bookService.updateBook(books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//删除书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/deleteBook/&#123;bookId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bookId&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        bookService.deleteBookById(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//查询书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/queryBook&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryBook</span><span class="hljs-params">(String queryBookByName,Model model)</span>&#123;<br>        <span class="hljs-type">Books</span> <span class="hljs-variable">books</span> <span class="hljs-operator">=</span> bookService.queryBookByName(queryBookByName);<br>        List&lt;Books&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Books&gt;();<br>        list.add(books);<br><br>        <span class="hljs-comment">//当查询结果为null时</span><br>        <span class="hljs-keyword">if</span>(books == <span class="hljs-literal">null</span>)&#123;<br>            list = bookService.queryAllBook();<br>            model.addAttribute(<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;未查询到书籍&quot;</span>);<br>        &#125;<br><br>        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="6-3-视图层"><a href="#6-3-视图层" class="headerlink" title="6.3 视图层"></a>6.3 视图层</h3><ol><li><p><strong>编写首页</strong> </p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;首页&lt;/title&gt;<br>&lt;style&gt;<br>    a &#123;<br>            text-decoration: none;<br>            color: black;<br>            font-size: 18px;<br>        &#125;<br>        h3 &#123;<br>            width: 180px;<br>            height: 38px;<br>            margin: 100px auto;<br>            text-align: center;<br>            line-height: 38px;<br>            background: deepskyblue;<br>            border-radius: 4px;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;h3&gt;<br>    &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;进入书籍页面&lt;/a&gt;<br>&lt;/h3&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>书籍列表页面</strong></p><p>allbook.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;书籍列表&lt;/title&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;%--引入Bootstrap美化界面--%&gt;<br>    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div class=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;div class=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>            &lt;div class=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>                &lt;h1&gt;<br>                    &lt;small&gt;书籍列表 -- 显示所有书籍&lt;/small&gt;<br>                &lt;/h1&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;div class=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;col-md-4 column&quot;</span>&gt;<br>            &lt;%--toAddBook--%&gt;<br>            &lt;a class=<span class="hljs-string">&quot;btn btn-primary&quot;</span> href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;新增书籍&lt;/a&gt;<br>            &lt;%--显示全部书籍--%&gt;<br>            &lt;a class=<span class="hljs-string">&quot;btn btn-primary&quot;</span> href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;显示全部书籍&lt;/a&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;col-md-8 column&quot;</span>&gt;<br>             &lt;%--查询书籍--%&gt;<br>            &lt;form class=<span class="hljs-string">&quot;form-inline&quot;</span> action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/queryBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> style=<span class="hljs-string">&quot;float:right&quot;</span>&gt;<br>                &lt;span style=<span class="hljs-string">&quot;color:red; font-weight:bold&quot;</span>&gt;$&#123;error&#125;&lt;/span&gt;<br>                &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;queryBookByName&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> placeholder=<span class="hljs-string">&quot;请输出要查询书籍的名称&quot;</span>&gt;<br>                &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;查询&quot;</span> class=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;<br>            &lt;/form&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;div class=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>            &lt;table class=<span class="hljs-string">&quot;table table-hover table-striped&quot;</span>&gt;<br>                &lt;thead&gt;<br>                    &lt;tr&gt;<br>                        &lt;th&gt;书籍编号&lt;/th&gt;<br>                        &lt;th&gt;书籍名字&lt;/th&gt;<br>                        &lt;th&gt;书籍数量&lt;/th&gt;<br>                        &lt;th&gt;书籍详情&lt;/th&gt;<br>                        &lt;th&gt;操作&lt;/th&gt;<br>                    &lt;/tr&gt;<br>                &lt;/thead&gt;<br>                &lt;%--书籍从数据库中查询出来，从封装的list中遍历出来：forEach--%&gt;<br>                &lt;tbody&gt;<br>                    &lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;book&quot;</span> items=<span class="hljs-string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;<br>                        &lt;tr&gt;<br>                            &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;<br>                            &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;<br>                            &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;<br>                            &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;<br>                            &lt;td&gt;<br>                                &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.bookID&#125;&quot;</span>&gt;修改&lt;/a&gt;<br>                                &amp;nbsp; | &amp;nbsp;<br>                                &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/deleteBook/$&#123;book.bookID&#125;&quot;</span>&gt;删除&lt;/a&gt;<br>                            &lt;/td&gt;<br>                        &lt;/tr&gt;<br>                    &lt;/c:forEach&gt;<br>                &lt;/tbody&gt;<br>            &lt;/table&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>添加书籍页面</strong></p><p>addBook.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;新增书籍&lt;/title&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;%--引入Bootstrap美化界面--%&gt;<br>    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div class=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;div class=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>            &lt;div class=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>                &lt;h1&gt;<br>                    &lt;small&gt;新增书籍&lt;/small&gt;<br>                &lt;/h1&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label&gt;书籍名称：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> required&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label&gt;书籍数量：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookCounts&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> required&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label&gt;书籍描述：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;detail&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> required&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> value=<span class="hljs-string">&quot;添加&quot;</span>&gt;<br>        &lt;/div&gt;<br>    &lt;/form&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>修改书籍页面</strong></p><p>updateBook.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;修改书籍&lt;/title&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;%--引入Bootstrap美化界面--%&gt;<br>    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div class=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;div class=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>            &lt;div class=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>                &lt;h1&gt;<br>                    &lt;small&gt;修改书籍&lt;/small&gt;<br>                &lt;/h1&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        &lt;%--出现的问题：提交了修改的SQL请求，但是修改失败，初次考虑是事物未提交的问题，但事物配置完毕依旧失败--%&gt;<br>        &lt;%--查看SQL语句能否执行成功：SQL执行失败，修改未完成--%&gt;<br>        &lt;%--前端传递隐藏域--%&gt;<br>        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;bookID&quot;</span> value=<span class="hljs-string">&quot;$&#123;QBook.bookID&#125;&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label&gt;书籍名称：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> value=<span class="hljs-string">&quot;$&#123;QBook.bookName&#125;&quot;</span> required&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label&gt;书籍数量：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookCounts&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> value=<span class="hljs-string">&quot;$&#123;QBook.bookCounts&#125;&quot;</span> required&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label&gt;书籍描述：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;detail&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> value=<span class="hljs-string">&quot;$&#123;QBook.detail&#125;&quot;</span> required&gt;<br>        &lt;/div&gt;<br>        &lt;div class=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> class=<span class="hljs-string">&quot;form-control&quot;</span> value=<span class="hljs-string">&quot;修改&quot;</span>&gt;<br>        &lt;/div&gt;<br>    &lt;/form&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ol><p><strong>配置Tomcat运行测试</strong></p><h2 id="7-运行结果"><a href="#7-运行结果" class="headerlink" title="7. 运行结果"></a>7. 运行结果</h2><p><strong>首页：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E9%A6%96%E9%A1%B5.png" alt="首页"></p><p><strong>书籍列表：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E4%B9%A6%E7%B1%8D%E5%88%97%E8%A1%A8.png" alt="书籍列表"></p><p><strong>新增书籍：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E6%96%B0%E5%A2%9E%E4%B9%A6%E7%B1%8D.png" alt="新增书籍"></p><p><strong>修改书籍：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E4%BF%AE%E6%94%B9%E4%B9%A6%E7%B1%8D.png" alt="修改书籍"></p><p><strong>修改书籍后重定向：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E4%B9%A6%E7%B1%8D%E4%BF%AE%E6%94%B9%E5%90%8E%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="书籍修改后重定向"></p><p><strong>查询书籍：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E6%9F%A5%E8%AF%A2%E4%B9%A6%E7%B1%8D.png" alt="查询书籍"></p><p><strong>查询书籍未查到：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E6%9F%A5%E8%AF%A2%E4%B9%A6%E7%B1%8D%E6%9C%AA%E6%9F%A5%E5%88%B0.png" alt="查询书籍未查到"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2022九月刷题日记</title>
    <link href="/2022/09/02/LeetCode-2022%E4%B9%9D%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/09/02/LeetCode-2022%E4%B9%9D%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="LC-687-最长同值路径"><a href="#LC-687-最长同值路径" class="headerlink" title="LC 687.最长同值路径"></a>LC 687.最长同值路径</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个二叉树的 root ，返回最长的路径的长度 ，这个路径中的每个节点具有相同值 。这条路径可以经过也可以不经过根节点。</p><p>两个节点之间的路径长度 由它们之间的边数表示。</p><p><a href="https://leetcode.cn/problems/longest-univalue-path/">https://leetcode.cn/problems/longest-univalue-path/</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>Key Point：</strong>这道题是一道二叉树路径问题，最关键的点就是理解这道题是一个<strong>自下而上的dfs</strong>，不同于正常的自上而下的dfs。理解了这道题的自下而上递归就清晰了！</p><p>解题思路：深度优先搜索</p><blockquote><p>我们将二叉树看成一个有向图（从父结点指向子结点的边），定义同值有向路径为从某一结点出发，到达它的某一后代节点的路径，且经过的结点的值相同。最长同值路径长度必定为某一节点的左最长同值有向路径长度与右最长同值有向路径长度之和。</p><p>使用变量 res 保存最长同值路径长度。我们对根结点进行深度优先搜索，对于当前搜索的结点 root，我们分别获取它左结点的最长同值有向路径长度 left，右结点的最长同值有向路径长度 right。如果结点 root 的左结点非空且结点 root 的值与它的左结点的值相等，那么结点 root 的左最长同值有向路径长度 left1 = left+1，否则 left1=0；如果结点 root 的右结点非空且结点 root 的值与它的右结点的值相等，那么结点 root 的右最长同值有向路径长度 right1=right+1，否则 right1=0。令 res=max(res,left1+right1)，并且返回结点 root 对应的最长同值有向路径长度 max(left1,right1)。</p></blockquote><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestUnivaluePath</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> left = <span class="hljs-built_in">dfs</span>(root-&gt;left);<br>        <span class="hljs-type">int</span> right = <span class="hljs-built_in">dfs</span>(root-&gt;right);<br>        <span class="hljs-type">int</span> curleft = <span class="hljs-number">0</span>, curright = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(root-&gt;left &amp;&amp; root-&gt;val == root-&gt;left-&gt;val)&#123;<br>            curleft = left+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root-&gt;right &amp;&amp; root-&gt;val == root-&gt;right-&gt;val)&#123;<br>            curright = right+<span class="hljs-number">1</span>;<br>        &#125;<br>        ans = <span class="hljs-built_in">max</span>(ans,curleft+curright);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(curleft,curright);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-707-设计链表"><a href="#LC-707-设计链表" class="headerlink" title="LC 707. 设计链表"></a>LC 707. 设计链表</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p><p>在链表类中实现这些功能：</p><ul><li><p>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</p></li><li><p>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</p></li><li><p>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</p></li><li><p>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</p></li><li><p>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</p></li></ul><p>示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MyLinkedList</span> linkedList = new MyLinkedList();<br><span class="hljs-attribute">linkedList</span>.addAtHead(<span class="hljs-number">1</span>);<br><span class="hljs-attribute">linkedList</span>.addAtTail(<span class="hljs-number">3</span>);<br><span class="hljs-attribute">linkedList</span>.addAtIndex(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);   //链表变为<span class="hljs-number">1</span>-&gt; <span class="hljs-number">2</span>-&gt; <span class="hljs-number">3</span><br><span class="hljs-attribute">linkedList</span>.get(<span class="hljs-number">1</span>);            //返回<span class="hljs-number">2</span><br><span class="hljs-attribute">linkedList</span>.deleteAtIndex(<span class="hljs-number">1</span>);  //现在链表是<span class="hljs-number">1</span>-&gt; <span class="hljs-number">3</span><br><span class="hljs-attribute">linkedList</span>.get(<span class="hljs-number">1</span>);            //返回<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//定义链表节点结构体</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span>&#123;<br>        <span class="hljs-type">int</span> val;  <span class="hljs-comment">///节点的值</span><br>        ListNode* next;  <span class="hljs-comment">//节点的指针，指向下一个节点</span><br>        <span class="hljs-comment">//三个构造函数</span><br>        <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;  <span class="hljs-comment">//参数为空</span><br>        <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;  <span class="hljs-comment">//一个参数</span><br>        <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x,ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next)&#123;&#125;  <span class="hljs-comment">//两个参数</span><br>    &#125;;<br>    <span class="hljs-type">int</span> len;  <span class="hljs-comment">//链表长度</span><br>    ListNode* dummyNode;  <span class="hljs-comment">//定义虚拟头结点</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-built_in">MyLinkedList</span>() &#123;<br>        len = <span class="hljs-number">0</span>;  <span class="hljs-comment">//链表长度初始化为0</span><br>        dummyNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();  <span class="hljs-comment">//创建链表虚拟头节点</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt; len<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//所有无效返回-1</span><br>        &#125;<br>        ListNode* head = dummyNode-&gt;next;  <span class="hljs-comment">//头节点</span><br>        <span class="hljs-keyword">while</span>(index--)&#123;<br>            head = head-&gt;next;  <span class="hljs-comment">//找到第index个链表节点</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> head-&gt;val;  <span class="hljs-comment">//返回第index个链表节点的值</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        ListNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>        node-&gt;next = dummyNode-&gt;next;<br>        dummyNode-&gt;next = node;<br>        len++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        ListNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>        ListNode* cur = dummyNode;<br>        <span class="hljs-keyword">while</span>(cur-&gt;next)&#123;<br>            cur = cur-&gt;next;<br>        &#125;<br>        cur-&gt;next = node;<br>        len++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(val&lt;<span class="hljs-number">0</span> || val&gt;<span class="hljs-number">1000</span> || index&gt;len)&#123;<br>            <span class="hljs-keyword">return</span>;  <span class="hljs-comment">//val值或index值无效，直接返回</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(index &lt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">addAtHead</span>(val);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index == len)&#123;<br>            <span class="hljs-built_in">addAtTail</span>(val);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ListNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            ListNode* cur = dummyNode;<br>            <span class="hljs-keyword">while</span>(index--)&#123;    <span class="hljs-comment">//第index-1节点的位置</span><br>                cur = cur-&gt;next;<br>            &#125;<br>            node-&gt;next = cur-&gt;next;<br>            cur-&gt;next = node;<br>            len++;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt; len<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        ListNode* cur = dummyNode;<br>        ListNode* temp = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">while</span>(index--)&#123;<br>            cur = cur-&gt;next;<br>        &#125;<br>        temp = cur-&gt;next;<br>        cur-&gt;next = cur-&gt;next-&gt;next;<br>        <span class="hljs-keyword">delete</span> temp;<br>        len--;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MyLinkedList* obj = new MyLinkedList();</span><br><span class="hljs-comment"> * int param_1 = obj-&gt;get(index);</span><br><span class="hljs-comment"> * obj-&gt;addAtHead(val);</span><br><span class="hljs-comment"> * obj-&gt;addAtTail(val);</span><br><span class="hljs-comment"> * obj-&gt;addAtIndex(index,val);</span><br><span class="hljs-comment"> * obj-&gt;deleteAtIndex(index);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>有虚拟节点，有长度的详解版C++ AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Listnode</span>&#123;<span class="hljs-comment">//定义链表结点结构体</span><br>        <span class="hljs-type">int</span> val;<span class="hljs-comment">//结点的值val</span><br>        Listnode* next;<span class="hljs-comment">//结点的指针域next,指向下一个结点</span><br>        <span class="hljs-comment">//三个Listnode构造函数</span><br>        <span class="hljs-built_in">Listnode</span>():<span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<span class="hljs-comment">//参数为空</span><br>        <span class="hljs-built_in">Listnode</span>(<span class="hljs-type">int</span> v):<span class="hljs-built_in">val</span>(v),<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<span class="hljs-comment">//一个参数</span><br>        <span class="hljs-built_in">Listnode</span>(<span class="hljs-type">int</span> v,Listnode* n):<span class="hljs-built_in">val</span>(v),<span class="hljs-built_in">next</span>(n)&#123;&#125;<span class="hljs-comment">//两个参数</span><br>    &#125;;<br>    <span class="hljs-type">int</span> len;<span class="hljs-comment">//链表长度</span><br>    Listnode* dummyhead;<span class="hljs-comment">//链表虚拟头结点</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyLinkedList</span>() &#123;<span class="hljs-comment">//MyLinkedList构造函数</span><br>        len=<span class="hljs-number">0</span>;<span class="hljs-comment">//链表长度初始化为0</span><br>        dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Listnode</span>();<span class="hljs-comment">//创建链表虚拟头结点</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<span class="hljs-comment">//获取链表中第index个节点的值</span><br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>||index&gt;len<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//索引无效返回-1</span><br>        Listnode* head=dummyhead-&gt;next;<span class="hljs-comment">//dummyhead是虚拟头结点,而dummyhead-&gt;next是头结点</span><br>        <span class="hljs-keyword">while</span>(index--) head=head-&gt;next;<span class="hljs-comment">//找到第index个链表结点</span><br>        <span class="hljs-keyword">return</span> head-&gt;val;<span class="hljs-comment">//返回第index个链表结点的值val</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<span class="hljs-comment">//在链表的第一个元素之前添加一个值为val的节点</span><br>        <span class="hljs-keyword">if</span>(val&lt;<span class="hljs-number">0</span>||val&gt;<span class="hljs-number">1000</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//val值无效，直接返回</span><br>        Listnode* n=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Listnode</span>(val);<span class="hljs-comment">//新建值为val的链表结点n</span><br>        n-&gt;next=dummyhead-&gt;next;<span class="hljs-comment">//将新链表结点n插入头结点前,新结点的指针域next为头结点指针,即新结点n的next指针指向头结点</span><br>        dummyhead-&gt;next=n;<span class="hljs-comment">//虚拟头结点指针域next为新结点指针n,即虚拟头结点的next指针指向新结点n</span><br>        len++;<span class="hljs-comment">//链表长度加一</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<span class="hljs-comment">//将值为val的节点追加到链表的最后一个元素</span><br>        <span class="hljs-keyword">if</span>(val&lt;<span class="hljs-number">0</span>||val&gt;<span class="hljs-number">1000</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//val值无效，直接返回</span><br>        Listnode* n=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Listnode</span>(val),*cur=dummyhead;<span class="hljs-comment">//新建值为val的链表结点n和当前结点指针变量cur</span><br>        <span class="hljs-keyword">while</span>(cur-&gt;next) cur=cur-&gt;next;<span class="hljs-comment">//通过cur找到链表中最后一个结点</span><br>        cur-&gt;next=n;<span class="hljs-comment">//将新结点n插入链表末尾,即最后一个结点的指针域为新结点指针n</span><br>        len++;<span class="hljs-comment">//链表长度加一</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> </span>&#123;<span class="hljs-comment">//在链表中的第index个节点之前添加值为val的节点</span><br>        <span class="hljs-keyword">if</span>(val&lt;<span class="hljs-number">0</span>||val&gt;<span class="hljs-number">1000</span>||index&gt;len) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//val值或index值无效，直接返回</span><br>        <span class="hljs-keyword">if</span>(index&lt;=<span class="hljs-number">0</span>) <span class="hljs-built_in">addAtHead</span>(val);<span class="hljs-comment">//index&lt;=0时,在头部插入值为val的新结点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index==len) <span class="hljs-built_in">addAtTail</span>(val);<span class="hljs-comment">//index=len时,在尾部插入值为val的新结点</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            Listnode* n=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Listnode</span>(val),*cur=dummyhead;<span class="hljs-comment">//新建值为val的链表结点n和当前结点指针变量cur</span><br>            <span class="hljs-keyword">while</span>(index--) cur=cur-&gt;next;<span class="hljs-comment">//找到第index-1个链表结点</span><br>            n-&gt;next=cur-&gt;next;<span class="hljs-comment">//将新链表结点n插入第index个链表结点前,新结点的指针域next为第index个链表结点的指针域next,即新结点n的next指针指向第index个链表结点</span><br>            cur-&gt;next=n;<span class="hljs-comment">//第index个链表结点的指针域next为新结点指针n,即第index个链表结点的next指针指向新结点n</span><br>            len++;<span class="hljs-comment">//链表长度加一</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<span class="hljs-comment">//删除链表中的第index个节点</span><br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>||index&gt;len<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//index值无效，直接返回</span><br>        Listnode* cur=dummyhead,*t=<span class="hljs-literal">nullptr</span>;<span class="hljs-comment">//当前结点指针变量cur和临时结点t</span><br>        <span class="hljs-keyword">while</span>(index--) cur=cur-&gt;next;<span class="hljs-comment">//找到第index-1个结点</span><br>        t=cur-&gt;next;<span class="hljs-comment">//t保存要删除的第index个结点</span><br>        cur-&gt;next=t-&gt;next;<span class="hljs-comment">//第index-1个结点的指针域next为第index个结点的指针域next,即删除第index个结点</span><br>        <span class="hljs-keyword">delete</span> t;<span class="hljs-comment">//释放第index个结点的空间</span><br>        len--;<span class="hljs-comment">//链表长度减一</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM-Spring MVC</title>
    <link href="/2022/09/02/SSM-SpringMVC/"/>
    <url>/2022/09/02/SSM-SpringMVC/</url>
    
    <content type="html"><![CDATA[<p><strong>SpringMVC官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></strong></p><h1 id="1-回顾MVC"><a href="#1-回顾MVC" class="headerlink" title="1. 回顾MVC"></a>1. 回顾MVC</h1><h2 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1 什么是MVC"></a>1.1 什么是MVC</h2><ul><li>MVC是模型（Model）、视图（View）、控制器（Controller）的简写，是一种软件设计规范。 </li><li>是将业务逻辑、数据、显示分离的方法来组织代码。 </li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。 </li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或 JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao）和服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。 </p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。 </p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型 数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/SpringMVC-001.jpg" alt="SpringMVC-001"></p><h2 id="1-2-Model1时代"><a href="#1-2-Model1时代" class="headerlink" title="1.2 Model1时代"></a>1.2 Model1时代</h2><p><strong>JSP：本质就是一个Servlet</strong></p><ul><li>在web早期的开发中，通常采用的都是Model1。 </li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p>Model1优点：架构简单，比较适合小型项目开发</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护</p><h2 id="1-3-Model2时代"><a href="#1-3-Model2时代" class="headerlink" title="1.3 Model2时代"></a>1.3 Model2时代</h2><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型</strong>。</p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong> </p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。 Model2消除了Model1的缺点。</p><h2 id="1-4-回顾Servlet"><a href="#1-4-回顾Servlet" class="headerlink" title="1.4 回顾Servlet"></a>1.4 回顾Servlet</h2><ol><li><p>新建一个Maven工程当做父工程，在 pom.xml 中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>建立一个 web 子模块</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220902165900.png" alt="QQ截图20220902165900"></p></li><li><p>编写一个Servlet类，用来处理用户的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现Servlet接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取前端参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;method&quot;</span>);<br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;add&quot;</span>))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了add方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;delete&quot;</span>))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了delete方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.调用业务层</span><br><br>        <span class="hljs-comment">//3.视图转发或者重定向</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;HelloServlet&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>在web.xml中注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>ssm.study.servlet.HelloServlet <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat，并启动测试</p><ul><li>localhost:8080/user?method=add </li><li>localhost:8080/user?method=delete</li></ul></li></ol><p><strong>MVC框架要做哪些事情</strong> </p><ol><li>将url映射到java类或java类的方法</li><li>封装用户提交的数据</li><li>处理请求–调用相关的业务处理–封装响应数据</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据</li></ol><p><strong>说明：</strong> </p><p>常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等</p><h1 id="2-什么是SpringMVC"><a href="#2-什么是SpringMVC" class="headerlink" title="2. 什么是SpringMVC"></a>2. 什么是SpringMVC</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p><img src="https://img.yiqiangshiyia.cn/blog/SpringMVC-004.jpg" alt="SpringMVC-004"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。 </p><p><a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">SpringMVC官方文档</a></p><p><strong>为什么要学习SpringMVC？</strong> </p><p>Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活 </li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。 </p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的 用户可以采用基于注解形式进行开发，十分简洁</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于 配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦 截器 等等……所以我们要学习</p><h2 id="2-2-中心控制器"><a href="#2-2-中心控制器" class="headerlink" title="2.2 中心控制器"></a>2.2 中心控制器</h2><p>​        Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。 </p><p>​        Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他 功能，DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)。</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/SpringMVC-005.jpg" alt="SpringMVC-005"></p><p>SpringMVC的原理如下图所示： </p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制 器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图 渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://img.yiqiangshiyia.cn/blog/SpringMVC-006.jpg" alt="SpringMVC-006"></p><h2 id="2-3-SpringMVC执行原理"><a href="#2-3-SpringMVC执行原理" class="headerlink" title="2.3 SpringMVC执行原理"></a>2.3 SpringMVC执行原理</h2><p><img src="https://img.yiqiangshiyia.cn/blog/SpringMVC-007.jpg" alt="SpringMVC-007"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。 </p><p><strong>简要分析执行流程</strong> </p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求， DispatcherServlet接收请求并拦截请求</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a> 如上url拆分成三部分： <a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a> SpringMVC部署在服务器上的web站点 hello表示控制器 通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</p></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据 请求url查找Handler</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器 为：hello</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler</p></li><li><p>Handler让具体的Controller执行</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图</p></li><li><p>最终视图呈现给用户</p></li></ol><h1 id="3-HelloSpringMVC"><a href="#3-HelloSpringMVC" class="headerlink" title="3. HelloSpringMVC"></a>3. HelloSpringMVC</h1><h2 id="3-1-配置版"><a href="#3-1-配置版" class="headerlink" title="3.1 配置版"></a>3.1 配置版</h2><ol><li><p>新建一个Moudle，SpringMVC-03 ，添加web的支持</p></li><li><p>确定导入了SpringMVC 的依赖</p></li><li><p>配置web.xml ， 注册DispatcherServlet</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--1.注册DispatcherServlet SpringMVC核心：请求分发器，前端控制器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--关联一个Spring的配置文件:springmvc-servlet.xml--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>  <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写SpringMVC 的 配置文件</p><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--处理器映射器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--处理器适配器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView</span><br><span class="hljs-comment">    1.获取了ModelAndView的数据</span><br><span class="hljs-comment">    2.解析了ModelAndView的视图名字</span><br><span class="hljs-comment">    3.拼接视图名字，找到对应视图  hello</span><br><span class="hljs-comment">    4.将数据渲染到这个视图上</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Handler--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.controller.HelloController&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加处理映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加处理器适配器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写需要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个 ModelAndView，装数据，封视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">//注意：这里我们先导入Controller接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> &#123;<br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//ModelAndView 模型和视图</span><br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br><br>        <span class="hljs-comment">//业务代码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HelloSpringMVC&quot;</span>;<br>        <span class="hljs-comment">//封装对象，放在ModelAndView中</span><br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,result);<br><br>        <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span><br>        mv.setViewName(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span><br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Handler--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.controller.HelloController&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;SpringMVC&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat 启动测试</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220908181057.png" alt="QQ截图20220908181057"></p></li></ol><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包</li><li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖</li><li>重启Tomcat 即可解决</li></ol><h2 id="3-2-注解版"><a href="#3-2-注解版" class="headerlink" title="3.2 注解版"></a>3.2 注解版</h2><ol><li><p> 新建一个Moudle，SpringMVC-03 ，添加web的支持</p></li><li><p>由于Maven可能存在资源过滤的问题，完善配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等</p></li><li><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--1.注册DispatcherServlet SpringMVC核心：请求分发器，前端控制器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--关联一个Spring的配置文件:springmvc-servlet.xml--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--启动级别-1：数字越小，启动越早--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>  <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>  <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加Spring MVC配置文件</p><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--自动扫描包，让指定包下的注解生效,由IOC容器统一管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;ssm.study.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--静态资源过滤：让Spring MVC不处理静态资源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br><span class="hljs-comment">&lt;!--MVC的注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个 目录下的文件，客户端不能直接访问</p></li><li><p>创建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span>  <span class="hljs-comment">//多级路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>  <span class="hljs-comment">//真实访问地址：项目名/HelloController/hello</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span>&#123;<br>        <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,SpringMVC&quot;</span>);<br>        <span class="hljs-comment">//web-inf/jsp/hello.jsp</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;  <span class="hljs-comment">//返回的字符串就是视图的名字，会被视图解析器处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该 是/HelloController/hello</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/hello.jsp</li></ul></li><li><p>创建视图层</p><p>在WEB-INF/ jsp目录中创建hello.jsp ，视图可以直接取出并展示从Controller带回的信息；可以通过EL表示取出Model中存放的值，或者对象</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;SpringMVC&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat运行</p><p>配置Tomcat ，开启服务器 ，访问对应的请求路径</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220908175948.png" alt="QQ截图20220908175948"></p></li></ol><h2 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3 小结"></a>3.3 小结</h2><p>SpringMVC实现步骤：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试</li></ol><p>使用springMVC必须配置的三大件： <strong>处理器映射器、处理器适配器、视图解析器</strong> </p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解</strong>驱动即可，而省去了大段的xml配置</p><h1 id="4-Controller及RestFul"><a href="#4-Controller及RestFul" class="headerlink" title="4. Controller及RestFul"></a>4. Controller及RestFul</h1><h2 id="4-1-控制器Controller"><a href="#4-1-控制器Controller" class="headerlink" title="4.1 控制器Controller"></a>4.1 控制器Controller</h2><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现</li><li>控制器负责解析用户的请求并将其转换为一个模型</li><li>在Spring MVC中一个控制器类可以包含多个方法 </li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><h2 id="4-2-实现Controller的方式"><a href="#4-2-实现Controller的方式" class="headerlink" title="4.2 实现Controller的方式"></a>4.2 实现Controller的方式</h2><h3 id="4-2-1-接口实现"><a href="#4-2-1-接口实现" class="headerlink" title="4.2.1 接口实现"></a>4.2.1 接口实现</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现该接口的类获得控制器功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Controller</span> &#123;<br><span class="hljs-comment">//处理请求且返回一个模型与视图对象</span><br>ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong>（详见3.1配置版）</p><ol><li><p>新建一个Moudle</p></li><li><p>编写一个Controller类，ControllerTest1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义控制器，实现Controller接口，重写方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//返回一个模型视图对象</span><br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Test1Controller&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/t1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.controller.ControllerTest1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>$&#123;msg&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat运行测试，这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名</p></li></ol><p><strong>说明：</strong></p><ul><li>说明： 实现接口Controller定义控制器是较老的办法</li><li>缺点：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦</li></ul><h3 id="4-2-2-注解实现"><a href="#4-2-2-注解实现" class="headerlink" title="4..2.2 注解实现"></a>4..2.2 注解实现</h3><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器</p><ul><li>在Spring IOC时还提到了另外3个注解：<strong>详见<a href="https://yiqiangshiyia.cn/2022/08/08/SSM-Spring/#8-Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91">SSM-Spring</a>：8.4衍生注解</strong></li></ul></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;ssm.study.controller&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>增加一个ControllerTest2类，使用注解实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <span class="hljs-comment">//代表这个类会被Spring接管</span><br><span class="hljs-comment">//被这个注解的类中的所有方法，如果返回值是String，并且有具体的页面可以跳转，那么就会被视图解析器解析</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerTest2</span>&#123;<br><span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span>  <span class="hljs-comment">//映射访问路径</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(Model model)</span>&#123;<br><span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;ControllerTest2&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;  <span class="hljs-comment">//返回视图位置：web-inf/jsp/test.jsp</span><br>&#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/t3&quot;)</span>  <span class="hljs-comment">//映射访问路径</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(Model model)</span>&#123;<br><span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;ControllerTest2&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;  <span class="hljs-comment">//返回视图位置：web-inf/jsp/test.jsp</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>运行tomcat测试</p><p>访问：<a href="http://localhost:8080/SpringMVC-03/t2">http://localhost:8080/SpringMVC-03/t2</a> 和 <a href="http://localhost:8080/SpringMVC-03/t3%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E4%B8%A4%E4%B8%AA%E8%AF%B7%E6%B1%82%E9%83%BD%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AA%E8%A7%86%E5%9B%BE%EF%BC%8C%E4%BD%86%E6%98%AF%E9%A1%B5%E9%9D%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%EF%BC%8C%E4%BB%8E%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%87%BA%E8%A7%86%E5%9B%BE%E6%98%AF%E8%A2%AB%E5%A4%8D%E7%94%A8%E7%9A%84%EF%BC%8C%E8%80%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8E%E8%A7%86%E5%9B%BE%E4%B9%8B%E9%97%B4%E6%98%AF%E5%BC%B1%E5%81%B6%E5%90%88%E5%85%B3%E7%B3%BB">http://localhost:8080/SpringMVC-03/t3，可以发现两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系</a></p></li><li><p>说明：注解是平时使用最多的方式</p></li></ul><h2 id="4-4-RequestMapping"><a href="#4-4-RequestMapping" class="headerlink" title="4.4 @RequestMapping"></a>4.4 @RequestMapping</h2><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径</p></li><li><p>只注解在方法上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动Tomcat访问路径：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%90%8D/h1">http://localhost:8080/项目名/h1</a></p></li><li><p>同时注解在类与方法上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动Tomcat访问路径：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%90%8D/admin/h1%EF%BC%8C%E9%9C%80%E8%A6%81%E5%85%88%E6%8C%87%E5%AE%9A%E7%B1%BB%E7%9A%84%E8%B7%AF%E5%BE%84%E5%86%8D%E6%8C%87%E5%AE%9A%E6%96%B9%E6%B3%95%E7%9A%84%E8%B7%AF%E5%BE%84">http://localhost:8080/项目名/admin/h1，需要先指定类的路径再指定方法的路径</a></p></li></ul><h2 id="4-5-RestFul-风格"><a href="#4-5-RestFul-风格" class="headerlink" title="4.5 RestFul 风格"></a>4.5 RestFul 风格</h2><p><strong>概念：</strong>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。 </p><p><strong>功能</strong></p><ul><li><p>资源：互联网所有的事物都可以被抽象为资源 </p></li><li><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。 </p></li><li><p>分别对应添加、删除、修改、查询。 </p></li></ul><p><strong>传统方式操作资源：</strong>通过不同的参数来实现不同的效果，方法单一，post 和 get </p><ul><li><p><a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a>  —-  查询 GET  </p></li><li><p><a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a>  —-  新增 POST </p></li><li><p><a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a>  —-  更新 POST  </p></li><li><p><a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a>  —-  删除 GET或POST </p></li></ul><p><strong>使用RESTful操作资源</strong> ： 可以通过不同的请求方式来实现不同的效果，如下：请求地址一样，但是功能可以不同</p><ul><li><p><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a>  —-  查询 GET  </p></li><li><p><a href="http://127.0.0.1/item">http://127.0.0.1/item</a>  —-  新增 POST  </p></li><li><p><a href="http://127.0.0.1/item">http://127.0.0.1/item</a>  —-  更新 PUT  </p></li><li><p><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a>  —-  删除 DELETE </p></li></ul><p><strong>测试：</strong> </p><ol><li><p>在新建一个类 RestFulController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestFulController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URL模板变量上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestFulController</span> &#123;<br><br>    <span class="hljs-comment">//原来的：http://localhost:8080/SpringMVC-03/commit?a=1&amp;b=2</span><br>    <span class="hljs-comment">//RestFul风格：http://localhost:8080/SpringMVC-03/commit/1/2</span><br><br>    <span class="hljs-meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span>  <span class="hljs-comment">//映射访问路径</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> p2, Model model)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> p1+p2;<br>        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;  <span class="hljs-comment">//返回视图位置</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>启动Tomcat访问：<a href="http://localhost:8080/SpringMVC-03/commit/1/2">http://localhost:8080/SpringMVC-03/commit/1/2</a></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220908180314.png" alt="QQ截图20220908180314"></p><p>思考：使用路径变量的好处？ </p><ul><li>使路径变得更加简洁； 获得参数更加方便，框架会自动进行类型转换。 </li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这 里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</li></ul></li><li><p>修改对应的参数类型，再次测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span>  <span class="hljs-comment">//映射访问路径</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> p1, <span class="hljs-meta">@PathVariable</span> String p2, Model model)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> p1+p2;<br><span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;  <span class="hljs-comment">//返回视图位置</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>使用method属性指定请求类型</strong> </p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等 </p><p>测试：</p><ul><li><p>增加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是POST请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index2</span><span class="hljs-params">(Model model)</span>&#123;<br>model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用浏览器地址栏进行访问默认是Get请求，会报错405</p></li><li><p>如果将POST修改为GET则正常了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是Get请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index2</span><span class="hljs-params">(Model model)</span>&#123;<br>model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>小结：</strong> </p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以 及 PATCH</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@PatchMapping</span><br></code></pre></td></tr></table></figure><p>@GetMapping 是一个组合注解</p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式</p><h1 id="5-结果跳转方式"><a href="#5-结果跳转方式" class="headerlink" title="5. 结果跳转方式"></a>5. 结果跳转方式</h1><h2 id="5-1-ModelAndView"><a href="#5-1-ModelAndView" class="headerlink" title="5.1 ModelAndView"></a>5.1 ModelAndView</h2><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> &#123;<br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//返回一个模型视图对象</span><br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);<br>mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-keyword">return</span> mv;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-ServletAPI"><a href="#5-2-ServletAPI" class="headerlink" title="5.2 ServletAPI"></a>5.2 ServletAPI</h2><p>通过设置ServletAPI , 不需要视图解析器</p><ol><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultGo</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t1&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        rsp.getWriter().println(<span class="hljs-string">&quot;Hello,Spring BY servlet API&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t2&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        rsp.sendRedirect(<span class="hljs-string">&quot;/index.jsp&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t3&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//转发</span><br>        req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;/result/t3&quot;</span>);<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-SpringMVC"><a href="#5-3-SpringMVC" class="headerlink" title="5.3 SpringMVC"></a>5.3 SpringMVC</h2><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSpringMVC</span> &#123;<br><span class="hljs-meta">@RequestMapping(&quot;/rsm/t1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//转发</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/index.jsp&quot;</span>;<br>&#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm/t2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//转发二</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/index.jsp&quot;</span>;<br>&#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm/t3&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//重定向</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新路径</p><p>可以重定向到另外一个请求实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSpringMVC2</span> &#123;<br><span class="hljs-meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//转发</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//重定向</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br><span class="hljs-comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-数据处理"><a href="#6-数据处理" class="headerlink" title="6. 数据处理"></a>6. 数据处理</h1><h2 id="6-1-处理提交数据"><a href="#6-1-处理提交数据" class="headerlink" title="6.1 处理提交数据"></a>6.1 处理提交数据</h2><ol><li><p><strong>提交的域名称和处理方法的参数名一致</strong> </p><p>提交数据：<a href="http://localhost:8080/SpringMVC-03/user/t1/?name=linmuchun">http://localhost:8080/SpringMVC-03/user/t1/?name=linmuchun</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">(String name, Model model)</span>&#123;<br>        <span class="hljs-comment">//1.接收前端参数</span><br>        System.out.println(<span class="hljs-string">&quot;前端接收的参数为：&quot;</span>+name);<br><br>        <span class="hljs-comment">//2.将返回的结果传递给前端</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);<br><br>        <span class="hljs-comment">//3.视图跳转</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p>启动Tomcat访问：<a href="http://localhost:8080/SpringMVC-03/user/t1/?name=linmuchun">http://localhost:8080/SpringMVC-03/user/t1/?name=linmuchun</a></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220908190842.png" alt="QQ截图20220908190842"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220908191125.png" alt="QQ截图20220908191125"></p></li><li><p><strong>提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据：<a href="http://localhost:8080/SpringMVC-03/user/t1/?username=linmuchun">http://localhost:8080/SpringMVC-03/user/t1/?username=linmuchun</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span>&#123;<br>        <span class="hljs-comment">//1.接收前端参数</span><br>        System.out.println(<span class="hljs-string">&quot;前端接收的参数为：&quot;</span>+name);<br><br>        <span class="hljs-comment">//2.将返回的结果传递给前端</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);<br><br>        <span class="hljs-comment">//3.视图跳转</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台输出：前端接收的参数为：linmuchun</p></li><li><p><strong>提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-comment">//构造</span><br><span class="hljs-comment">//get/set</span><br><span class="hljs-comment">//tostring()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>提交数据：<a href="http://localhost:8080/SpringMVC-03/user/t1/?name=linmuchun&amp;id=1&amp;age=18">http://localhost:8080/SpringMVC-03/user/t1/?name=linmuchun&amp;id=1&amp;age=18</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">user</span><span class="hljs-params">(User user)</span>&#123;<br>System.out.println(user);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台输出 : User { id=1, name=’linmuchun’, age=18 }</p><p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null</p></li></ol><h2 id="6-2-数据显示到前端"><a href="#6-2-数据显示到前端" class="headerlink" title="6.2 数据显示到前端"></a>6.2 数据显示到前端</h2><p><strong>方式1：通过ModelAndView</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> &#123;<br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//返回一个模型视图对象</span><br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);<br>mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-keyword">return</span> mv;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方式2：通过ModelMap</strong> </p><p>ModelMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span>&#123;<br><span class="hljs-comment">//封装要显示到视图中的数据</span><br>model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);  <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span><br>System.out.println(name);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方式3：通过Model</strong> </p><p>Model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/ct2/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span>&#123;<br><span class="hljs-comment">//封装要显示到视图中的数据</span><br>model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);  <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span><br>System.out.println(name);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>三种数据显示到前端的对比：</strong></p><ul><li>Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解</li></ul><ul><li>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性</li></ul><ul><li>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转</li></ul><h2 id="6-4-乱码问题"><a href="#6-4-乱码问题" class="headerlink" title="6.4 乱码问题"></a>6.4 乱码问题</h2><p>测试步骤：</p><ol><li><p>我们可以在首页编写一个提交的表单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/e/t&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>后台编写对应的处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Encoding</span> &#123;<br><span class="hljs-meta">@RequestMapping(&quot;/e/t&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(Model model,String name)</span>&#123;<br>model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);  <span class="hljs-comment">//获取表单提交的值</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;  <span class="hljs-comment">//跳转到test页面显示输入的值</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输入中文测试，发现乱码</p></li></ol><p><strong>解决方法：</strong>以前乱码问题通过过滤器解决，而SpringMVC给我们提供了一个过滤器，可以在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置SpringMVC的乱码过滤--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是我们发现，有些极端情况下，这个过滤器对get的支持不好</p><p><strong>处理方法 :</strong></p><ol><li><p>修改tomcat配置文件：设置编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span> <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>自定义过滤器</p></li></ol><h1 id="8-JSON"><a href="#8-JSON" class="headerlink" title="8. JSON"></a>8. JSON</h1><h2 id="8-1-什么是JSON"><a href="#8-1-什么是JSON" class="headerlink" title="8.1 什么是JSON"></a>8.1 什么是JSON</h2><blockquote><p>JSON（<a href="https://baike.baidu.com/item/JavaScript?fromModule=lemma_inlink">JavaScript</a> Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于 <a href="https://baike.baidu.com/item/ECMAScript?fromModule=lemma_inlink">ECMAScript</a>（European Computer Manufacturers Association, 欧洲计算机协会制定的js规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。 </li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。 </li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 </li></ul><p>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式： </p><ul><li>对象表示为键值对，数据由逗号分隔 </li><li>花括号保存对象 </li><li>方括号保存数组 </li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;林慕椿&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>JSON 和 JavaScript 对象的关系可以这么理解：</p><ul><li><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">var obj = <span class="hljs-punctuation">&#123;</span>a<span class="hljs-punctuation">:</span> &#x27;Hello&#x27;<span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">:</span> &#x27;World&#x27;<span class="hljs-punctuation">&#125;</span>;  <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span><br>var json = &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hello&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;World&quot;</span><span class="hljs-punctuation">&#125;</span>&#x27;;  <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>JSON 和 JavaScript 对象互转</strong></p><ul><li><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">var obj = JSON.parse(&#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hello&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;World&quot;</span><span class="hljs-punctuation">&#125;</span>&#x27;);<br><span class="hljs-comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">var json = JSON.stringify(<span class="hljs-punctuation">&#123;</span>a<span class="hljs-punctuation">:</span> &#x27;Hello&#x27;<span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">:</span> &#x27;World&#x27;<span class="hljs-punctuation">&#125;</span>);<br><span class="hljs-comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>对象互转代码测试：</strong></p><ol><li><p>在web目录下新建一个 json-01.html，编写测试内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jsonTest-01<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//编写一个JavaScript对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> user = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;林慕椿&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>:<span class="hljs-string">&quot;女&quot;</span></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//将js对象转换为json对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//将json对象转换为js对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(json);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在IDEA中使用浏览器打开，查看控制台输出</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220909161107.png" alt="QQ截图20220909161107"></p></li></ol><h2 id="8-2-Jackson"><a href="#8-2-Jackson" class="headerlink" title="8.2 Jackson"></a>8.2 Jackson</h2><p>Jackson应该是目前比较好的json解析工具了，当然Jjson解析工具不止这一个，比如还有阿里巴巴的 fastjson等</p><p><strong>环境配置：</strong></p><ul><li><p>使用Jackson需要导入它的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>导入lombok依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置SpringMVC需要的配置</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--1.注册DispatcherServlet SpringMVC核心：请求分发器，前端控制器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--关联一个Spring的配置文件:springmvc-servlet.xml--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--启动级别-1：数字越小，启动越早--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>  <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>  <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--配置SpringMVC的乱码过滤--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--自动扫描包，让指定包下的注解生效,由IOC容器统一管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;ssm.study.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--静态资源过滤：让Spring MVC不处理静态资源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--MVC的注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个User的实体类，然后去编写测试类Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需要导入lombok</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写一个Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/json1&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">//有这个注解就不会走视图解析器，会直接返回一个字符串</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-comment">//创建一个对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat，启动测试</p><p>访问：<a href="http://localhost:8080/SpringMVC-03/json1">http://localhost:8080/SpringMVC-03/json1</a> </p><p>浏览器输出：</p><blockquote><p>{“name”:”???”,”age”:18,”sex”:”?”}</p></blockquote></li></ul><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型，通过@RequestMaping的produces属性来实现，修改下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//produces:指定响应体返回类型和编码</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span><br></code></pre></td></tr></table></figure><p>测试，浏览器输出：</p><blockquote><p>{“name”:”林慕椿”,”age”:18,”sex”:”女”}</p></blockquote><h3 id="8-2-1-代码优化"><a href="#8-2-1-代码优化" class="headerlink" title="8.2.1 代码优化"></a>8.2.1 代码优化</h3><p><strong>乱码统一解决</strong> </p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>返回json字符串统一解决</strong> </p><p>在类上直接使用 @RestController ，这样里面所有的方法都只会返回 json 字符串了，不用再每一 个都添加@ResponseBody，在前后端分离开发中，一般都使用 @RestController 更加便捷</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/json1&quot;)</span>  <span class="hljs-comment">//produces:指定响应体返回类型和编码</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-comment">//创建一个对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-2-测试集合输出"><a href="#8-2-2-测试集合输出" class="headerlink" title="8.2.2 测试集合输出"></a>8.2.2 测试集合输出</h3><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/json2&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿01&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿02&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿03&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        userList.add(user1);<br>        userList.add(user2);<br>        userList.add(user3);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(userList);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>[{“name”:”林慕椿01”,”age”:18,”sex”:”女”},{“name”:”林慕椿02”,”age”:18,”sex”:”女”},{“name”:”林慕椿03”,”age”:18,”sex”:”女”}]</p></blockquote><h3 id="8-2-3-输出时间对象"><a href="#8-2-3-输出时间对象" class="headerlink" title="8.2.3 输出时间对象"></a>8.2.3 输出时间对象</h3><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json3&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <br>    <span class="hljs-comment">//创建时间一个对象，java.util.Date</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(date);<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式，自定义时间格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/json3&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>        <span class="hljs-comment">//不使用时间戳的定义方式</span><br>        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//自定义日期的格式</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        mapper.setDateFormat(sdf);<br><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>        <span class="hljs-comment">//ObjectMapper 时间解析后的格式默认为：TimeStamp时间戳</span><br>        <span class="hljs-keyword">return</span> mapper.writeValueAsString(date);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>“2022-09-09 19:22:00”</p></blockquote><h2 id="8-3-抽取为工具类JsonUtils"><a href="#8-3-抽取为工具类JsonUtils" class="headerlink" title="8.3 抽取为工具类JsonUtils"></a>8.3 抽取为工具类JsonUtils</h2><p>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getJson</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">return</span> getJson(object,<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getJson</span><span class="hljs-params">(Object object,String dateFormat)</span> &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-comment">//不使用时间差的方式</span><br>        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<br>        <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//自定义日期格式对象</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(dateFormat);<br>        <span class="hljs-comment">//指定日期格式</span><br>        mapper.setDateFormat(sdf);<br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>        e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用工具类，代码更加简洁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json5&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JsonUtils.getJson(date);<br>    <span class="hljs-keyword">return</span> json;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-4-FastJson"><a href="#8-4-FastJson" class="headerlink" title="8.4 FastJson"></a>8.4 FastJson</h2><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法 很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>fastjson 三个主要的类：</p><ul><li><p><strong>JSONObject</strong> 代表 json 对象</p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。 </li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用 诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map 接口并调用接口中的方法完成的。</li></ul></li><li><p><strong>JSONArray</strong> 代表 json 对象数组</p><ul><li>内部是有List接口中的方法来完成操作的。 </li></ul></li><li><p><strong>JSON</strong> 代表 JSONObject和JSONArray的转化</p><ul><li>JSON类源码分析与使用 </li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul></li></ul><p>代码测试，新建一个FastJsonDemo类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastJsonDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个对象</span><br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿01&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿02&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿03&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        userList.add(user1);<br>        userList.add(user2);<br>        userList.add(user3);<br><br>        System.out.println(<span class="hljs-string">&quot;Java对象转JSON字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> JSON.toJSONString(userList);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> JSON.toJSONString(user1);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);<br><br>        System.out.println(<span class="hljs-string">&quot;JSON字符串转Java对象&quot;</span>);<br>        User jp_user1=JSON.parseObject(str2,User.class);<br>        System.out.println(<span class="hljs-string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);<br><br>        System.out.println(<span class="hljs-string">&quot;Java对象转JSON对象&quot;</span>);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject1</span> <span class="hljs-operator">=</span> (JSONObject) JSON.toJSON(user2);<br>        System.out.println(<span class="hljs-string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;JSON对象转Java对象&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">to_java_user</span> <span class="hljs-operator">=</span> JSON.toJavaObject(jsonObject1, User.class);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8-Ajax"><a href="#8-Ajax" class="headerlink" title="8. Ajax"></a>8. Ajax</h1><h2 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h2><blockquote><p>Ajax即Asynchronous Javascript And XML（异步JavaScript和<a href="https://baike.baidu.com/item/XML/86251?fromModule=lemma_inlink">XML</a>）在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法，包括: <a href="https://baike.baidu.com/item/HTML/97049?fromModule=lemma_inlink">HTML</a> 或 <a href="https://baike.baidu.com/item/XHTML/316621?fromModule=lemma_inlink">XHTML</a>, CSS, <a href="https://baike.baidu.com/item/JavaScript/321142?fromModule=lemma_inlink">JavaScript</a>, <a href="https://baike.baidu.com/item/DOM/50288?fromModule=lemma_inlink">DOM</a>, XML, <a href="https://baike.baidu.com/item/XSLT/1330564?fromModule=lemma_inlink">XSLT</a>, 以及最重要的<a href="https://baike.baidu.com/item/XMLHttpRequest/6788735?fromModule=lemma_inlink">XMLHttpRequest</a>。使用Ajax技术网页应用能够快速地将增量更新呈现在<a href="https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/6582461?fromModule=lemma_inlink">用户界面</a>上，而不需要重载（刷新）整个页面，这使得程序能够更快地回应用户的操作。</p></blockquote><ul><li>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。 </li><li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 </li><li>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技 术。 </li><li>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。 </li><li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时， JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。 </li><li>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。 </li><li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。 </li><li>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</li></ul><p>利用Ajax可以做：</p><ul><li>注册时，输入用户名自动检测用户是否已经存在。 </li><li>登陆时，提示用户名密码错误 </li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li></ul><h2 id="8-2-jQuery-ajax"><a href="#8-2-jQuery-ajax" class="headerlink" title="8.2 jQuery.ajax"></a>8.2 jQuery.ajax</h2><blockquote><p>jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。$.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该函数，除非你需要操作不常用的选项，以获得更多的灵活性。</p></blockquote><ul><li>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。 </li><li>jQuery 提供多个与 AJAX 有关的方法。 </li><li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、 XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。 </li><li>jQuery 不是生产者，而是大自然搬运工。 </li><li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jQuery.ajax(...)</span><br><span class="hljs-keyword"></span>部分参数：<br>    url：请求地址<br>    type：请求方式，GET、POST（<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>之后用method）<br>    headers：请求头<br>    data：要发送的数据<br>    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)<br>    async：是否异步<br>    timeout：设置请求超时时间（毫秒）<br>    <span class="hljs-keyword">beforeSend：发送请求前执行的函数(全局)</span><br><span class="hljs-keyword"></span>    complete：完成之后执行的回调函数(全局)<br>    success：成功之后执行的回调函数(全局)<br>    error：失败之后执行的回调函数(全局)<br>    accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型<br>    dataType：将服务器端返回的数据转换成指定类型<br>    <span class="hljs-string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式<br>    <span class="hljs-string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式<br>    <span class="hljs-string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含<br>    <span class="hljs-keyword">JavaScript标签，则会尝试去执行。</span><br><span class="hljs-keyword"></span>    <span class="hljs-string">&quot;script&quot;</span>: 尝试将返回值当作<span class="hljs-keyword">JavaScript去执行，然后再将服务器端返回的内容转换成</span><br><span class="hljs-keyword"></span>    普通文本格式<br>    <span class="hljs-string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的<span class="hljs-keyword">JavaScript对象</span><br><span class="hljs-keyword"></span>    <span class="hljs-string">&quot;jsonp&quot;</span>: <span class="hljs-keyword">JSONP </span>格式使用 <span class="hljs-keyword">JSONP </span>形式调用函数时，如 <span class="hljs-string">&quot;myurl?callback=?&quot;</span><br>    <span class="hljs-keyword">jQuery </span>将自动替换 ? 为正确的函数名，以执行回调函数<br></code></pre></td></tr></table></figure><p>测试：使用最原始的HttpServletResponse处理（最简单、最通用）</p><ol><li><p>配置web.xml 和 springmvc的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">    https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">    https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;ssm.study.controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个AjaxController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/a1&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ajax1</span><span class="hljs-params">(String name , HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;<br>        response.getWriter().print(<span class="hljs-string">&quot;true&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        response.getWriter().print(<span class="hljs-string">&quot;false&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>导入jquery</p><p>可以使用在线的CDN，也可以下载导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写index.jsp测试</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;$Title$&lt;/title&gt;<br>&lt;%--&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;--%&gt;<br>        &lt;script src=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery 3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>        &lt;script&gt;<br>            function <span class="hljs-title function_">a1</span><span class="hljs-params">()</span>&#123;<br>                $.post(&#123;<br>                    url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,<br>                    data:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#txtName&quot;</span>).val()&#125;,<br>                    success:function (data,status) &#123;<br>                        alert(data);<br>                        alert(status);<br>                &#125;<br>                &#125;);<br>            &#125;<br>&lt;/script&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br><br>    &lt;%--onblur：失去焦点触发事件--%&gt;<br>用户名:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;txtName&quot;</span> onblur=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>启动tomcat测试</p><p>打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个 ajax的请求，是后台返回给我们的结果。</p></li></ol><p><strong>Springmvc实现</strong></p><ol><li><p>实体类user</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取一个集合对象，展示到前端页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a2&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">ajax2</span><span class="hljs-params">()</span>&#123;<br>List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;User&gt;();<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林落雪&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;林南芊&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;女&quot;</span>));<br>    <span class="hljs-keyword">return</span> list;  <span class="hljs-comment">//由于@RestController注解，将list转成json格式返回</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前端页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;input type=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;btn&quot;</span> value=<span class="hljs-string">&quot;获取数据&quot;</span>/&gt;<br>&lt;table width=<span class="hljs-string">&quot;80%&quot;</span> align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;姓名&lt;/td&gt;<br>        &lt;td&gt;年龄&lt;/td&gt;<br>        &lt;td&gt;性别&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;tbody id=<span class="hljs-string">&quot;content&quot;</span>&gt;<br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br><br>&lt;script src=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    $(function () &#123;<br>        $(<span class="hljs-string">&quot;#btn&quot;</span>).click(function () &#123;<br>          $.post(<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,function (data) &#123;<br>                console.log(data)<br>                <span class="hljs-keyword">var</span> html=<span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;data.length ; i++) &#123;<br>                    html+= <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span> +<br>                    <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +<br>                    <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +<br>                    <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +<br>                    <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span><br>            &#125;<br>            $(<span class="hljs-string">&quot;#content&quot;</span>).html(html);<br>            &#125;);<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>成功实现了数据回显</p></li></ol><h2 id="8-3-注册提示效果"><a href="#8-3-注册提示效果" class="headerlink" title="8.3 注册提示效果"></a>8.3 注册提示效果</h2><p>优化测试：注册时，注册输入框后面出现实时提示</p><ol><li><p>写一个Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a3&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">ajax3</span><span class="hljs-params">(String name,String pwd)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//模拟数据库中存在数据</span><br>    <span class="hljs-keyword">if</span> (name!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;<br>        msg = <span class="hljs-string">&quot;OK&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>        msg = <span class="hljs-string">&quot;用户名输入错误&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pwd!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;123456&quot;</span>.equals(pwd))&#123;<br>        msg = <span class="hljs-string">&quot;OK&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>        msg = <span class="hljs-string">&quot;密码输入有误&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> msg; <span class="hljs-comment">//由于@RestController注解，将msg转成json格式返回</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前端页面</p><p>login.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;ajax&lt;/title&gt;<br>&lt;script src=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br><br>        function <span class="hljs-title function_">a1</span><span class="hljs-params">()</span>&#123;<br>            $.post(&#123;<br>                url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,<br>                data:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#name&quot;</span>).val()&#125;,<br>                    success:function (data) &#123;<br>                <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">&#x27;OK&#x27;</span>)&#123;<br>                $(<span class="hljs-string">&quot;#userInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                $(<span class="hljs-string">&quot;#userInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);<br>                &#125;<br>                $(<span class="hljs-string">&quot;#userInfo&quot;</span>).html(data);<br>                &#125;<br>            &#125;);<br>        &#125;<br>function <span class="hljs-title function_">a2</span><span class="hljs-params">()</span>&#123;<br>        $.post(&#123;<br>            url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,<br>                data:&#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:$(<span class="hljs-string">&quot;#pwd&quot;</span>).val()&#125;,<br>                success:function (data) &#123;<br>                <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">&#x27;OK&#x27;</span>)&#123;<br>                $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);<br>                &#125;<br>                $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).html(data);<br>                &#125;<br>            &#125;);<br>        &#125;<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;p&gt;<br>    用户名:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;name&quot;</span> onblur=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;<br>    &lt;span id=<span class="hljs-string">&quot;userInfo&quot;</span>&gt;&lt;/span&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>    密码:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;pwd&quot;</span> onblur=<span class="hljs-string">&quot;a2()&quot;</span>/&gt;<br>    &lt;span id=<span class="hljs-string">&quot;pwdInfo&quot;</span>&gt;&lt;/span&gt;<br>&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>记得处理json乱码问题</p><p>测试一下效果，动态请求响应，局部刷新，就是如此</p><p><img src="https://img.yiqiangshiyia.cn/blog/SpringMVC-026.jpg" alt="SpringMVC-026"></p></li></ol><h2 id="8-4-获取baidu接口Demo"><a href="#8-4-获取baidu接口Demo" class="headerlink" title="8.4 获取baidu接口Demo"></a>8.4 获取baidu接口Demo</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!DOCTYPE HTML&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>    &lt;title&gt;JSONP百度搜索&lt;/title&gt;<br>    &lt;style&gt;<br>        #q&#123;<br>            width: 500px;<br>            height: 30px;<br>            border:1px solid #ddd;<br>            line-height: 30px;<br>            display: block;<br>            margin: <span class="hljs-number">0</span> auto;<br>            padding: <span class="hljs-number">0</span> 10px;<br>            font-size: 14px;<br>        &#125;<br>        #ul&#123;<br>            width: 520px;<br>            list-style: none;<br>            margin: <span class="hljs-number">0</span> auto;<br>            padding: <span class="hljs-number">0</span>;<br>            border:1px solid #ddd;<br>            margin-top: -1px;<br>            display: none;<br>        &#125;<br>        #ul li&#123;<br>            line-height: 30px;<br>            padding: <span class="hljs-number">0</span> 10px;<br>        &#125;<br>        #ul li:hover&#123;<br>            background-color: #f60;<br>            color: #fff;<br>        &#125;<br>    &lt;/style&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 2.步骤二</span><br>        <span class="hljs-comment">// 定义demo函数 (分析接口、数据)</span><br>        function <span class="hljs-title function_">demo</span><span class="hljs-params">(data)</span>&#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">Ul</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>            <span class="hljs-type">var</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-comment">// 如果搜索数据存在 把内容添加进去</span><br>            <span class="hljs-keyword">if</span> (data.s.length) &#123;<br>                <span class="hljs-comment">// 隐藏掉的ul显示出来</span><br>                Ul.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>                <span class="hljs-comment">// 搜索到的数据循环追加到li里</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;data.s.length;i++)&#123;<br>                    html += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span>+data.s[i]+<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;<br>                &#125;<br>                <span class="hljs-comment">// 循环的li写入ul</span><br>                Ul.innerHTML = html;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 1.步骤一</span><br>        window.onload = function()&#123;<br>            <span class="hljs-comment">// 获取输入框和ul</span><br>            <span class="hljs-type">var</span> <span class="hljs-variable">Q</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&#x27;q&#x27;</span>);<br>            <span class="hljs-type">var</span> <span class="hljs-variable">Ul</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>            <span class="hljs-comment">// 事件鼠标抬起时候</span><br>            Q.onkeyup = function()&#123;<br>                <span class="hljs-comment">// 如果输入框不等于空</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                    <span class="hljs-comment">// 创建标签</span><br>                    <span class="hljs-type">var</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> document.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>                    <span class="hljs-comment">//给定要跨域的地址 赋值给src</span><br>                    <span class="hljs-comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span><br>                    script.src = <span class="hljs-string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span>+<span class="hljs-built_in">this</span>.value+<span class="hljs-string">&#x27;&amp;cb=demo&#x27;</span>;<br>                    <span class="hljs-comment">// 将组合好的带src的script标签追加到body里</span><br>                    document.body.appendChild(script);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;q&quot;</span> /&gt;<br>&lt;ul id=<span class="hljs-string">&quot;ul&quot;</span>&gt;<br>&lt;/ul&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="9-拦截器"><a href="#9-拦截器" class="headerlink" title="9. 拦截器"></a>9. 拦截器</h1><h2 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h2><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。 </p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。 </p><p><strong>过滤器</strong> </p><ul><li>servlet规范中的一部分，任何java web工程都可以使用 、</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截 </li></ul><p><strong>拦截器</strong> </p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用 </li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><h2 id="9-2-自定义拦截器"><a href="#9-2-自定义拦截器" class="headerlink" title="9.2 自定义拦截器"></a>9.2 自定义拦截器</h2><p>那如何实现拦截器呢？ </p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><ol><li><p>新建一个Moudule ， springmvc-07-Interceptor ， 添加web支持</p></li><li><p>配置web.xml 和 springmvc-servlet.xml 文件</p></li><li><p>编写一个拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">//在请求处理的方法之前执行</span><br>    <span class="hljs-comment">//如果返回true执行下一个拦截器</span><br>    <span class="hljs-comment">//如果返回false就不执行下一个拦截器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse, Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    System.out.println(<span class="hljs-string">&quot;处理前-----&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//在请求处理方法执行之后执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    System.out.println(<span class="hljs-string">&quot;处理后----&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//在dispatcherServlet处理后执行,做清理工作.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    System.out.println(<span class="hljs-string">&quot;清理----&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--/** 包括路径及其子路径--&gt;</span><br>        <span class="hljs-comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截-</span><br><span class="hljs-comment">        -&gt;</span><br><span class="hljs-comment">        &lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--bean配置的就是拦截器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个Controller，接收请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试拦截器的控制器</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/interceptor&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testFunction</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;控制器中的方法执行了&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前端 index.js</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;</span>&gt;拦截器测试&lt;/a&gt;<br></code></pre></td></tr></table></figure></li><li><p>启动tomcat 测试</p></li></ol><h2 id="9-3-验证用户是否登录-认证用户"><a href="#9-3-验证用户是否登录-认证用户" class="headerlink" title="9.3 验证用户是否登录 (认证用户)"></a>9.3 验证用户是否登录 (认证用户)</h2><p>实现思路：</p><ol><li>有一个登陆页面，需要写一个controller访问页面。</li><li>登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确， 向session中写入用户信息。返回登陆成功。</li><li>拦截用户请求，判断用户是否登陆。如果用户已经登陆，放行；如果用户未登陆，跳转到登陆页面</li></ol><p>实现步骤：</p><ol><li><p>编写一个登陆页面 login.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>    <br>&lt;h1&gt;登录页面&lt;/h1&gt;<br>&lt;hr&gt;<br>    <br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt; &lt;br&gt;<br>    密码： &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span>&gt; &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>编写一个Controller处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-comment">//跳转到登陆页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/jumplogin&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">jumpLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//跳转到成功页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/jumpSuccess&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">jumpSuccess</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//登陆提交</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(HttpSession session, String username, String pwd)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 向session记录用户身份信息</span><br>        System.out.println(<span class="hljs-string">&quot;接收前端===&quot;</span>+username);<br>        session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//退出登陆</span><br>    <span class="hljs-meta">@RequestMapping(&quot;logout&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">logout</span><span class="hljs-params">(HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// session 过期</span><br>        session.invalidate();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写一个登陆成功的页面 success.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    <br>&lt;h1&gt;登录成功页面&lt;/h1&gt;<br>&lt;hr&gt;<br>    <br>$&#123;user&#125;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;注销&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;    <br></code></pre></td></tr></table></figure></li><li><p>在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>    &lt;title&gt;$Title$&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>    &lt;h1&gt;首页&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;%--登录--%&gt;<br>    &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumplogin&quot;</span>&gt;登录&lt;/a&gt;<br>    &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumpSuccess&quot;</span>&gt;成功页面&lt;/a&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>编写用户登录拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> ServletException,IOException &#123;<br>    <br>        <span class="hljs-comment">// 如果是登陆页面则放行</span><br>        System.out.println(<span class="hljs-string">&quot;uri: &quot;</span> + request.getRequestURI());<br>        <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">&quot;login&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    <br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>    <br>        <span class="hljs-comment">// 如果用户已登陆也放行</span><br>        <span class="hljs-keyword">if</span>(session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 用户没有登陆跳转到登陆页面</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在Springmvc的配置文件中注册拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginInterceptor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.interceptor.LoginInterceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再次重启Tomcat测试</p></li></ol><h1 id="10-文件上传和下载"><a href="#10-文件上传和下载" class="headerlink" title="10. 文件上传和下载"></a>10. 文件上传和下载</h1><h2 id="10-1-准备工作"><a href="#10-1-准备工作" class="headerlink" title="10.1 准备工作"></a>10.1 准备工作</h2><p>文件上传是项目开发中最常见的功能之一，springMVC 可以很好的支持文件上传，但是SpringMVC上 下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring 的文件上传功能，则需要在上下文中配置MultipartResolver。 </p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为 multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong> </p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编 码方式的表单会将表单域中的值处理成 URL 编码方式。 </li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文 件域指定文件的内容也封装到请求参数中，不会对字符编码。 </li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation 发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。 </p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。 </li><li>而Spring MVC则提供了更简单的封装。 </li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。 </li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类： CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><h2 id="10-2-文件上传"><a href="#10-2-文件上传" class="headerlink" title="10.2 文件上传"></a>10.2 文件上传</h2><ol><li><p>入文件上传的jar包，commons-fileupload，Maven会自动帮我们导入他的依赖包 commonsio包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--servlet-api导入高版本的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置bean：multipartResolver</p><p>这个bena的id必须为：multipartResolver，否则上传文件会报400的错误</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CommonsMultipartFile 的常用方法： </p><ul><li>String getOriginalFilename()：获取上传文件的原名 </li><li>InputStream getInputStream()：获取文件流 </li><li>void transferTo(File dest)：将上传文件保存到一个目录文件中，去实际测试一下</li></ul></li><li><p>编写前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;<br>    <span class="hljs-comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><br>    <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uploadFileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <br>        <span class="hljs-comment">//如果文件名为空，直接回到首页！</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(uploadFileName))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件名 : &quot;</span>+uploadFileName);<br>        <br>        <span class="hljs-comment">//上传路径保存设置</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>        <span class="hljs-comment">//如果路径不存在，创建一个</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>        realPath.mkdir();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br>        <br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> file.getInputStream(); <span class="hljs-comment">//文件输入流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span><br>        <br>        <span class="hljs-comment">//读取写出</span><br>        <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>        os.write(buffer,<span class="hljs-number">0</span>,len);<br>        os.flush();<br>        &#125;<br>        os.close();<br>        is.close();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试上传文件</p></li></ol><p><strong>采用file.Transto 来保存上传的文件</strong></p><ol><li><p>编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 采用file.Transto 来保存上传的文件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">fileUpload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//上传路径保存设置</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>    <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>    realPath.mkdir();<br>    &#125;<br>    <span class="hljs-comment">//上传文件地址</span><br>    System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br>    <br>    <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br>    file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath +<span class="hljs-string">&quot;/&quot;</span>+ file.getOriginalFilename()));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前端表单提交地址修改</p></li><li><p>访问提交测试</p></li></ol><h2 id="10-3-文件下载"><a href="#10-3-文件下载" class="headerlink" title="10.3 文件下载"></a>10.3 文件下载</h2><p>文件下载步骤：</p><ol><li>设置 response 响应头</li><li>读取文件 – InputStream</li><li>写出文件 – OutputStream</li><li>执行操作</li><li>关闭流 （先开后关）</li></ol><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/download&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">downloads</span><span class="hljs-params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//要下载的图片地址</span><br>    <span class="hljs-type">String</span>  <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>    <span class="hljs-type">String</span>  <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;基础语法.jpg&quot;</span>;<br>    <span class="hljs-comment">//1、设置response 响应头</span><br>    response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span><br>    response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//字符编码</span><br>    response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>); <span class="hljs-comment">//二进制传输数据</span><br>    <span class="hljs-comment">//设置响应头</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<br>            <span class="hljs-string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path,fileName);<br>    <span class="hljs-comment">//2、 读取文件--输入流</span><br>    InputStream input=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>    <span class="hljs-comment">//3、 写出文件--输出流</span><br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>    <span class="hljs-type">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//4、执行写出操作</span><br>    <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>)&#123;<br>        out.write(buff, <span class="hljs-number">0</span>, index);<br>        out.flush();<br>    &#125;<br>    out.close();<br>    input.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;/download&quot;</span>&gt;点击下载&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>测试</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>SpringMVC</tag>
      
      <tag>JSON</tag>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM-Spring</title>
    <link href="/2022/08/27/SSM-Spring/"/>
    <url>/2022/08/27/SSM-Spring/</url>
    
    <content type="html"><![CDATA[<p><strong>Spring官方网站：<a href="https://spring.io/">https://spring.io/</a></strong></p><p><strong>Spring Framework Documentation 5.3.22：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">https://docs.spring.io/spring-framework/docs/current/reference/html/</a></strong></p><p><strong>Spring Framework 中文文档：<a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#validation">https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#validation</a></strong></p><h1 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1. Spring概述"></a>1. Spring概述</h1><p><img src="https://img.yiqiangshiyia.cn/blog/spring001.jpg" alt="spring001"></p><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><blockquote><p>​        Spring框架是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81/114160">开放源代码</a>的<a href="https://baike.baidu.com/item/J2EE/110838">J2EE</a>应用程序框架，由[Rod Johnson](<a href="https://baike.baidu.com/item/Rod">https://baike.baidu.com/item/Rod</a> Johnson/1423612)发起，是针对bean的生命周期进行管理的轻量级容器（lightweight container）。 Spring解决了开发者在J2EE开发中遇到的许多常见的问题，提供了功能强大IOC、<a href="https://baike.baidu.com/item/AOP/1332219">AOP</a>及Web MVC等功能。Spring可以单独应用于构筑应用程序，也可以和Struts、Webwork、Tapestry等众多Web框架组合使用，并且可以与 Swing等<a href="https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/2331979">桌面应用程序</a>AP组合。因此， Spring不仅仅能应用于J2EE应用程序之中，也可以应用于桌面应用程序以及小应用程序之中。Spring框架主要由七部分组成，分别是 Spring Core、 Spring AOP、 Spring ORM、 Spring DAO、Spring Context、 Spring Web和 Spring Web MVC。</p><p>​        Spring框架是由于<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/3448966">软件开发</a>的复杂性而创建的。Spring使用的是基本的<a href="https://baike.baidu.com/item/JavaBean/529577">JavaBean</a>来完成以前只可能由<a href="https://baike.baidu.com/item/EJB/144195">EJB</a>完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</p></blockquote><p><strong>SSH：</strong>Struct2 + Spring + Hibernate（全自动）</p><p><strong>SSM：</strong>SpringMVC + Spring + MyBatis（半自动 SQL更灵活）</p><ul><li><p><strong>官网 :</strong> <a href="http://spring.io/">http://spring.io/</a> </p></li><li><p><strong>官方下载地址 :</strong> <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a> </p></li><li><p><strong>GitHub :</strong> <a href="https://github.com/spring-projects">https://github.com/spring-projects</a></p></li></ul><h2 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h2><ul><li>Spring是一个开源免费的框架（容器）</li><li>Spring是一个轻量级的框架，非侵入式的框架（引入Spring不会对原来项目产生影响）</li><li><strong>特性：控制反转 IOC , 面向切面 AOP</strong> </li><li>对事物的支持 , 对框架的支持</li></ul><p>一句话概括：<strong>Spring是一个轻量级的控制反转(IOC)和面向切面(AOP)的容器（框架）</strong></p><h2 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h2><p><img src="https://img.yiqiangshiyia.cn/blog/spring002.jpg" alt="spring002"></p><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式</p><p><img src="https://img.yiqiangshiyia.cn/blog/spring003.jpg" alt="spring003"></p><p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下： </p><ul><li><strong>核心容器：</strong>核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory ，它是工厂模式的实现。 BeanFactory 使用控制反转（IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。 </li><li><strong>Spring 上下文：</strong>Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。 </li><li><strong>Spring AOP：</strong>通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以 将声明性事务管理集成到应用程序中。 </li><li><strong>Spring DAO：</strong>JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异 常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。 </li><li><strong>Spring ORM：</strong>Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包 括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结 构。 </li><li><strong>Spring Web 模块：</strong>Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提 供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请 求以及将请求参数绑定到域对象的工作。 </li><li><strong>Spring MVC 框架：</strong>MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li></ul><h2 id="1-4-拓展"><a href="#1-4-拓展" class="headerlink" title="1.4 拓展"></a>1.4 拓展</h2><p><strong>Spring Boot与Spring Cloud</strong> </p><ul><li>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务</li><li>Spring Cloud是基于Spring Boot实现的</li><li>Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架</li><li>Spring Boot使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置 , Spring Cloud很大的一部分是基于Spring Boot来实现，Spring Boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring Boot，属于依赖的关系</li><li>SpringBoot在SpringClound中起到了承上启下的作用，如果你要学习SpringCloud必须要学习 SpringBoot</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/spring004.jpg" alt="spring004"></p><h1 id="2-IOC基础"><a href="#2-IOC基础" class="headerlink" title="2. IOC基础"></a>2. IOC基础</h1><p>新建一个空白的maven项目</p><h2 id="2-1-分析实现"><a href="#2-1-分析实现" class="headerlink" title="2.1 分析实现"></a>2.1 分析实现</h2><p>用我们原来的方式写一段代码</p><ol><li>先写一个UserDao接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>再去写Dao的实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;获取用户数据&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>然后去写UserService的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>最后写Service的实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>userDao.getUser();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">UserService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>service.getUser();<br>&#125;<br></code></pre></td></tr></table></figure><p>这是原来的方式，那现在修改一下，把Userdao的实现类增加一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoMySqlImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;MySql获取用户数据&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们要去使用MySql的话，我们就需要去service实现类里面修改对应的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoMySqlImpl</span>();<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>userDao.getUser();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设再增加一个Userdao的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoOracleImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Oracle获取用户数据&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么要使用Oracle，又需要去service实现类里面修改对应的实现。假设这种需求非常大，这种方式就根本不适用了，每次变动都需要修改大量代码，这种设计的耦合性太高</p><p><strong>解决方法：</strong></p><p>可以在需要用到他的地方，不去实现它，而是留出一个接口，利用set方法</p><p>修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">private</span> UserDao userDao;<br><span class="hljs-comment">// 利用set实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br><span class="hljs-built_in">this</span>.userDao = userDao;<br>&#125;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>userDao.getUser();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>service.setUserDao( <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoMySqlImpl</span>() );<br>service.getUser();<br><span class="hljs-comment">//那我们现在又想用Oracle去实现呢</span><br>service.setUserDao( <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoOracleImpl</span>() );<br>service.getUser();<br>&#125;<br></code></pre></td></tr></table></figure><p>这样发生了根本性的变化，之前所有东西都是由程序去控制创建的，而现在由我们自行控制创建对象，把主动权交给了调用者，程序不用去管怎么创建和实现，只负责提供一个接口</p><p>这种思想从本质上解决了问题，程序员不用再去管理对象的创建看，更多的去关注业务的实现，程序耦合性大大降低，这就是 IOC 的原型</p><h2 id="2-2-IOC本质"><a href="#2-2-IOC本质" class="headerlink" title="2.2 IOC本质"></a>2.2 IOC本质</h2><p><strong>控制反转IOC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IOC的一种方法</strong>，也有人认 为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系 完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，所谓控制反转就是：获得依赖对象的方式反转了。</p><p><img src="https://img.yiqiangshiyia.cn/blog/spring005.jpg" alt="spring005"></p><p><strong>IoC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。 </p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。</p><p><img src="https://img.yiqiangshiyia.cn/blog/spring006.jpg" alt="spring006"></p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为 一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。 </p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现 控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h1 id="3-HelloSpring"><a href="#3-HelloSpring" class="headerlink" title="3. HelloSpring"></a>3. HelloSpring</h1><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220827185751.png" alt="QQ截图20220827185751"></p><h2 id="3-1-导入jar包"><a href="#3-1-导入jar包" class="headerlink" title="3.1 导入jar包"></a>3.1 导入jar包</h2><p>注 : spring 需要导入commons-logging进行日志记录，利用maven，会自动下载对应的依赖项</p><p>pom.xml 中导入 Spring 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-2-编写代码"><a href="#3-2-编写代码" class="headerlink" title="3.2 编写代码"></a>3.2 编写代码</h2><ol><li>编写一个Hello实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStr</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;str=&#x27;&quot;</span> + str + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>编写Spring配置文件  ApplicationContext.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--使用Spring来创建对象，在Spring这些都称为Bean--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    原来：</span><br><span class="hljs-comment">        类型 变量名 = new 变量名();    Hello hello = new Hello();</span><br><span class="hljs-comment">    Spring中：</span><br><span class="hljs-comment">        id = 变量名</span><br><span class="hljs-comment">        class = new 的对象</span><br><span class="hljs-comment">        property 相当于给对象中的属性设置了一个值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> ssm.study.pojo.Hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-comment">//获取Spring的ApplicationContext对象，拿到Spring的容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//我们的对象现在都在Spring中管理了，我们要使用直接去里面取出来就可以了</span><br>        <span class="hljs-type">Hello</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Hello)context.getBean(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(hello.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-思考"><a href="#3-3-思考" class="headerlink" title="3.3 思考"></a>3.3 思考</h2><p>Hello 对象是谁创建的？  hello 对象是由Spring创建的</p><p>Hello 对象的属性是怎么设置的？  hello 对象的属性是由Spring容器设置的</p><p>这个过程就叫控制反转 : </p><ul><li>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的 </li><li>反转 : 程序本身不创建对象 , 而变成被动的接收对象</li></ul><p>依赖注入 : 就是利用set方法来进行注入的</p><p><strong>IOC是一种编程思想，由主动的编程变成被动的接收</strong> </p><h2 id="3-4-修改案例一"><a href="#3-4-修改案例一" class="headerlink" title="3.4 修改案例一"></a>3.4 修改案例一</h2><p>在案例一中， 新增一个Spring配置文件 ApplicationContext.xml 实现动态接收</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MysqlImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.dao.UserDaoMySqlImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;OracleImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.dao.UserDaoOracleImpl&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.service.UserServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">ref：引用Spring容器中已经创建好的对象（另外一个bean）</span><br><span class="hljs-comment">value：具体的值，基本数据类型</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;OracleImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br><span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">serviceImpl</span> <span class="hljs-operator">=</span> (UserServiceImpl)context.getBean(<span class="hljs-string">&quot;ServiceImpl&quot;</span>);<br>serviceImpl.getUser();<br>&#125;<br></code></pre></td></tr></table></figure><p>学习Spring之后，彻底不用在程序中去改动了，要实现不同的操作，只需要在xml配置文件中进行修改，IOC：对象由Spring来创建、管理、装配</p><h1 id="4-IOC创建对象方式"><a href="#4-IOC创建对象方式" class="headerlink" title="4. IOC创建对象方式"></a>4. IOC创建对象方式</h1><h2 id="4-1-通过无参构造方法来创建"><a href="#4-1-通过无参构造方法来创建" class="headerlink" title="4.1 通过无参构造方法来创建"></a>4.1 通过无参构造方法来创建</h2><ol><li>User.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <br><span class="hljs-keyword">private</span> String name;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;user无参构造方法&quot;</span>);<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+ name );<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>ApplicationContext.xml</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>&lt;bean id=<span class="hljs-string">&quot;user&quot;</span> class=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span>&gt;<br>&lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;<br>&lt;/bean&gt;<br>        <br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br><span class="hljs-comment">//在执行getBean的时候, user已经创建好了 , 通过无参构造</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-comment">//调用对象的方法 .</span><br>user.show();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果可以发现，在调用show方法之前，User对象已经通过无参构造初始化了</p><h2 id="4-2-通过有参构造方法来创建"><a href="#4-2-通过有参构造方法来创建" class="headerlink" title="4.2 通过有参构造方法来创建"></a>4.2 通过有参构造方法来创建</h2><ol><li>UserT . java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserT</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserT</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+ name );<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>ApplicationContext.xml 有三种方式编写</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 第一种根据index参数下标设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.UserT&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- index指构造方法 , 下标从0开始 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 第二种根据参数名字设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.UserT&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- name指参数名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.UserT&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testT</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br><span class="hljs-type">UserT</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (UserT) context.getBean(<span class="hljs-string">&quot;userT&quot;</span>);<br>user.show();<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：在配置文件加载的时候，其中管理的对象都已经初始化了</p><h1 id="5-Spring配置"><a href="#5-Spring配置" class="headerlink" title="5. Spring配置"></a>5. Spring配置</h1><h2 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h2><p>alias 设置别名，为bean设置别名，可以设置多个别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置别名：在获取Bean的时候可以使用别名获取--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;userNew&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-2-Bean配置"><a href="#5-2-Bean配置" class="headerlink" title="5.2 Bean配置"></a>5.2 Bean配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--bean就是java对象,由Spring创建和管理--&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">id：bean的唯一标识符，也就相当于new的对象名</span><br><span class="hljs-comment">class：bean对象所对应的全限定名：包名+类型</span><br><span class="hljs-comment">name：也是别名，而且name可以同时取多个别名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserT&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user,u2;u3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Hello&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h2><p>import，一般用于团队开发使用，他可以将多个配置文件导入合并为一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;&#123;path&#125;/beans.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-依赖注入（DI）"><a href="#6-依赖注入（DI）" class="headerlink" title="6. 依赖注入（DI）"></a>6. 依赖注入（DI）</h1><ul><li>依赖注入（Dependency Injection, DI）</li><li>依赖：指Bean对象的创建依赖于容器，Bean对象的依赖资源</li><li>注入：指Bean对象所依赖的资源，由容器来设置和装配</li></ul><h2 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h2><p>见IOC创建对象的两种方式……</p><h2 id="6-2-set注入-重点"><a href="#6-2-set注入-重点" class="headerlink" title="6.2 set注入 (重点)"></a>6.2 set注入 (重点)</h2><p>要求被注入的属性，必须有set方法</p><p><strong>环境搭建</strong></p><ol><li><p>复杂类型：Address.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Address&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>真实测试对象：Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Address address;<br>    <span class="hljs-keyword">private</span> String[] books;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<br>    <span class="hljs-keyword">private</span> String wife;<br>    <span class="hljs-keyword">private</span> Properties info;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Address <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(Address address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String[] getBooks() &#123;<br>        <span class="hljs-keyword">return</span> books;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBooks</span><span class="hljs-params">(String[] books)</span> &#123;<br>        <span class="hljs-built_in">this</span>.books = books;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getHobbys</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hobbys;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHobbys</span><span class="hljs-params">(List&lt;String&gt; hobbys)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hobbys = hobbys;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title function_">getCard</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> card;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCard</span><span class="hljs-params">(Map&lt;String, String&gt; card)</span> &#123;<br>        <span class="hljs-built_in">this</span>.card = card;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title function_">getGames</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> games;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGames</span><span class="hljs-params">(Set&lt;String&gt; games)</span> &#123;<br>        <span class="hljs-built_in">this</span>.games = games;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getWife</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wife;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWife</span><span class="hljs-params">(String wife)</span> &#123;<br>        <span class="hljs-built_in">this</span>.wife = wife;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Properties <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(Properties info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&quot;</span> + address.toString() +<br>                <span class="hljs-string">&quot;, books=&quot;</span> + Arrays.toString(books) +<br>                <span class="hljs-string">&quot;, hobbys=&quot;</span> + hobbys +<br>                <span class="hljs-string">&quot;, card=&quot;</span> + card +<br>                <span class="hljs-string">&quot;, games=&quot;</span> + games +<br>                <span class="hljs-string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, info=&quot;</span> + info +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ApplicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;青岛&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Student&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第一种：普通注入，value--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--第二种：Bean注入，ref--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--数组注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--List注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>学习Java<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>睡觉<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--map注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;身份证&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456789&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;银行卡&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456789&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--Set注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>COC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BOB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--null注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--properties注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;driver&quot;</span>&gt;</span>20220827<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试类：MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student)context.getBean(<span class="hljs-string">&quot;student&quot;</span>);<br>        System.out.println(student.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220828171632.png" alt="QQ截图20220828171632"></p></li></ol><p><strong>1.常量注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--第一种：普通注入，value--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) context.getBean(<span class="hljs-string">&quot;student&quot;</span>);<br>System.out.println(student.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.Bean注入</strong></p><p>注意点：这里的值是一个引用，ref</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Address&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;青岛&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--第二种：Bean注入，ref--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.数组注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Student&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--数组注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>4.List注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>学习Java<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>睡觉<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>5.Map注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--map注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;身份证&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456789&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;银行卡&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456789&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>6.set注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Set注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>COC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BOB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>7.Null注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--null注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>8.Properties注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--properties注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;driver&quot;</span>&gt;</span>20220827<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-3-p命名和c命名空间注入"><a href="#6-3-p命名和c命名空间注入" class="headerlink" title="6.3 p命名和c命名空间注入"></a>6.3 p命名和c命名空间注入</h2><p>我们可以使用p命名和c命名空间进行注入</p><p>官方文档：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220829165243.png" alt="QQ截图20220829165243"></p><p>使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;林慕椿&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;18&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--c命名空间注入，通过构造器注入，construct--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;林南芊&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;19&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext2.xml&quot;</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：p命名和c命名不能直接使用，需要导入xml约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<br></code></pre></td></tr></table></figure><h2 id="6-4-Bean的作用域"><a href="#6-4-Bean的作用域" class="headerlink" title="6.4 Bean的作用域"></a>6.4 Bean的作用域</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220829170205.png" alt="QQ截图20220829170205"></p><ol><li><p><strong>Singleton（单例模式）</strong></p><p>单例模式：Spring的默认机制，每次get的都是同一个对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.csdn.service.ServiceImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Prototype（原型模式）</strong></p><p>原型模式：每次从容器中get的时候，都会产生一个新对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span> <span class="hljs-attr">singleton</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>其余的 request、session、application 这些都只能在web开发中使用</p></li></ol><h1 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7. Bean的自动装配"></a>7. Bean的自动装配</h1><ul><li>自动装配是使用spring满足bean依赖的一种方法 </li><li>spring会在应用上下文中自动寻找，并自动给bean装配属性</li></ul><p><strong>Spring中bean有三种装配机制</strong>，分别是：</p><ol><li><p>在xml中显式配置（前面使用的一直都是）</p></li><li><p>在java中显式配置</p></li><li><p>隐式的bean发现机制和自动装配（自动装配，重点）</p></li></ol><p>Spring的自动装配需要从两个角度来实现，或者说是两个操作：</p><ol><li>组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean</li><li>自动装配(autowiring)：spring自动满足bean之间的依赖，也就是我们说的IoC/DI</li></ol><p>组件扫描和自动装配组合发挥巨大作用，使的显示的配置降低到最少</p><p><strong>推荐不使用自动装配xml配置 , 而使用注解</strong></p><h2 id="7-1-环境搭建"><a href="#7-1-环境搭建" class="headerlink" title="7.1 环境搭建"></a>7.1 环境搭建</h2><ol><li><p>新建一个maven项目 </p></li><li><p>新建两个实体类，Cat Dog 都有一个shut方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shut</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shut</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;汪汪&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建一个用户类People</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">getCat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cat;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCat</span><span class="hljs-params">(Cat cat)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cat = cat;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">getDog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dog;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDog</span><span class="hljs-params">(Dog dog)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dog = dog;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;People&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cat=&quot;</span> + cat +<br>                <span class="hljs-string">&quot;, dog=&quot;</span> + dog +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写配置文件 ApplicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Dog&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.People&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cat&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dog&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;people&quot;</span>,People.class);<br>        people.getDog().shut();<br>        people.getCat().shut();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">喵喵</span><br><span class="hljs-comment">汪汪</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="7-2-byName自动装配"><a href="#7-2-byName自动装配" class="headerlink" title="7.2 byName自动装配"></a>7.2 byName自动装配</h2><p><strong>autowire byName (按名称自动装配)</strong> </p><p>由于在手动配置xml过程中，常常发生字母缺漏和大小写等错误，而无法对其进行检查，使得开发效率降低</p><p>采用自动装配将避免这些错误，并且使配置简单化</p><p>测试：</p><ol><li><p>修改 ApplicationContext.xml 配置，增加一个属性 autowire=”byName”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Dog&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    byName：会自动在容器上下文中查找，和自己对象set方法后面值对应的 beanid</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再次测试，结果依旧成功输出</p></li></ol><p><strong>小结：</strong> </p><p>当一个bean节点带有 autowire byName的属性时</p><ol><li>将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat</li><li>去spring容器中寻找是否有此字符串名称id的对象</li><li>如果有，就取出注入；如果没有，真正的setCat就没执行，对象就没有初始化，调用时就会报空指针错误</li></ol><h2 id="7-3-byType自动装配"><a href="#7-3-byType自动装配" class="headerlink" title="7.3 byType自动装配"></a>7.3 byType自动装配</h2><p><strong>autowire byType (按类型自动装配)</strong> </p><p>测试：</p><ol><li><p>修改 ApplicationContext.xml 配置，增加一个属性 autowire=”byType”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Dog&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林慕椿&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再次测试，结果依旧成功输出</p></li></ol><p><strong>小结：</strong></p><ul><li><p>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</p></li><li><p>byType的时候，需要保证所有bean的class唯一，并且这个需要和自动注入的属性类型一致</p></li><li><p>使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一（全局对象唯一）。如果不唯一，会报不唯一的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">NoUniqueBeanDefinitionException<br></code></pre></td></tr></table></figure></li></ul><h2 id="7-4-使用注解自动装配"><a href="#7-4-使用注解自动装配" class="headerlink" title="7.4 使用注解自动装配"></a>7.4 使用注解自动装配</h2><p>jdk1.5开始支持注解，spring2.5开始全面支持注解</p><p>准备工作： 利用注解的方式注入属性</p><ol><li>导入约束：context约束</li><li>配置注解的支持：<strong>&lt;context:annotation-config/&gt;开启注解的支持</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-4-1-Autowired"><a href="#7-4-1-Autowired" class="headerlink" title="7.4.1 @Autowired"></a>7.4.1 @Autowired</h3><ul><li>直接在属性上使用，也可以在set方法上使用</li><li>使用 @Autowired 可以不用编写set方法了，前提：自动装配的属性在IOC（Spring）容器中存在，且符合名字byName</li><li>如果 @Autowired 自动装配的环境比较复杂，自动装配无法通过一个注解 @Autowired 完成的时候，我们可以使用 @Qualifier(value=”xxx”) 去配合 @Autowired 的使用，指定一个唯一的bean对象注入</li></ul><p>测试：</p><ol><li><p>将User类中的set方法去掉，使用@Autowired注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">getCat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cat;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">getDog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dog;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;People&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cat=&quot;</span> + cat +<br>                <span class="hljs-string">&quot;, dog=&quot;</span> + dog +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>此时配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Dog&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.People&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试，成功输出结果</p></li></ol><h3 id="7-4-2-Qualifier"><a href="#7-4-2-Qualifier" class="headerlink" title="7.4.2 @Qualifier"></a>7.4.2 @Qualifier</h3><ul><li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配 </li><li><strong>@Qualifier不能单独使用</strong>，通常和 @Autowired 一起使用</li></ul><p>测试：</p><ol><li><p>配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>没有加Qualifier测试，直接报错 </p></li><li><p>在属性上添加Qualifier注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(value = &quot;cat2&quot;)</span><br><span class="hljs-keyword">private</span> Cat cat;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(value = &quot;dog2&quot;)</span><br><span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure></li><li><p>测试，成功输出</p></li></ol><h3 id="7-4-3-Resource"><a href="#7-4-3-Resource" class="headerlink" title="7.4.3 @Resource"></a>7.4.3 @Resource</h3><ul><li>@Resource如有指定的name属性，先按该属性进行byName方式查找装配</li><li>其次再进行默认的byName方式进行装配</li><li>如果以上都不成功，则按byType的方式自动装配</li><li>都不成功，则报异常</li></ul><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-comment">//如果允许对象为null，设置required = false,默认为true</span><br><span class="hljs-meta">@Resource(name = &quot;cat2&quot;)</span><br><span class="hljs-keyword">private</span> Cat cat;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> Dog dog;<br><span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>ApplicationContext.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>测试：成功</p><p>配置文件2：beans.xml ， 删掉cat2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.pojo.Cat&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>实体类上只保留注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> Cat cat;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure><p>测试：成功</p><h2 id="7-5-小结"><a href="#7-5-小结" class="headerlink" title="7.5 小结"></a>7.5 小结</h2><p>@Autowired与@Resource的区别：</p><ul><li> @Autowired与@Resource都可以用来自动装配bean，都可以放在属性字段和set方法上</li><li>@Autowired通过byType的方式实现，必须要求依赖对象必须存在</li><li>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType实现，如果两个都找不到则报错</li><li>执行顺序不同：@Autowired通过byType的方式实现</li></ul><h1 id="8-Spring注解开发"><a href="#8-Spring注解开发" class="headerlink" title="8 Spring注解开发"></a>8 Spring注解开发</h1><h2 id="8-1-说明"><a href="#8-1-说明" class="headerlink" title="8.1 说明"></a>8.1 说明</h2><p>在spring4之后，想要使用注解形式，必须得要引入aop的包</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220829185814.png" alt="QQ截图20220829185814"></p><p>在配置文件当中，还得要引入一个context约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-2-Bean的注解注入"><a href="#8-2-Bean的注解注入" class="headerlink" title="8.2 Bean的注解注入"></a>8.2 Bean的注解注入</h2><p>我们之前都是使用 bean 的标签进行bean注入，但是实际开发中，我们一般都会使用注解</p><ol><li><p>配置扫描哪些包下的注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;ssm.study.pojo&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在指定包下编写类，增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//等价于 &lt;bean id=&quot;user&quot; class=&quot;ssm.study.pojo.User&quot; /&gt;</span><br><span class="hljs-comment">//@Component  组件</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;林慕椿&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(user.name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">林慕椿</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="8-3-注解注入属性"><a href="#8-3-注解注入属性" class="headerlink" title="8.3 注解注入属性"></a>8.3 注解注入属性</h2><p>使用注解注入属性    </p><ol><li><p>可以不用提供set方法，直接在直接名上添加 @value(“xxx”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//等价于 &lt;bean id=&quot;user&quot; class=&quot;ssm.study.pojo.User&quot; /&gt;</span><br><span class="hljs-comment">//@Component  组件</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;林慕椿&quot;)</span> <span class="hljs-comment">//相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;林慕椿&quot;/&gt;</span><br>    <span class="hljs-keyword">public</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p> 如果提供了set方法，在set方法上添加@value(“值”);</p></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <br><span class="hljs-keyword">public</span> String name;<br>    <br><span class="hljs-meta">@Value(&quot;林慕椿&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-4-衍生注解"><a href="#8-4-衍生注解" class="headerlink" title="8.4 衍生注解"></a>8.4 衍生注解</h2><p>这些注解替代了在配置文件当中配置步骤，更加的方便快捷</p><p><strong>@Component三个衍生注解：</strong> </p><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。 </p><ul><li>@Controller：web层 </li><li>@Service：service层 </li><li>@Repository：dao层 </li></ul><p>写上这些注解，就相当于将这个类交给Spring管理装配了</p><h2 id="8-5-自动装配注解"><a href="#8-5-自动装配注解" class="headerlink" title="8.5 自动装配注解"></a>8.5 自动装配注解</h2><p>……详见：Bean的自动装配</p><h2 id="8-6-作用域注解"><a href="#8-6-作用域注解" class="headerlink" title="8.6 作用域注解"></a>8.6 作用域注解</h2><p>@scope</p><ul><li>singleton：单例模式，Spring默认的。Spring会采用单例模式创建这个对象。关闭工厂，所有的对象都会销毁</li><li>prototype：多例模式。关闭工厂，所有的对象不会销毁，内部的垃圾回收机制会回收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller(&quot;user&quot;)</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-meta">@Value(&quot;林慕椿&quot;)</span><br><span class="hljs-keyword">public</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-7-小结"><a href="#8-7-小结" class="headerlink" title="8.7 小结"></a>8.7 小结</h2><p><strong>XML与注解比较：</strong> </p><ul><li>XML可以适用任何场景 ，结构清晰，维护方便 </li><li>注解不是自己提供的类使用不了，开发简单方便，维护相对复杂</li></ul><p><strong>xml与注解整合开发：</strong> （推荐）</p><ul><li>xml管理Bean </li><li>注解完成属性注入 </li><li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>作用： </p><ul><li>进行注解驱动注册，从而使注解生效 </li><li>用于激活那些已经在spring容器里注册过的bean上面的注解，也就是显示的向Spring注册 </li><li>如果不扫描包，就需要手动配置bean </li><li>如果不加注解驱动，则注入的值为null</li></ul><h2 id="8-8-使用Java的方式配置Spring"><a href="#8-8-使用Java的方式配置Spring" class="headerlink" title="8.8 使用Java的方式配置Spring"></a>8.8 使用Java的方式配置Spring</h2><p>现在完全不使用Spring的xml配置，全部由Java来实现</p><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。 </p><p>测试：</p><ol><li><p>编写一个实体类，Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//将这个类标注为Spring的一个组件，放到容器中！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dog&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建一个config配置包，编写一个MyConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//代表这是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>    <br><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span><br><span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">dog</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);<br><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) applicationContext.getBean(<span class="hljs-string">&quot;dog&quot;</span>);<br>System.out.println(dog.name);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>成功输出结果</p></li></ol><p><strong>导入其他配置如何做呢？</strong></p><ol><li><p>我们再编写一个配置类！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//代表这是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig2</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在之前的配置类中我们来选择导入这个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(MyConfig2.class)</span> <span class="hljs-comment">//导入合并其他配置类，类似于配置文件中的 inculde 标签</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">dog</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>关于这种Java类的配置方式，我们在之后的SpringBoot 和 SpringCloud中还会大量看到，我们需要知道这些注解的作用即可</p><h1 id="9-代理模式"><a href="#9-代理模式" class="headerlink" title="9 代理模式"></a>9 代理模式</h1><p>为什么要学习代理模式，因为AOP的底层机制就是动态代理</p><p>代理模式的分类： </p><ul><li>静态代理</li><li>动态代理 </li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/spring010.jpg" alt="spring010"></p><h2 id="9-1-静态代理"><a href="#9-1-静态代理" class="headerlink" title="9.1 静态代理"></a>9.1 静态代理</h2><p><strong>静态代理角色分析</strong></p><ul><li>抽象角色 : 一般使用接口或者抽象类来实现</li><li>真实角色 : 被代理的角色</li><li>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作</li><li>客户 : 使用代理角色来进行一些操作</li></ul><p><strong>代码实现：</strong> </p><p>接口即抽象角色：Rent.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：租房</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>真实角色：Host.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//真实角色: 房东，房东要出租房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;房屋出租&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理角色：Proxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代理角色：中介</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <br><span class="hljs-keyword">private</span> Host host;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span><span class="hljs-params">()</span> &#123; &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span><span class="hljs-params">(Host host)</span> &#123;<br><span class="hljs-built_in">this</span>.host = host;<br>&#125;<br>    <br><span class="hljs-comment">//租房</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>&#123;<br>seeHouse();<br>host.rent();<br>fare();<br>&#125;<br>    <br><span class="hljs-comment">//看房</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seeHouse</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;带房客看房&quot;</span>);<br>&#125;<br>    <br><span class="hljs-comment">//收中介费</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fare</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端访问代理角色：Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户类，一般客户都会去找代理！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//房东要租房</span><br><span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br><span class="hljs-comment">//中介帮助房东</span><br><span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(host);<br>    <br><span class="hljs-comment">//你去找中介！</span><br>proxy.rent();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-2-静态代理的好处"><a href="#9-2-静态代理的好处" class="headerlink" title="9.2 静态代理的好处"></a>9.2 静态代理的好处</h2><p>好处：</p><ul><li>可以使得我们的真实角色更加纯粹，不再去关注一些公共的事情</li><li>公共的业务由代理来完成，实现了业务的分工</li><li>公共业务发生扩展时变得更加集中和方便 </li></ul><p>缺点 : </p><ul><li>类多了，多了代理类，工作量变大了，开发效率降低</li></ul><p>我们想要静态代理的好处，又不想要静态代理的缺点，所以就有了动态代理</p><h2 id="9-3-静态代理再理解"><a href="#9-3-静态代理再理解" class="headerlink" title="9.3 静态代理再理解"></a>9.3 静态代理再理解</h2><p>实现步骤：</p><ol><li><p>创建一个抽象角色，比如用户业务，抽象起来就是增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：增删改查业务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需要一个真实对象来完成这些增删改查操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//真实对象，完成增删改查操作的人</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;更新了一个用户&quot;</span>);<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需要增加一个日志功能，如何实现</p><ul><li>思路1 ：在实现类上增加代码 —- 麻烦 </li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能</li></ul></li><li><p>设置一个代理类来处理日志，代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代理角色，在这里面增加日志的实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">private</span> UserServiceImpl userService;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserServiceImpl userService)</span> &#123;<br><span class="hljs-built_in">this</span>.userService = userService;<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>log(<span class="hljs-string">&quot;add&quot;</span>);<br>userService.add();<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>log(<span class="hljs-string">&quot;delete&quot;</span>);<br>userService.delete();<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>log(<span class="hljs-string">&quot;update&quot;</span>);<br>userService.update();<br>&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br>log(<span class="hljs-string">&quot;query&quot;</span>);<br>userService.query();<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String msg)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+msg+<span class="hljs-string">&quot;方法&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试访问类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//真实业务</span><br><span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br><span class="hljs-comment">//代理类</span><br><span class="hljs-type">UserServiceProxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceProxy</span>();<br><span class="hljs-comment">//使用代理类实现日志功能！</span><br>proxy.setUserService(userService);<br>        <br>proxy.add();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想 </p><p><strong>纵向开发，横向开发</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/spring011.jpg" alt="spring011"></p><h2 id="9-4-动态代理"><a href="#9-4-动态代理" class="headerlink" title="9.4 动态代理"></a>9.4 动态代理</h2><ul><li>动态代理的角色和静态代理的一样</li><li>动态代理的代理类是动态生成的 . 静态代理的代理类是我们提前写好的 </li><li>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理 <ul><li>基于接口的动态代理 —- JDK动态代理 </li><li>基于类的动态代理 —- cglib </li><li>现在用的比较多的是 javasist 来生成动态代理</li><li>我们这里使用JDK的原生代码来实现，其余的道理都是一样的</li></ul></li></ul><p>JDK的动态代理需要了解两个类 核心 : <strong>InvocationHandler</strong> 和 <strong>Proxy</strong>（可查看JDK帮助文档）</p><p><strong>InvocationHandler：调用处理程序</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/spring019.jpg" alt="spring019"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, 方法 method, Object[] args)</span>；<br><span class="hljs-comment">//参数</span><br><span class="hljs-comment">//proxy - 调用该方法的代理实例</span><br><span class="hljs-comment">//method -所述方法对应于调用代理实例上的接口方法的实例。 方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</span><br><span class="hljs-comment">//args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。 原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean。</span><br></code></pre></td></tr></table></figure><p><strong>Proxy : 代理</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/spring012.jpg" alt="spring012"></p><p><img src="https://img.yiqiangshiyia.cn/blog/spring013.jpg" alt="spring013"></p><p><img src="https://img.yiqiangshiyia.cn/blog/spring014.jpg" alt="spring014"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//生成代理类</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(),<br>rent.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码实现</strong> </p><p>抽象角色和真实角色和之前的一样</p><p>抽象角色：Rent.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：租房</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>真实角色：Host.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//真实角色: 房东，房东要出租房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;房屋出租&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理角色：ProxyInvocationHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><span class="hljs-keyword">private</span> Rent rent;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRent</span><span class="hljs-params">(Rent rent)</span> &#123;<br><span class="hljs-built_in">this</span>.rent = rent;<br>&#125;<br>    <br><span class="hljs-comment">//生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(),<br>rent.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>&#125;<br>    <br><span class="hljs-comment">// proxy : 代理类 method : 代理类的调用处理程序的方法对象.</span><br><span class="hljs-comment">// 处理代理实例上的方法调用并返回结果</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>seeHouse();<br><span class="hljs-comment">//核心：本质利用反射实现！</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(rent, args);<br>fare();<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>    <br><span class="hljs-comment">//看房</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seeHouse</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;带房客看房&quot;</span>);<br>&#125;<br>    <br><span class="hljs-comment">//收中介费</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fare</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//租客</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//真实角色</span><br><span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br><span class="hljs-comment">//代理实例的调用处理程序</span><br><span class="hljs-type">ProxyInvocationHandler</span> <span class="hljs-variable">pih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyInvocationHandler</span>();<br>pih.setRent(host); <span class="hljs-comment">//将真实角色放置进去！</span><br><span class="hljs-type">Rent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Rent)pih.getProxy(); <span class="hljs-comment">//动态生成对应的代理类！</span><br>proxy.rent();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>核心：一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口</strong></p><h2 id="9-5-深化理解"><a href="#9-5-深化理解" class="headerlink" title="9.5 深化理解"></a>9.5 深化理解</h2><p>使用动态代理实现代理后面写的UserService</p><p>也可以编写一个通用的动态代理实现的类，所有的代理对象设置为Object即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><span class="hljs-keyword">private</span> Object target;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTarget</span><span class="hljs-params">(Object target)</span> &#123;<br><span class="hljs-built_in">this</span>.target = target;<br>&#125;<br>    <br><span class="hljs-comment">//生成代理类</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(),<br>target.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>&#125;<br>    <br><span class="hljs-comment">// proxy : 代理类</span><br><span class="hljs-comment">// method : 代理类的调用处理程序的方法对象.</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>log(method.getName());<br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String methodName)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+methodName+<span class="hljs-string">&quot;方法&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试增删改查，查看结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//真实对象</span><br><span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br><span class="hljs-comment">//代理对象的调用处理程序</span><br><span class="hljs-type">ProxyInvocationHandler</span> <span class="hljs-variable">pih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyInvocationHandler</span>();<br>pih.setTarget(userService); <span class="hljs-comment">//设置要代理的对象</span><br><span class="hljs-type">UserService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (UserService)pih.getProxy(); <span class="hljs-comment">//动态生成代理类！</span><br>proxy.delete();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-6-动态代理的好处"><a href="#9-6-动态代理的好处" class="headerlink" title="9.6 动态代理的好处"></a>9.6 动态代理的好处</h2><p>静态代理有的它都有，静态代理没有的，它也有</p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情</li><li>公共的业务由代理来完成 . 实现了业务的分工</li><li>公共业务发生扩展时变得更加集中和方便</li><li>一个动态代理 , 一般代理某一类业务 </li><li>一个动态代理可以代理多个类，代理的是接口</li></ul><h1 id="10-AOP"><a href="#10-AOP" class="headerlink" title="10. AOP"></a>10. AOP</h1><h2 id="10-1-什么是AOP"><a href="#10-1-什么是AOP" class="headerlink" title="10.1 什么是AOP"></a>10.1 什么是AOP</h2><blockquote><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的 一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><p><img src="https://img.yiqiangshiyia.cn/blog/spring015.jpg" alt="spring015"></p><h2 id="10-2-Aop在Spring中的作用"><a href="#10-2-Aop在Spring中的作用" class="headerlink" title="10.2 Aop在Spring中的作用"></a>10.2 Aop在Spring中的作用</h2><p>提供声明式事务；允许用户自定义切面 </p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要 关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 …. </li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。 </li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。 </li><li>目标（Target）：被通知对象。 </li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。 </li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。 </li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/spring016.jpg" alt="spring016"></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><p><img src="https://img.yiqiangshiyia.cn/blog/spring017.jpg" alt="spring017"></p><p>即 Aop 在 不改变原有代码的情况下 , 去增加新的功能</p><h2 id="10-3-使用Spring实现AOP"><a href="#10-3-使用Spring实现AOP" class="headerlink" title="10.3 使用Spring实现AOP"></a>10.3 使用Spring实现AOP</h2><p>使用AOP前，需要在 pom.xml 中导入一个依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>使用Spring实现AOP有三种方式：</strong></p><h3 id="10-3-1-使用Spring-API接口"><a href="#10-3-1-使用Spring-API接口" class="headerlink" title="10.3.1 使用Spring API接口"></a>10.3.1 使用Spring API接口</h3><p>使用步骤：</p><ol><li><p>编写业务接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;更新了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写两个日志增强类， 一个前置增强，一个后置增强</p><p>前置增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodBeforeAdvice</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//method：要执行目标对象的方法</span><br>    <span class="hljs-comment">//args：参数</span><br>    <span class="hljs-comment">//target：目标对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(target.getClass().getName()+<span class="hljs-string">&quot;的&quot;</span>+method.getName()+<span class="hljs-string">&quot;被执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后置增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AfterReturningAdvice</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+method.getName()+<span class="hljs-string">&quot;方法，返回结果为：&quot;</span>+returnValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 ApplicationContext.xml 中注册，并实现aop切入实现 , 注意导入约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.service.UserServiceImpl &quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.log.Log&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.log.AfterLog&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--方式1：使用原生Spring API接口--&gt;</span><br>    <span class="hljs-comment">&lt;!--配置aop：需要导入aop的约束--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--切入点：expression：表达式  execution(要执行的位置 * * * *)--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* ssm.study.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--执行环绕增加  advice-ref：执行方法 . pointcut-ref：切入点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//动态代理代理的是接口：注意点</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220830204908.png" alt="QQ截图20220830204908"></p></li></ol><p>Spring 的 Aop就是将公共的业务 (日志，安全等) 和领域业务结合起来，当执行领域业务时，将会把公共业务加进来，实现公共业务的重复利用，领域业务更纯粹，程序员专注领域业务，其本质还是动态代理。</p><h3 id="10-3-2-自定义类实现AOP"><a href="#10-3-2-自定义类实现AOP" class="headerlink" title="10.3.2 自定义类实现AOP"></a>10.3.2 自定义类实现AOP</h3><p>目标业务类不变依旧是userServiceImpl </p><p>使用步骤：</p><ol><li><p>编写一个切入类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiyPointCut</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行前！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行后！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 ApplicationContext.xml 中配置注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.service.UserServiceImpl &quot;</span> /&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--方式2：自定义类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.diy.DiyPointCut &quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--自定义切面  ref：要引用的类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--切入点--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diyPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* ssm.study.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diyPointcut&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diyPointcut&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//动态代理代理的是接口：注意点</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.select();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220830211418.png" alt="QQ截图20220830211418"></p></li></ol><h3 id="10-3-3-使用注解实现AOP"><a href="#10-3-3-使用注解实现AOP" class="headerlink" title="10.3.3 使用注解实现AOP"></a>10.3.3 使用注解实现AOP</h3><p>使用步骤：</p><ol><li><p>编写一个注解实现的增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//标明这个类是一个切面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationPointcut</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* ssm.study.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行前！&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After(&quot;execution(* ssm.study.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行后！&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Around(&quot;execution(* ssm.study.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint jp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;签名:&quot;</span>+jp.getSignature());<br>        <span class="hljs-comment">//执行目标方法proceed</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> jp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕后&quot;</span>);<br>        System.out.println(proceed);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 ApplicationContext.xml 中配置注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.service.UserServiceImpl &quot;</span> /&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--第三种方式:注解实现--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;annotationPointcut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.diy.AnnotationPointcut&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--开启注解支持--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//动态代理代理的是接口：注意点</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220830211729.png" alt="QQ截图20220830211729"></p></li></ol><h1 id="11-整合Mybatis"><a href="#11-整合Mybatis" class="headerlink" title="11. 整合Mybatis"></a>11. 整合Mybatis</h1><p><strong>Maven仓库网站：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></strong>    包含了所有的依赖jar包</p><p>实现步骤：</p><p>导入相关jar包</p><ol><li> junit</li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>mybatis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>mysql-connector-java</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>spring相关</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Spring操作数据库的话，还需要一个spring-jdbc--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>aspectJ AOP 织入器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>mybatis-spring整合包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Maven静态资源过滤问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>编写配置文件</p><p>代码实现</p><h2 id="11-1-回顾MyBatis"><a href="#11-1-回顾MyBatis" class="headerlink" title="11.1 回顾MyBatis"></a>11.1 回顾MyBatis</h2><ol><li><p>编写pojo实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> String pwd; <span class="hljs-comment">//密码</span><br><br>    <span class="hljs-comment">//构造,有参,无参</span><br>    <span class="hljs-comment">//set/get</span><br>    <span class="hljs-comment">//toString()</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写MyBatis核心配置文件（mybatis-config.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ssm.study.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--事物管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;ssm/study/mapper/userMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>UserDao接口编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口对应的Mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;ssm.study.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>        List&lt;User&gt; userList = mapper.selectUser();<br>        <span class="hljs-keyword">for</span> (User user: userList)&#123;<br>            System.out.println(user);<br>        &#125;<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220831171803.png" alt="QQ截图20220831171803"></p></li></ol><h2 id="11-2-MyBatis-Spring"><a href="#11-2-MyBatis-Spring" class="headerlink" title="11.2 MyBatis-Spring"></a>11.2 MyBatis-Spring</h2><p><strong>mybatis-spring 官方文档：<a href="http://www.mybatis.org/spring/zh/index.html">http://www.mybatis.org/spring/zh/index.html</a></strong></p><p>引入Spring之前需要了解mybatis-spring包中的一些重要类</p><p><strong>什么是 MyBatis-Spring？</strong> </p><blockquote><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 SqlSession 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 DataAccessException。 最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。</p></blockquote><p><strong>知识基础</strong></p><p>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重要 </p><p>MyBatis-Spring 需要以下版本：</p><table><thead><tr><th>MyBatis-Spring</th><th>MyBatis</th><th>Spring <strong>框</strong>架</th><th>Spring Batch</th><th>Java</th></tr></thead><tbody><tr><td>2.0</td><td>3.5+</td><td>5.0+</td><td>4.0+</td><td>Java 8+</td></tr><tr><td>1.3</td><td>3.4+</td><td>3.2.2+</td><td>2.1+</td><td>Java 6+</td></tr></tbody></table><p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>快速上手：<a href="http://mybatis.org/spring/zh/getting-started.html">http://mybatis.org/spring/zh/getting-started.html</a></strong></p><h2 id="11-3-整合实现一"><a href="#11-3-整合实现一" class="headerlink" title="11.3 整合实现一"></a>11.3 整合实现一</h2><ol><li><p>引入Spring配置文件beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置数据源替换mybaits的数据源</p></li><li><p>配置SqlSessionFactory，关联MyBatis</p></li><li><p>注册sqlSessionTemplate，关联sqlSessionFactory</p><p>spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--DataSource：使用Spring的数据源替换Mybatis的配置 c3p0 dbcp druid</span><br><span class="hljs-comment">    这里使用Spring提供的JDBC：org.springframework.jdbc.datasource</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--绑定Mybatis配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:ssm/study/mapper/*.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--sqlSessionTemplate：就是我们使用的sqlSession--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.sqlSessionTemplate&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;usrMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.mapper.UserMapperImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>增加Dao接口的实现类；私有化sqlSessionTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSession;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSqlSession</span><span class="hljs-params">(SqlSessionTemplate sqlSession)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sqlSession = sqlSession;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">return</span> mapper.selectUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册bean实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;usrMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.mapper.UserMapperImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-dao.xml&quot;</span>    );<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span>(UserMapper) context.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>);<br>        <span class="hljs-keyword">for</span>(User user : mapper.selectUser())&#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220901145241.png" alt="QQ截图20220901145241"></p></li></ol><p>结果成功输出，Mybatis配置文件，都可以被Spring整合</p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ssm.study.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="11-4-整合实现二"><a href="#11-4-整合实现二" class="headerlink" title="11.4 整合实现二"></a>11.4 整合实现二</h2><p>mybatis-spring1.2.3版以上的才有这个</p><p>官方文档截图 : </p><p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式1 , 不 需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看</p><p><img src="https://img.yiqiangshiyia.cn/blog/spring020.jpg" alt="spring020"></p><p>测试：</p><ol><li><p>将我们上面写的UserDaoImpl修改一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> getSqlSession().getMapper(UserMapper.class);<br><span class="hljs-keyword">return</span> mapper.selectUser();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改bean的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.dao.UserDaoImpl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> (UserMapper) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>List&lt;User&gt; user = mapper.selectUser();<br>System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>总结 : 整合到spring中以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，还可以使用注解来实现，SpringBoot还会再次整合测试</p><h1 id="12-声明式事务"><a href="#12-声明式事务" class="headerlink" title="12. 声明式事务"></a>12. 声明式事务</h1><h2 id="12-1-回顾事务"><a href="#12-1-回顾事务" class="headerlink" title="12.1 回顾事务"></a>12.1 回顾事务</h2><ul><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎</li><li>事务管理是企业级应用程序开发中必备技术，用来确保数据的完整性和一致性</li></ul><p>事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。 </p><p><strong>事务四个属性ACID</strong> </p><ol><li><p>原子性（atomicity） </p><ul><li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用。</li></ul></li><li><p>一致性（consistency） </p><ul><li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中。</li></ul></li><li><p>隔离性（isolation）</p><ul><li>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li></ul></li><li><p>持久性（durability） </p><ul><li>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中。</li></ul></li></ol><h2 id="12-2-Spring中的事务管理"><a href="#12-2-Spring中的事务管理" class="headerlink" title="12.2 Spring中的事务管理"></a>12.2 Spring中的事务管理</h2><p>Spring在不同的事务管理API之上定义了一个抽象层，使得开发人员不必了解底层的事务管理API就可以 使用Spring的事务管理机制。Spring支持编程式事务管理和声明式的事务管理。 </p><p><strong>编程式事务管理</strong> </p><ul><li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚 </li><li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码 </li></ul><p><strong>声明式事务管理</strong> </p><ul><li>一般情况下比编程式事务好用。 </li><li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。 </li><li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务 管理。 </li></ul><p>使用Spring管理事务，注意头文件的约束导入 : tx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;<br>http://www.springframework.org/schema/tx<br>http://www.springframework.org/schema/tx/spring-tx.xsd&quot;<br></code></pre></td></tr></table></figure><p><strong>事务管理器</strong> </p><ul><li>无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。 </li><li>就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。 </li></ul><p><strong>JDBC事务</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置好事务管理器后我们需要去配置事务的通知</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置事务通知--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>spring事务传播特性：</strong> </p><p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行 为： </p><ul><li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这 个事务中，这是最常见的选择。 </li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。 </li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。 </li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。 </li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 </li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。 </li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 propagation_required类似的操作 </li></ul><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。 </p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的 调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。 </p><p>就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中！</p><p><strong>配置AOP</strong></p><p>导入aop的头文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置aop织入事务--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.kuang.dao.*.*(..))&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>进行测试</strong> </p><p>删掉刚才插入的数据，再次测试！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> (UserMapper) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>List&lt;User&gt; user = mapper.selectUser();<br>System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>为什么需要配置事务？</strong></p><ul><li>如果不配置，就需要我们手动提交控制事务； </li><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat 500错误：实例化Servlet类异常</title>
    <link href="/2022/08/23/Tomcat-500%E9%94%99%E8%AF%AF%EF%BC%9A%E5%AE%9E%E4%BE%8B%E5%8C%96Servlet%E7%B1%BB%E5%BC%82%E5%B8%B8/"/>
    <url>/2022/08/23/Tomcat-500%E9%94%99%E8%AF%AF%EF%BC%9A%E5%AE%9E%E4%BE%8B%E5%8C%96Servlet%E7%B1%BB%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在IDEA中启动Tomcat访问web项目。报错：实例化Servlet类[com.study.servlet.HelloServlet]异常</p></blockquote><h2 id="web项目："><a href="#web项目：" class="headerlink" title="web项目："></a><strong>web项目：</strong></h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823181435.png" alt="QQ截图20220823181435"></p><p>启动Tomcat，浏览器输入：<a href="http://localhost:8080/servlet-01/HelloServlet">http://localhost:8080/servlet-01/HelloServlet</a></p><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a><strong>报错：</strong></h2><p>第一次访问：</p><p>HTTP状态 500 - 内部服务器错误</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823182135.png" alt="QQ截图20220823182135"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java">HTTP状态 <span class="hljs-number">500</span> - 内部服务器错误<br>类型 异常报告<br><br>消息 实例化Servlet类[com.study.servlet.HelloServlet]异常<br><br>描述 服务器遇到一个意外的情况，阻止它完成请求。<br><br>例外情况<br><br>jakarta.servlet.ServletException: 实例化Servlet类[com.study.servlet.HelloServlet]异常<br>org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="hljs-number">542</span>)<br>org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="hljs-number">92</span>)<br>org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:<span class="hljs-number">690</span>)<br>org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="hljs-number">356</span>)<br>org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="hljs-number">399</span>)<br>org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="hljs-number">65</span>)<br>org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="hljs-number">867</span>)<br>org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="hljs-number">1762</span>)<br>org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="hljs-number">49</span>)<br>org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1191</span>)<br>org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">659</span>)<br>org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="hljs-number">61</span>)<br>java.base/java.lang.Thread.run(Thread.java:<span class="hljs-number">831</span>)<br>根本原因。<br><br>java.lang.NoClassDefFoundError: javax/servlet/http/HttpServlet<br>java.base/java.lang.ClassLoader.defineClass1(Native Method)<br>java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:<span class="hljs-number">1010</span>)<br>java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:<span class="hljs-number">150</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:<span class="hljs-number">2510</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:<span class="hljs-number">877</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:<span class="hljs-number">1413</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:<span class="hljs-number">1257</span>)<br>org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="hljs-number">542</span>)<br>org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="hljs-number">92</span>)<br>org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:<span class="hljs-number">690</span>)<br>org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="hljs-number">356</span>)<br>org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="hljs-number">399</span>)<br>org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="hljs-number">65</span>)<br>org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="hljs-number">867</span>)<br>org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="hljs-number">1762</span>)<br>org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="hljs-number">49</span>)<br>org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1191</span>)<br>org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">659</span>)<br>org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="hljs-number">61</span>)<br>java.base/java.lang.Thread.run(Thread.java:<span class="hljs-number">831</span>)<br>根本原因。<br><br>java.lang.ClassNotFoundException: javax.servlet.http.HttpServlet<br>org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:<span class="hljs-number">1449</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:<span class="hljs-number">1257</span>)<br>java.base/java.lang.ClassLoader.defineClass1(Native Method)<br>java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:<span class="hljs-number">1010</span>)<br>java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:<span class="hljs-number">150</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:<span class="hljs-number">2510</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:<span class="hljs-number">877</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:<span class="hljs-number">1413</span>)<br>org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:<span class="hljs-number">1257</span>)<br>org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="hljs-number">542</span>)<br>org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="hljs-number">92</span>)<br>org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:<span class="hljs-number">690</span>)<br>org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="hljs-number">356</span>)<br>org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="hljs-number">399</span>)<br>org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="hljs-number">65</span>)<br>org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="hljs-number">867</span>)<br>org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="hljs-number">1762</span>)<br>org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="hljs-number">49</span>)<br>org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1191</span>)<br>org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">659</span>)<br>org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="hljs-number">61</span>)<br>java.base/java.lang.Thread.run(Thread.java:<span class="hljs-number">831</span>)<br>):注意 主要问题的全部 stack 信息可以在 server logs 里查看<br><br>Apache Tomcat/<span class="hljs-number">10.0</span><span class="hljs-number">.23</span><br></code></pre></td></tr></table></figure><p>第二次访问：</p><p>HTTP状态 404 - 未找到</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823182141.png" alt="QQ截图20220823182141"></p><h2 id="Cause："><a href="#Cause：" class="headerlink" title="Cause："></a><strong>Cause：</strong></h2><p>折腾了很久+百度找到了报错的原因：出现这个问题的原因是tomcat 10中的servlet-api与maven中导入的servlet-api依赖不兼容所导致的</p><h2 id="Solve："><a href="#Solve：" class="headerlink" title="Solve："></a><strong>Solve：</strong></h2><p>使用tomcat 9.0.65的版本就可以了</p><p>折腾了这么久最后终于成功解决了报错！！！</p><p>浏览器输入：<a href="http://localhost:8080/servlet-01/HelloServlet">http://localhost:8080/servlet-01/HelloServlet</a> 可以正常访问web项目了😀</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823180017.png" alt="QQ截图20220823180017"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823180036.png" alt="QQ截图20220823180036"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-JavaWeb</title>
    <link href="/2022/08/21/Java-JavaWeb/"/>
    <url>/2022/08/21/Java-JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><h2 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h2><p>web开发： </p><ul><li>web，网页的意思 ， <a href="http://www.baidu.com/">www.baidu.com</a> </li><li>静态web <ul><li>html，css </li><li>提供给所有人看的数据始终不会发生变化！ </li></ul></li><li>动态web <ul><li>淘宝，几乎是所有的网站； </li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相 同！ </li><li>技术栈：Servlet/JSP，ASP，PHP </li></ul></li></ul><p>在Java中，动态web资源开发的技术统称为JavaWeb；</p><h2 id="1-2-web应用程序"><a href="#1-2-web应用程序" class="headerlink" title="1.2 web应用程序"></a>1.2 web应用程序</h2><p>web应用程序：可以提供浏览器访问的程序； </p><ul><li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务； </li><li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。 </li><li>URL </li><li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器 </li><li>一个web应用由多部分组成 （静态web，动态web） <ul><li>html，css，js </li><li>jsp，servlet </li><li>Java程序 </li><li>jar包 </li><li>配置文件 （Properties） </li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p><h2 id="1-3-静态web"><a href="#1-3-静态web" class="headerlink" title="1.3 静态web"></a>1.3 静态web</h2><p>*.htm, *.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读 取。通络</p><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb001.jpg" alt="javaweb001"></p><p>静态web存在的缺点 </p><ul><li>Web页面无法动态更新，所有用户看到都是同一个页面 <ul><li>轮播图，点击特效：伪动态 </li><li>JavaScript [实际开发中，它用的最多] </li><li>VBScript </li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul><h2 id="1-4-动态web"><a href="#1-4-动态web" class="headerlink" title="1.4 动态web"></a>1.4 动态web</h2><p>页面会动态展示： “Web的页面展示的效果因人而异”</p><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb002.jpg" alt="javaweb002"></p><p>缺点： </p><ul><li>假如服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布； <ul><li>停机维护 </li></ul></li></ul><p>优点： </p><ul><li>Web页面可以动态更新，所有用户看到都不是同一个页面 </li><li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb003.jpg" alt="javaweb003"></p><h1 id="2-web服务器"><a href="#2-web服务器" class="headerlink" title="2. web服务器"></a>2. web服务器</h1><h2 id="2-1-技术讲解"><a href="#2-1-技术讲解" class="headerlink" title="2.1 技术讲解"></a>2.1 技术讲解</h2><p><strong>ASP:</strong> </p><ul><li><p>微软：国内最早流行的就是ASP； </p></li><li><p>在HTML中嵌入了VB的脚本， ASP + COM； </p></li><li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱 </p></li><li><p>维护成本高！ </p></li><li><p>C# </p></li><li><p>IIS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asp">&lt;h1&gt;<br>&lt;h1&gt;&lt;h1&gt;<br>&lt;h1&gt;<br>&lt;h1&gt;<br>&lt;h1&gt;<br>&lt;h1&gt;<br>&lt;%<br>System.out.println(&quot;hello&quot;)<br>%&gt;<br>&lt;h1&gt;<br>&lt;h1&gt;<br>&lt;h1&gt;&lt;h1&gt;<br>&lt;h1&gt;<br></code></pre></td></tr></table></figure></li></ul><p><strong>php：</strong> </p><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li><li>无法承载大访问量的情况（局限性）</li></ul><p><strong>JSP/Servlet :</strong>  </p><p>B/S：浏览和服务器 </p><p>C/S: 客户端和服务器 </p><ul><li>sun公司主推的B/S架构 </li><li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的) </li><li>可以承载三高问题带来的影响； </li><li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li></ul><p>……</p><h2 id="2-2-web服务器"><a href="#2-2-web服务器" class="headerlink" title="2.2 web服务器"></a>2.2 web服务器</h2><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息； </p><p><strong>IIS</strong> </p><p>微软的； ASP…,Windows中自带的 </p><p><strong>Tomcat</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb004.jpg" alt="javaweb004"></p><blockquote><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最 新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。 Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和 并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人 来说，它是最佳的选择 Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为9.0。 ….</p></blockquote><p>下载tomcat： </p><ol><li>安装 or 解压</li><li>了解配置文件及目录结构</li><li>这个东西的作用</li></ol><h1 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3. Tomcat"></a>3. Tomcat</h1><h2 id="3-1-安装tomcat"><a href="#3-1-安装tomcat" class="headerlink" title="3.1 安装tomcat"></a>3.1 安装tomcat</h2><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb005.jpg" alt="javaweb005"></p><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb006.jpg" alt="javaweb006"></p><h2 id="3-2-Tomcat启动和配置"><a href="#3-2-Tomcat启动和配置" class="headerlink" title="3.2 Tomcat启动和配置"></a>3.2 Tomcat启动和配置</h2><p>文件夹作用：</p><p><img src="https://img.yiqiangshiyia.cn/blog/java007.jpg" alt="java007"></p><p>启动 / 关闭Tomcat</p><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb065.jpg" alt="javaweb065"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a> </p><p>可能遇到的问题： </p><ol><li>Java环境变量没有配置 </li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><h2 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a>3.3 配置</h2><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb008.jpg" alt="javaweb008"></p><p>可以配置启动的端口号 </p><ul><li>tomcat的默认端口号为：8080 </li><li>mysql：3306 </li><li>http：80 </li><li>https：443</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8081&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>可以配置主机的名称 </p><ul><li>默认的主机名为：localhost-&gt;127.0.0.1 </li><li>默认网站应用存放的位置为：webapps</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;www.qinjiang.com&quot;</span> <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>网站是如何进行访问的</strong></p><ol><li><p>输入一个域名；回车 </p></li><li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p></li><li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb009.jpg" alt="javaweb009"></p></li></ol></li><li><p>可以配置一下环境变量</p></li></ol><h2 id="3-4-发布一个web网站"><a href="#3-4-发布一个web网站" class="headerlink" title="3.4 发布一个web网站"></a>3.4 发布一个web网站</h2><p>不会就先模仿 </p><ul><li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了 </li></ul><p>网站应该有的结构</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attr">--webapps</span> ：Tomcat服务器的web目录<br>-ROOT<br>-kuangstudy ：网站的目录名<br>- WEB-INF<br>-classes : java程序<br>-lib：web应用所依赖的jar包<br>-web<span class="hljs-selector-class">.xml</span> ：网站配置文件<br>- index<span class="hljs-selector-class">.html</span> 默认的首页<br>- static<br>-css<br>-style<span class="hljs-selector-class">.css</span><br>-js<br>-<span class="hljs-selector-tag">img</span><br>-.....<br></code></pre></td></tr></table></figure><p>HTTP协议 ： 面试 </p><p>Maven：构建工具 </p><ul><li>Maven安装包 </li></ul><p>Servlet 入门 </p><ul><li>HelloWorld！ </li><li>Servlet配置 </li><li>原理</li></ul><h1 id="4-Http"><a href="#4-Http" class="headerlink" title="4. Http"></a>4. Http</h1><h2 id="4-1-什么是HTTP"><a href="#4-1-什么是HTTP" class="headerlink" title="4.1 什么是HTTP"></a>4.1 什么是HTTP</h2><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。 </p><ul><li>文本：html，字符串，~ …</li><li>超文本：图片，音乐，视频，定位，地图…</li><li>默认端口：80 </li></ul><p>Https：安全的 </p><ul><li>默认端口：443</li></ul><h2 id="4-2-两个时代"><a href="#4-2-两个时代" class="headerlink" title="4.2 两个时代"></a>4.2 两个时代</h2><p>http1.0 </p><ul><li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接 </li></ul><p>http2.0 </p><ul><li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li></ul><h2 id="4-3-Http请求"><a href="#4-3-Http请求" class="headerlink" title="4.3 Http请求"></a>4.3 Http请求</h2><ul><li>客户端—发请求（Request）—服务器 </li></ul><p>以百度为例：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220820164650.png" alt="QQ截图20220820164650"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Request URL:https:<span class="hljs-comment">//www.baidu.com/  //请求地址：www.baidu.com</span><br>Request Method:GET  <span class="hljs-comment">//请求方法：get方法/post方法</span><br>Status Code:<span class="hljs-number">200</span> OK  <span class="hljs-comment">//状态码：200</span><br>Remote Address:<span class="hljs-number">14.215</span><span class="hljs-number">.177</span><span class="hljs-number">.39</span>:<span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept:text/html  <span class="hljs-comment">//类型编码</span><br>Accept-Encoding:gzip, deflate, br<br>Accept-Language:zh-CN,zh;q=<span class="hljs-number">0.9</span>  <span class="hljs-comment">//语言</span><br>Cache-Control:max-age=<span class="hljs-number">0</span><br>Connection:keep-alive<br></code></pre></td></tr></table></figure><p><strong>1.请求行</strong></p><ul><li>请求行中的请求方式：GET </li><li>请求方式：Get，Post，HEAD,DELETE,PUT,TRACT… <ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效 </li><li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li></ul></li></ul><p><strong>2.消息头</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器，它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式 GBK UTF-<span class="hljs-number">8</span> GB2312 ISO8859-<span class="hljs-number">1</span><br>Accept-Language：告诉浏览器，它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成是断开还是保持连接<br>HOST：主机..../.<br></code></pre></td></tr></table></figure><h2 id="4-4-Http响应"><a href="#4-4-Http响应" class="headerlink" title="4.4 Http响应"></a>4.4 Http响应</h2><ul><li>服务器—响应—–客户端 </li></ul><p>以百度为例：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220820164756.png" alt="QQ截图20220820164756"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache-Control:<span class="hljs-keyword">private</span>  <span class="hljs-comment">//缓存控制</span><br>Connection:Keep-Alive  <span class="hljs-comment">//连接</span><br>Content-Encoding:gzip  <span class="hljs-comment">//编码</span><br>Content-Type:text/html  <span class="hljs-comment">//类型</span><br></code></pre></td></tr></table></figure><p><strong>1.响应体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器，它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式 GBK UTF-<span class="hljs-number">8</span> GB2312 ISO8859-<span class="hljs-number">1</span><br>Accept-Language：告诉浏览器，它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成是断开还是保持连接<br>HOST：主机..../.<br>Refresh：告诉客户端，多久刷新一次<br>Location：让网页重新定位<br></code></pre></td></tr></table></figure><p><strong>2.响应状态码</strong></p><p>200：请求响应成功 200 </p><p>3xx：请求重定向 </p><ul><li>重定向：你重新到我给你新位置去</li></ul><p>4xx：找不到资源 404 </p><ul><li>资源不存在</li></ul><p>5xx：服务器代码错误 500 502：网关错误</p><h1 id="5-Servlet"><a href="#5-Servlet" class="headerlink" title="5. Servlet"></a>5. Servlet</h1><h2 id="5-1-Servlet简介"><a href="#5-1-Servlet简介" class="headerlink" title="5.1 Servlet简介"></a>5.1 Servlet简介</h2><ul><li>Servlet就是sun公司开发动态web的一门技术 </li><li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小 步骤： <ul><li>编写一个类，实现Servlet接口 </li><li>把开发好的Java类部署到web服务器中。</li></ul></li></ul><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p><h2 id="5-2-HelloServlet"><a href="#5-2-HelloServlet" class="headerlink" title="5.2 HelloServlet"></a>5.2 HelloServlet</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823181435.png" alt="QQ截图20220823181435"></p><p>浏览器输入：<a href="http://localhost:8080/servlet-01/">http://localhost:8080/servlet-01/</a> 访问index.jsp</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823180017.png" alt="QQ截图20220823180017"></p><p>浏览器输入：<a href="http://localhost:8080/servlet-01/HelloServlet">http://localhost:8080/servlet-01/HelloServlet</a> 访问web项目</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823180036.png" alt="QQ截图20220823180036"></p><p><strong>实现步骤：</strong></p><ol><li><p>在 pom.xml 中导入Servlet依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--servlet依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--jsp依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个Servlet程序</p><p>编写一个普通类 ，实现Servlet接口，这里我们直接继承HttpServlet</p><p><img src="https://img.yiqiangshiyia.cn/blog/httpservlet.jpg" alt="httpservlet"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//ServletOutputStream outputStream = resp.getOutputStream();</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter(); <span class="hljs-comment">//响应流</span><br>        writer.print(<span class="hljs-string">&quot;Hello,Servlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Servlet的映射</p><ol><li><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器， 所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径</p><p>web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.study.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>配置Tomcat</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220821203547.png" alt="QQ截图20220821203547"></p></li><li><p>启动测试</p><p>浏览器输入：<a href="http://localhost:8080/servlet-01/HelloServlet">http://localhost:8080/servlet-01/HelloServlet</a> 访问web项目</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823180036.png" alt="QQ截图20220823180036"></p></li></ol><h2 id="5-3-Servlet原理"><a href="#5-3-Servlet原理" class="headerlink" title="5.3 Servlet原理"></a>5.3 Servlet原理</h2><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb050.jpg" alt="javaweb050"></p><h2 id="5-4-Mapping问题"><a href="#5-4-Mapping问题" class="headerlink" title="5.4 Mapping问题"></a>5.4 Mapping问题</h2><ol><li><p>一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello3<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello4<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello5<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--默认请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>指定一些后缀或者前缀</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以自定义后缀实现请求映射</span><br><span class="hljs-comment">注意点，*前面不能加项目映射的路径</span><br><span class="hljs-comment">hello/aaaaa.com</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.com<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>优先级问题</p><p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--404--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.study.servlet.ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="5-5-ServletContext"><a href="#5-5-ServletContext" class="headerlink" title="5.5 ServletContext"></a>5.5 ServletContext</h2><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用</p><p><strong>ServletContext对象的作用：</strong> </p><p><strong>1.共享数据</strong></p><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到</p><p>编写Servlet</p><p>HelloServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//this.getInitParameter()  初始化参数</span><br>        <span class="hljs-comment">//this.getServletConfig()  Servlet配置</span><br>        <span class="hljs-comment">//this.getServletContext()  Servlet上下文</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;林慕椿&quot;</span>;  <span class="hljs-comment">//数据</span><br>        context.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);  <span class="hljs-comment">//将一个数据保存在了ServletContext中，名字为：username，值为username</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>GetServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String)context.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.getWriter().print(<span class="hljs-string">&quot;名字：&quot;</span>+username);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.study.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.study.servlet.GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试访问结果</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220823204224.png" alt="QQ截图20220823204224"></p><p><strong>2.获取初始化参数</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置一些web应用初始化参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> context.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>resp.getWriter().print(url);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.请求转发</strong></p><p>转发路径不会发生改变，重定向路径会发生改变</p><p>简单理解转发：实现了页面跳转，访问 <a href="http://localhost:8080/servlet-01/ServletDemo01">http://localhost:8080/servlet-01/ServletDemo01</a> ，页面会被转发/跳转到 <a href="http://localhost:8080/servlet-01/gp">http://localhost:8080/servlet-01/gp</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>    <br><span class="hljs-comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径</span><br><span class="hljs-comment">//requestDispatcher.forward(req,resp); //调用forward实现请求转发</span><br>    <span class="hljs-comment">//合并写法</span><br>context.getRequestDispatcher(<span class="hljs-string">&quot;/gp&quot;</span>).forward(req,resp);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.读取资源文件</strong></p><p>Properties </p><ul><li>在java目录下新建properties </li><li>在resources目录下新建properties </li></ul><p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath: </p><p>思路：需要一个文件流；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>root<br>password<span class="hljs-operator">=</span><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo05</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEBINF/classes/com/study/servlet/aa.properties&quot;</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.load(is);<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>resp.getWriter().print(user+<span class="hljs-string">&quot;:&quot;</span>+pwd);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>doGet(req, resp);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问测试</p><h2 id="5-6-HttpServletResponse"><a href="#5-6-HttpServletResponse" class="headerlink" title="5.6 HttpServletResponse"></a>5.6 HttpServletResponse</h2><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对 象，代表响应的一个HttpServletResponse</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest </li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><p>作用：向浏览器输出信息、下载文件、实现验证码功能、实现重定向…</p><h3 id="5-6-1-简单分类"><a href="#5-6-1-简单分类" class="headerlink" title="5.6.1 简单分类"></a>5.6.1 简单分类</h3><p>负责向浏览器发送数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletOutputStream <span class="hljs-title function_">getOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br>PrintWriter <span class="hljs-title function_">getWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setCharacterEncoding</span><span class="hljs-params">(String var1)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentLength</span><span class="hljs-params">(<span class="hljs-type">int</span> var1)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-type">long</span> var1)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentType</span><span class="hljs-params">(String var1)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">long</span> var2)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">long</span> var2)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeader</span><span class="hljs-params">(String var1, String var2)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addHeader</span><span class="hljs-params">(String var1, String var2)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">int</span> var2)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">int</span> var2)</span>;<br></code></pre></td></tr></table></figure><p>响应的状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">SC_CONTINUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SWITCHING_PROTOCOLS</span> <span class="hljs-operator">=</span> <span class="hljs-number">101</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_CREATED</span> <span class="hljs-operator">=</span> <span class="hljs-number">201</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_ACCEPTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">202</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NON_AUTHORITATIVE_INFORMATION</span> <span class="hljs-operator">=</span> <span class="hljs-number">203</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NO_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">204</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_RESET_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">205</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PARTIAL_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">206</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MULTIPLE_CHOICES</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MOVED_PERMANENTLY</span> <span class="hljs-operator">=</span> <span class="hljs-number">301</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MOVED_TEMPORARILY</span> <span class="hljs-operator">=</span> <span class="hljs-number">302</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">302</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SEE_OTHER</span> <span class="hljs-operator">=</span> <span class="hljs-number">303</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_MODIFIED</span> <span class="hljs-operator">=</span> <span class="hljs-number">304</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_USE_PROXY</span> <span class="hljs-operator">=</span> <span class="hljs-number">305</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_TEMPORARY_REDIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-number">307</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_BAD_REQUEST</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_UNAUTHORIZED</span> <span class="hljs-operator">=</span> <span class="hljs-number">401</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PAYMENT_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">402</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_FORBIDDEN</span> <span class="hljs-operator">=</span> <span class="hljs-number">403</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">404</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_METHOD_NOT_ALLOWED</span> <span class="hljs-operator">=</span> <span class="hljs-number">405</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_ACCEPTABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">406</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PROXY_AUTHENTICATION_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">407</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">408</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_CONFLICT</span> <span class="hljs-operator">=</span> <span class="hljs-number">409</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_GONE</span> <span class="hljs-operator">=</span> <span class="hljs-number">410</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_LENGTH_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">411</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PRECONDITION_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-number">412</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_ENTITY_TOO_LARGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">413</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_URI_TOO_LONG</span> <span class="hljs-operator">=</span> <span class="hljs-number">414</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_UNSUPPORTED_MEDIA_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-number">415</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUESTED_RANGE_NOT_SATISFIABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">416</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_EXPECTATION_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-number">417</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_INTERNAL_SERVER_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_IMPLEMENTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">501</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_BAD_GATEWAY</span> <span class="hljs-operator">=</span> <span class="hljs-number">502</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SERVICE_UNAVAILABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">503</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_GATEWAY_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">504</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_HTTP_VERSION_NOT_SUPPORTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">505</span>;<br></code></pre></td></tr></table></figure><h3 id="5-6-2-向浏览器输出消息"><a href="#5-6-2-向浏览器输出消息" class="headerlink" title="5.6.2 向浏览器输出消息"></a>5.6.2 向浏览器输出消息</h3><p>……</p><h3 id="5-6-3-下载文件"><a href="#5-6-3-下载文件" class="headerlink" title="5.6.3  下载文件"></a>5.6.3  下载文件</h3><ol><li>要获取下载文件的路径 </li><li>下载的文件名是啥？ </li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象 </li><li>将FileOutputStream流写入到buffer缓冲区，用OutputStream将缓冲区中的数据输出到客户端</li></ol><p>具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1. 要获取下载文件的路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\IntelliJ IDEA\\IntelliJ IDEA代码\\Servlet\\servlet-01\\src\\main\\resources\\img.jpeg&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;下载文件的路径：&quot;</span>+realPath);<br><br>        <span class="hljs-comment">//2. 下载的文件名是啥？</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>) + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//3. 设置想办法让浏览器能够支持下载我们需要的东西</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+fileName);<br>        <br>        <span class="hljs-comment">//4. 获取下载文件的输入流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br><br>        <span class="hljs-comment">//5. 创建缓冲区</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br>        <span class="hljs-comment">//6. 获取OutputStream对象</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br><br>        <span class="hljs-comment">//7. 将FileOutputStream流写入到buffer缓冲区，用OutputStream将缓冲区中的数据输出到客户端</span><br>        <span class="hljs-keyword">while</span>((len=in.read(buffer))&gt;<span class="hljs-number">0</span>)&#123;<br>            out.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        in.close();<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220824183018.png" alt="QQ截图20220824183018"></p><h3 id="5-6-4-验证码功能"><a href="#5-6-4-验证码功能" class="headerlink" title="5.6.4 验证码功能"></a>5.6.4 验证码功能</h3><p>验证怎么来的？ </p><ul><li>前端实现 </li><li>后端实现，需要用到 Java 的图片类，生产一个图片</li></ul><p>具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//如何让浏览器3秒自动刷新一次</span><br>        resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);<br><br>        <span class="hljs-comment">//在内存中创建一个图片</span><br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(<span class="hljs-number">80</span>,<span class="hljs-number">20</span>,BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">//得到图片</span><br>        <span class="hljs-type">Graphics2D</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> (Graphics2D) image.getGraphics();  <span class="hljs-comment">//笔</span><br>        <span class="hljs-comment">//设置图片的背景颜色</span><br>        g.setColor(Color.white);<br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">80</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//给图片写数据</span><br>        g.setColor(Color.BLUE );<br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-literal">null</span>,Font.BOLD,<span class="hljs-number">20</span>));<br>        g.drawString(makeNum(),<span class="hljs-number">0</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//告诉浏览器，这个请求用图片的方式打开</span><br>        resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>        <span class="hljs-comment">//网站存在缓存，不让浏览器缓存</span><br>        resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>,-<span class="hljs-number">1</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);<br><br>        <span class="hljs-comment">//把图片写给浏览器</span><br>        ImageIO.write(image,<span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br>    &#125;<br><br>    <span class="hljs-comment">//生成随机数</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">makeNum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">99999999</span>)+<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringbuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">8</span>-num.length(); i++)&#123;<br>            stringbuffer.append(<span class="hljs-string">&quot;0&quot;</span>);  <span class="hljs-comment">//确保输出8位数随机数</span><br>        &#125;<br>        num = stringbuffer.toString()+num;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220824192058.png" alt="QQ截图20220824192058"></p><h3 id="5-6-5-实现重定向"><a href="#5-6-5-实现重定向" class="headerlink" title="5.6.5 实现重定向"></a>5.6.5 实现重定向</h3><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb052.jpg" alt="javaweb052"></p><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向 </p><p>常见场景：</p><ul><li>用户登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendRedirect</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);</span><br><span class="hljs-comment">resp.setStatus(302);</span><br><span class="hljs-comment">*/</span><br>resp.sendRedirect(<span class="hljs-string">&quot;/r/img&quot;</span>);<span class="hljs-comment">//重定向</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>聊重定向和转发的区别</strong></p><p>相同点 </p><ul><li>页面都会实现跳转 </li></ul><p>不同点 </p><ul><li>请求转发的时候，url不会产生变化 </li><li>重定向时候，url地址栏会发生变化</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb053.jpg" alt="javaweb053"></p><p><strong>案例：简单实现登录重定向</strong></p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;<br>&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;<br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt; &lt;br&gt;<br>密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;<br>&lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>RequestTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span>&#123;<br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">//处理请求</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>System.out.println(username+<span class="hljs-string">&quot;:&quot;</span>+password);<br><br>    <span class="hljs-comment">//重定向时候一定要注意，路径问题，否则404；</span><br>resp.sendRedirect(<span class="hljs-string">&quot;/r/success.jsp&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>requset<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>requset<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    <br>&lt;h1&gt;Success&lt;/h1&gt;<br>    <br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="5-7-HttpServletRequest"><a href="#5-7-HttpServletRequest" class="headerlink" title="5.7 HttpServletRequest"></a>5.7 HttpServletRequest</h2><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封 装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息</p><p>作用：获取前端传递的参数、请求转发…</p><h3 id="5-7-1-获取前端传递的参数"><a href="#5-7-1-获取前端传递的参数" class="headerlink" title="5.7.1 获取前端传递的参数"></a>5.7.1 获取前端传递的参数</h3><blockquote><p>getParameter(String s)          String  //获取单个参数<br>getParameterValues(String s)    String[]  //获取多个参数，如多选框等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>String[] hobbys = req.getParameterValues(<span class="hljs-string">&quot;hobbys&quot;</span>);<br><br><span class="hljs-comment">//后台接收中文乱码问题</span><br>System.out.println(username);<br>System.out.println(password);<br>System.out.println(Arrays.toString(hobbys));<br><br>    System.out.println(req.getContextPath());<br><span class="hljs-comment">//通过请求转发</span><br><span class="hljs-comment">//这里的 / 代表当前的web应用</span><br>req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-7-2-请求转发"><a href="#5-7-2-请求转发" class="headerlink" title="5.7.2 请求转发"></a>5.7.2 请求转发</h3><p><strong>重定向和转发的区别</strong></p><p>相同点 </p><ul><li>页面都会实现跳转 </li></ul><p>不同点 </p><ul><li>请求转发的时候，url不会产生变化  —-  307 </li><li>重定向时候，url地址栏会发生变化  —-  302</li></ul><h1 id="6-Cookie、Session"><a href="#6-Cookie、Session" class="headerlink" title="6. Cookie、Session"></a>6. Cookie、Session</h1><h2 id="6-1-会话"><a href="#6-1-会话" class="headerlink" title="6.1 会话"></a>6.1 会话</h2><p><strong>会话：</strong>用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话</p><p><strong>有状态会话：</strong>一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话； </p><p><strong>一个网站，怎么证明你来过？</strong> </p><p>客户端    服务端 </p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了  —-  cookie </li><li>服务器登记你来过了，下次你来的时候我来匹配你  —-  seesion</li></ol><h2 id="6-2-保存会话的两种技术"><a href="#6-2-保存会话的两种技术" class="headerlink" title="6.2 保存会话的两种技术"></a>6.2 保存会话的两种技术</h2><p><strong>cookie</strong> </p><ul><li>客户端技术 （响应，请求） </li></ul><p><strong>session</strong> </p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session 中！</li></ul><p>常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p><h2 id="6-3-Cookie"><a href="#6-3-Cookie" class="headerlink" title="6.3 Cookie"></a>6.3 Cookie</h2><ol><li>从请求中拿到cookie信息 </li><li>服务器响应给客户端cookie</li></ol><p><strong>Cookie中常用的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies();  <span class="hljs-comment">//获得Cookie</span><br>cookie.getName();  <span class="hljs-comment">//获得cookie中的key</span><br>cookie.getValue();  <span class="hljs-comment">//获得cookie中的vlaue</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>);  <span class="hljs-comment">//新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);  <span class="hljs-comment">//设置cookie的有效期</span><br>resp.addCookie(cookie);  <span class="hljs-comment">//响应给客户端一个cookie</span><br></code></pre></td></tr></table></figure><p><strong>用Cookie获取上一次访问网站的时间：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//保存用户上一次访问的时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">//服务器告诉你你来的时间，把这个时间封装，下次带来就知道访问过网站了</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//解决中文乱码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br><br>        <span class="hljs-comment">//Cookie 服务端从客户端获取</span><br>        Cookie[] cookies = req.getCookies();  <span class="hljs-comment">//返回数组，说明cookie可能存在多个</span><br><br>        <span class="hljs-comment">//判断cookie是否存在</span><br>        <span class="hljs-keyword">if</span>(cookies != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//如果存在</span><br>            out.write(<span class="hljs-string">&quot;您上一次访问的时间是：&quot;</span>);<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;cookies.length; i++)&#123;<br>                <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> cookies[i];<br>                <span class="hljs-comment">//获取cookie的名字</span><br>                <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;LastLoginTime&quot;</span>))&#123;<br>                    <span class="hljs-comment">//获取cookie的值</span><br>                    <span class="hljs-type">long</span> <span class="hljs-variable">lastLoginTime</span> <span class="hljs-operator">=</span> Long.parseLong(cookie.getValue());<br>                    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(lastLoginTime);<br>                    out.write(date.toLocaleString());<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            out.write(<span class="hljs-string">&quot;这是您第一次访问本站！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//服务端给客户端响应一个cookie</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;lastLoginTime&quot;</span>,System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//设置Cookie有效期1天</span><br>        cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<br>        resp.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>cookie：一般会保存在本地的 用户目录下 appdata</strong></p><p>一个网站cookie是否存在上限</p><ul><li>一个Cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li><li>Cookie大小有限制4kb</li><li>300个cookie浏览器上限</li></ul><p><strong>删除Cookie</strong> </p><ul><li>不设置有效期，关闭浏览器，自动失效</li><li>设置有效期时间为 0</li></ul><p><strong>编码解码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">URLEncoder.encode(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>)<br>URLDecoder.decode(cookie.getValue(),<span class="hljs-string">&quot;UTF-8&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="6-4-Session（重点）"><a href="#6-4-Session（重点）" class="headerlink" title="6.4 Session（重点）"></a>6.4 Session（重点）</h2><p><strong>什么是Session：</strong> </p><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在</li><li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息    保存购物车的信息</li></ul><p><strong>Session和cookie的区别：</strong> </p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个） </li><li>Session把用户的数据写到用户独占Session中，服务器端保存 （保存重要的信息，减少服务器资源的浪费） </li><li>Session对象由服务创建</li></ul><p><strong>使用场景：</strong> </p><ul><li>保存一个登录用户的信息</li><li>购物车信息</li><li>在整个网站中经常会使用的数据，我们将它保存在Session中</li></ul><p><strong>使用Session：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//解决乱码问题</span><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>    <span class="hljs-comment">//得到Session</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br><span class="hljs-comment">//给Session中存东西</span><br>session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-number">1</span>));<br><span class="hljs-comment">//获取Session的ID</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> session.getId();<br><br>    <span class="hljs-comment">//判断Session是不是新创建</span><br><span class="hljs-keyword">if</span> (session.isNew())&#123;<br>resp.getWriter().write(<span class="hljs-string">&quot;session创建成功,ID:&quot;</span>+sessionId);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>resp.getWriter().write(<span class="hljs-string">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);<br>&#125;<br><br><span class="hljs-comment">//Session创建的时候做了什么事情；</span><br><span class="hljs-comment">// Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span><br><span class="hljs-comment">// resp.addCookie(cookie);</span><br>&#125;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>doGet(req, resp);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//得到Session</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>System.out.println(person.toString());<br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//手动注销Session</span><br>session.invalidate();<br></code></pre></td></tr></table></figure><p><strong>会话自动过期：web.xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="7-JSP"><a href="#7-JSP" class="headerlink" title="7. JSP"></a>7. JSP</h1><p>……</p><h1 id="8-JavaBean"><a href="#8-JavaBean" class="headerlink" title="8. JavaBean"></a>8. JavaBean</h1><p>实体类 </p><p>JavaBean有特定的写法： </p><ul><li>必须要有一个无参构造 </li><li>属性必须私有化 </li><li>必须有对应的get/set方法</li></ul><p>一般用来和数据库的字段做映射 ORM</p><p>ORM ：对象关系映射</p><ul><li>表  —-&gt;  类 </li><li>字段  —-&gt;  属性 </li><li>行记录  —-&gt;  对象</li></ul><p><strong>people表</strong></p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>林慕椿</td><td>18</td><td>青岛</td></tr><tr><td>2</td><td>林南芊</td><td>20</td><td>北京</td></tr><tr><td>3</td><td>林落诗</td><td>19</td><td>南京</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">private</span> String address;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-number">18</span>，<span class="hljs-string">&quot;青岛&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;林南芊&quot;</span>,<span class="hljs-number">20</span>，<span class="hljs-string">&quot;北京&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;林落诗&quot;</span>,<span class="hljs-number">19</span>，<span class="hljs-string">&quot;南京&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9-MVC三层架构"><a href="#9-MVC三层架构" class="headerlink" title="9. MVC三层架构"></a>9. MVC三层架构</h1><p>什么是MVC： Model view Controller    模型、视图、控制器</p><h2 id="9-1-早些年"><a href="#9-1-早些年" class="headerlink" title="9.1 早些年"></a>9.1 早些年</h2><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb061.jpg" alt="javaweb061"></p><p>用户直接访问控制层，控制层就可以直接操作数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">servlet--CRUD--&gt;数据库<br>弊端：程序十分臃肿，不利于维护<br>servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码<br><br>架构：没有什么是加一层解决不了的！<br>程序员调用<br>  |<br>JDBC<br>  |<br>Mysql Oracle SqlServer ....<br></code></pre></td></tr></table></figure><h2 id="9-2-MVC三层架构"><a href="#9-2-MVC三层架构" class="headerlink" title="9.2 MVC三层架构"></a>9.2 MVC三层架构</h2><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb062.jpg" alt="javaweb062"></p><p><strong>Model</strong> </p><ul><li>业务处理 ：业务逻辑（Service） </li><li>数据持久层：CRUD （Dao） </li></ul><p><strong>View</strong> </p><ul><li>展示数据 </li><li>提供链接发起Servlet请求 （a，form，img…） </li></ul><p><strong>Controller</strong> （Servlet） </p><ul><li><p>接收用户的请求 ：（req：请求参数、Session信息….） </p></li><li><p>交给业务层处理对应的代码 </p></li><li><p>控制视图的跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，<br>password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用<br>户名和密码是否正确--&gt;数据库<br></code></pre></td></tr></table></figure></li></ul><h1 id="10-Filter-（重点）"><a href="#10-Filter-（重点）" class="headerlink" title="10. Filter （重点）"></a>10. Filter （重点）</h1><p>Filter：过滤器</p><p><strong>作用：</strong>用来过滤网站的数据</p><ul><li>处理中文乱码 </li><li>登录验证….</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/javaweb063.jpg" alt="javaweb063"></p><p><strong>Filter开发步骤：</strong></p><ol><li><p>导包（pom.xml）</p></li><li><p>编写过滤器</p><p>编写Java类实现Filter接口，重写对应的三个方法（接口在 javax.servlet 包下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter初始化&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//Chain : 链</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="hljs-comment">        2. 必须要让过滤器继续同行 chain.doFilter(request,response);</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行前....&quot;</span>);<br>        chain.doFilter(request,response); <span class="hljs-comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止</span><br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行后....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//销毁：web服务器关闭的时候，过滤会销毁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在web.xml中配置 Filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.study.filter.CharacterEncodingFilter&lt;/filterclass&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-comment">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">整个网站的请求都要进过这个过滤器</span><br><span class="hljs-comment">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="11-监听器"><a href="#11-监听器" class="headerlink" title="11. 监听器"></a>11. 监听器</h1><p>实现一个监听器的接口（有N种）</p><ol><li><p>编写一个监听器</p><p>编写一个Java类实现监听器的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//统计网站在线人数 ： 统计session</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionListener</span> &#123;<br><br>    <span class="hljs-comment">//创建session监听： 看你的一举一动</span><br><span class="hljs-comment">//一旦创建Session就会触发一次这个事件！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br>System.out.println(se.getSession().getId());<br><span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><span class="hljs-keyword">if</span> (onlineCount==<span class="hljs-literal">null</span>)&#123;<br>onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(count+<span class="hljs-number">1</span>);<br>&#125;<br>ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br>&#125;<br>    <br>    <span class="hljs-comment">//销毁session监听</span><br><span class="hljs-comment">//一旦销毁Session就会触发一次这个事件！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><span class="hljs-keyword">if</span> (onlineCount==<span class="hljs-literal">null</span>)&#123;<br>onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">0</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(count-<span class="hljs-number">1</span>);<br>&#125;<br>ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br>&#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Session销毁：</span><br><span class="hljs-comment">    1. 手动销毁 getSession().invalidate();</span><br><span class="hljs-comment">    2. 自动销毁</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>web.xml中注册监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册监听器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.study.listener.OnlineCountListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>看情况是否使用</p></li></ol><h1 id="12-过滤器、监听器常见应用"><a href="#12-过滤器、监听器常见应用" class="headerlink" title="12. 过滤器、监听器常见应用"></a>12. 过滤器、监听器常见应用</h1><p><strong>监听器：GUI编程中经常使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPanel</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;中秋节快乐&quot;</span>); <span class="hljs-comment">//新建一个窗体</span><br><span class="hljs-type">Panel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">//面板</span><br>frame.setLayout(<span class="hljs-literal">null</span>); <span class="hljs-comment">//设置窗体的布局</span><br><br>        frame.setBounds(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>frame.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)); <span class="hljs-comment">//设置背景颜色</span><br><br>        panel.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>panel.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)); <span class="hljs-comment">//设置背景颜色</span><br><br>        frame.add(panel);<br>  frame.setVisible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//监听事件，监听关闭事件</span><br>frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br><span class="hljs-built_in">super</span>.windowClosing(e);<br>&#125;<br>&#125;);<br>&#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！ </p><ol><li><p>用户登录之后，向Sesison中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) req;<br><span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) resp;<br><br><span class="hljs-keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="hljs-literal">null</span>)&#123;<br><br>    response.sendRedirect(<span class="hljs-string">&quot;/error.jsp&quot;</span>);<br>&#125;<br><br>chain.doFilter(request,response);<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二数据结构与算法实习</title>
    <link href="/2022/08/20/%E5%A4%A7%E4%BA%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AE%9E%E4%B9%A0/"/>
    <url>/2022/08/20/%E5%A4%A7%E4%BA%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AE%9E%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>大二小学期数据结构与算法实习PTA 12道数据结构题目题解和AC代码</p><p>时间：2022.08.15-2022.09.05    网课</p></blockquote><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220903162715.png" alt="QQ截图20220903162715"></p><h2 id="第1题-范围查询-Range"><a href="#第1题-范围查询-Range" class="headerlink" title="第1题 范围查询(Range)"></a>第1题 范围查询(Range)</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>数轴上有n个点，对于任一闭区间 [a, b]，试计算落在其内的点数。<br>要求：<br>0 ≤ n, m ≤ 5×10^5<br>对于每次查询的区间[a, b]，都有a ≤ b<br>各点的坐标互异</p><p><strong>输入格式:</strong></p><p>第一行包括两个整数：点的总数n，查询的次数m。<br>第二行包含n个数，为各个点的坐标。<br>以下m行，各包含两个整数：查询区间的左、右边界a和b。</p><p><strong>输出格式:</strong></p><p>对每次查询，输出落在闭区间[a, b]内点的个数。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">0<br>3<br></code></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>未遇到问题</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 500000</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,a,b;<br>    <span class="hljs-type">int</span> nums[N+<span class="hljs-number">10</span>];<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        cin&gt;&gt;nums[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt;= a &amp;&amp; nums[i] &lt;= b)&#123;<br>                ans++;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第2题-祖玛-Zuma"><a href="#第2题-祖玛-Zuma" class="headerlink" title="第2题 祖玛(Zuma)"></a>第2题 祖玛(Zuma)</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p><img src="https://img.yiqiangshiyia.cn/blog/4570edbb-6efb-4450-8356-957f4f6d562e.png" alt="4570edbb-6efb-4450-8356-957f4f6d562e"></p><p>祖玛是一款曾经风靡全球的游戏，其玩法是：在一条轨道上初始排列着若干个彩色珠子，其中任意三个相邻的珠子不会完全同色。此后，你可以发射珠子到轨道上并加入原有序列中。一旦有三个或更多同色的珠子变成相邻，它们就会立即消失。这类消除现象可能会连锁式发生，其间你将暂时不能发射珠子。<br>开发商最近准备为玩家写一个游戏过程的回放工具。他们已经在游戏内完成了过程记录的功能，而回放功能的实现则委托你来完成。<br>游戏过程的记录中，首先是轨道上初始的珠子序列，然后是玩家接下来所做的一系列操作。你的任务是，在各次操作之后及时计算出新的珠子序列。</p><p><strong>输入格式:</strong></p><p>第一行是一个由大写字母’A’~’Z’组成的字符串，表示轨道上初始的珠子序列，不同的字母表示不同的颜色。<br>第二行是一个数字n，表示整个回放过程共有n次操作。<br>接下来的n行依次对应于各次操作。每次操作由一个数字k和一个大写字母Σ描述，以空格分隔。其中，Σ为新珠子的颜色。若插入前共有m颗珠子，则k ∈ [0, m]表示新珠子嵌入之后（尚未发生消除之前）在轨道上的位序。<br>要求：<br>0 ≤ n ≤ 10^4<br>0 ≤ 初始珠子数量 ≤ 10^4</p><p><strong>输出格式:</strong></p><p>输出共n行，依次给出各次操作（及可能随即发生的消除现象）之后轨道上的珠子序列。<br>如果轨道上已没有珠子，则以“-”表示。</p><p><strong>输入样例:</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">ACCBA<br><span class="hljs-number">5</span><br><span class="hljs-number">1</span> <span class="hljs-selector-tag">B</span><br><span class="hljs-number">0</span> <span class="hljs-selector-tag">A</span><br><span class="hljs-number">2</span> <span class="hljs-selector-tag">B</span><br><span class="hljs-number">4</span> C<br><span class="hljs-number">0</span> <span class="hljs-selector-tag">A</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">ABCCBA<br>AABCCBA<br>AABBCCBA<br><span class="hljs-bullet">-</span><br><span class="hljs-bullet"></span>A<br></code></pre></td></tr></table></figure><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>未遇到问题</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 10000</span><br><br><span class="hljs-comment">//判断是否有三个连续重复的字母</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">repeat</span><span class="hljs-params">(string s)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == s[i+<span class="hljs-number">1</span>] &amp;&amp; s[i+<span class="hljs-number">1</span>] == s[i+<span class="hljs-number">2</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m,n;<br>    string str;<br>    cin&gt;&gt;str;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-type">int</span> index;<br>        <span class="hljs-type">char</span> ch;<br>        cin&gt;&gt;index&gt;&gt;ch;<br>        string str2 = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,index)+ch+str.<span class="hljs-built_in">substr</span>(index,str.<span class="hljs-built_in">size</span>()-index);<br>        <span class="hljs-comment">//调用函数判断是否存在重复</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">repeat</span>(str2))&#123;<br>            <span class="hljs-comment">//去重</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;str2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-3</span>; i++)&#123;<br>                <span class="hljs-keyword">if</span>(str2[i] == str2[i+<span class="hljs-number">1</span>] &amp;&amp; str2[i+<span class="hljs-number">1</span>] == str2[i+<span class="hljs-number">2</span>])&#123;  <span class="hljs-comment">//如果连续三个相等</span><br>                    str2 = str2.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,i)+str2.<span class="hljs-built_in">substr</span>(i+<span class="hljs-number">3</span>,str2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-3</span>-i);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(str2[str2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-3</span>] == str2[str2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>] &amp;&amp; str2[str2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>] == str2[str2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>])&#123;<br>                str2 = str2.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,str2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-3</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(str2.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>&lt;&lt;endl;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;str2&lt;&lt;endl;<br>        &#125;<br>        str = str2;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第3题-灯塔-LightHouse"><a href="#第3题-灯塔-LightHouse" class="headerlink" title="第3题 灯塔(LightHouse)"></a>第3题 灯塔(LightHouse)</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>海上有许多灯塔，为过路船只照明。</p><p><img src="https://img.yiqiangshiyia.cn/blog/3d494b5e-b74e-4444-ae45-12394961241f.png" alt="3d494b5e-b74e-4444-ae45-12394961241f"></p><p>（图一）<br>如图一所示，每个灯塔都配有一盏探照灯，照亮其东北、西南两个对顶的直角区域。探照灯的功率之大，足以覆盖任何距离。灯塔本身是如此之小，可以假定它们不会彼此遮挡。</p><p><img src="https://img.yiqiangshiyia.cn/blog/bfdf2806-18f1-4cbe-84f2-4a03ad5737cd.png" alt="bfdf2806-18f1-4cbe-84f2-4a03ad5737cd"></p><p>（图二）<br>若灯塔A、B均在对方的照亮范围内，则称它们能够照亮彼此。比如在图二的实例中，蓝、红灯塔可照亮彼此，蓝、绿灯塔则不是，红、绿灯塔也不是。<br>现在，对于任何一组给定的灯塔，请计算出其中有多少对灯塔能够照亮彼此。</p><p><strong>输入格式:</strong></p><p>共n+1行。<br>第1行为1个整数n，表示灯塔的总数。<br>第2到n+1行每行包含2个整数x, y，分别表示各灯塔的横、纵坐标。</p><p>要求：<br>1 ≤ n ≤ 4×10^6<br>灯塔的坐标x, y是整数，且不同灯塔的x, y坐标均互异<br>1 ≤ x, y ≤ 10^8</p><p><strong>输出格式:</strong></p><p>1个整数，表示可照亮彼此的灯塔对的数量。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p><strong>problem：</strong><br>没有编译和运行错误，但是无法输入样例，控制台显示 ：</p><blockquote><p>Process returned -1073741571 (0xC00000FD) execution time : 2.097 s Press any</p></blockquote><p><strong>cause：</strong><br>#define N 4000000<br>int a[N+10][2];<br>在函数内部初始化了一个相当大的数组，导致内存溢出，从而导致整个函数（即便是在初始化这个数组之前的代码）未执行，并导致整个程序直接退出！<br><strong>solve：</strong><br>cin&gt;&gt;n;<br>int a[n+10][2];<br>避免了定义数组内存太大，导致内存溢出和浪费</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,ans = <span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a[n+<span class="hljs-number">10</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        cin&gt;&gt;a[i][<span class="hljs-number">0</span>]&gt;&gt;a[i][<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;n; j++)&#123;<br>            <span class="hljs-keyword">if</span>((a[j][<span class="hljs-number">0</span>] - a[i][<span class="hljs-number">0</span>]) * (a[j][<span class="hljs-number">1</span>] - a[i][<span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0</span>)&#123;<br>                ans++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第4题-列车调度-Train"><a href="#第4题-列车调度-Train" class="headerlink" title="第4题 列车调度(Train)"></a>第4题 列车调度(Train)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>某列车调度站的铁道联接结构如Figure 1所示。</p><p><img src="https://img.yiqiangshiyia.cn/blog/1bb71727-2fd5-4d53-b6c9-3a02ab1f4e79.png" alt="1bb71727-2fd5-4d53-b6c9-3a02ab1f4e79"></p><p>其中，A为入口，B为出口，S为中转盲端。所有铁道均为单轨单向式：列车行驶的方向只能是从A到S，再从S到B；另外，不允许超车。因为车厢可在S中驻留，所以它们从B端驶出的次序，可能与从A端驶入的次序不同。不过S的容量有限，同时驻留的车厢不得超过m节。<br>设某列车由编号依次为{1, 2, …, n}的n节车厢组成。调度员希望知道，按照以上交通规则，这些车厢能否以{a1, a2, …, an}的次序，重新排列后从B端驶出。如果可行，应该以怎样的次序操作?</p><p><strong>输入格式:</strong></p><p>共两行。<br>第一行为两个整数n，m。<br>第二行为以空格分隔的n个整数，保证为{1, 2, …, n}的一个排列，表示待判断可行性的驶出序列{a1，a2，…，an}。</p><p>要求：<br>1 ≤ n ≤ 1,600,000<br>0 ≤ m ≤ 1,600,000</p><p><strong>输出格式:</strong></p><p>若驶出序列可行，则输出操作序列，其中push表示车厢从A进入S，pop表示车厢从S进入B，每个操作占一行。<br>若不可行，则输出No。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">push</span><br><span class="hljs-built_in">pop</span><br><span class="hljs-built_in">push</span><br><span class="hljs-built_in">pop</span><br><span class="hljs-built_in">push</span><br><span class="hljs-built_in">pop</span><br><span class="hljs-built_in">push</span><br><span class="hljs-built_in">push</span><br><span class="hljs-built_in">pop</span><br><span class="hljs-built_in">pop</span><br></code></pre></td></tr></table></figure><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>栈的应用：模拟出栈和进栈，将中转盲端看成一个栈，A到S：入栈，S到B：出栈，最大驻留车厢：栈的大小</p><p>初始栈为空，循环遍历出栈顺序的数组。</p><ul><li><p>如果当前栈顶元素小于应该出栈的元素，则顺次把后面的数字入栈，记录入栈</p></li><li><p>如果当前栈顶元素等于应该出栈的元素，则出栈，遍历数组的指针后移 ，记录出栈</p></li><li><p>如果当前栈顶元素大于应该出栈的元素，则说明该出栈顺序不可能实现，输出No，然后结束程序</p></li></ul><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m,x;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">1</span>;<br>    stack&lt;<span class="hljs-type">int</span>&gt; st;<br>    vector&lt;string&gt; ans;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        cin&gt;&gt;x;<br>        <span class="hljs-keyword">while</span>(now &lt;= x)&#123;<br>            st.<span class="hljs-built_in">push</span>(now);<br>            now++;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;push&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">size</span>() &gt; m)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == x)&#123;<br>            st.<span class="hljs-built_in">pop</span>();<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;pop&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;ans.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        cout&lt;&lt;ans[i]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第5题-真二叉树重构-Proper-Rebuild"><a href="#第5题-真二叉树重构-Proper-Rebuild" class="headerlink" title="第5题 真二叉树重构(Proper Rebuild)"></a>第5题 真二叉树重构(Proper Rebuild)</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>一般来说，给定二叉树的先序遍历序列和后序遍历序列，并不能唯一确定该二叉树。</p><p><img src="https://img.yiqiangshiyia.cn/blog/f3bfdbf4-e2af-4bc9-8ecb-dd7e4868991b.png" alt="f3bfdbf4-e2af-4bc9-8ecb-dd7e4868991b"></p><p>（图一）<br>比如图一中的两棵二叉树，虽然它们是不同二叉树，但是它们的先序、后序遍历序列都是相同的。<br>但是对于“真二叉树”（每个内部节点都有两个孩子的二叉树），给定它的先序、后序遍历序列足以完全确定它的结构。<br>将二叉树的n个节点用[1, n]内的整数进行编号，输入一棵真二叉树的先序、后序遍历序列，请输出它的中序遍历序列。</p><p><strong>输入格式:</strong></p><p>第一行为一个整数n，即二叉树中节点的个数。<br>第二、三行为已知的先序、后序遍历序列。</p><p>要求：<br>1 ≤ n ≤ 4,000,000<br>输入的序列是{1,2…n}的排列，且对应于一棵合法的真二叉树</p><p><strong>输出格式:</strong></p><p>仅一行，给定真二叉树的中序遍历序列。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>利用先序遍历和后序遍历构建一颗完整的二叉树，需要充分利用先序遍历先打印再递归左右、后序遍历是先递归左右再打印的特点建二叉树。</p><p>题目给出了真二叉树的前序和后序遍历，只需对两者进行对比，就能得到根节点和左右子树，然后再对左右子树进行递归即可构建出完整的二叉树。</p><p>构建出完整的二叉树后中序遍历输出</p><blockquote><p>这道题目还是挺好的，考察了二叉树的重构和遍历，这道题是给出前序遍历和后序遍历输出中序遍历，LC上还有一道题是给出前序遍历和中序遍历输出后序遍历：</p><ul><li><a href="https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/">https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/</a></li></ul><p>此外这道题在数组指针传递和二叉树构建都要好好学习一下！！！</p></blockquote><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//定义二叉树</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">treeNode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    treeNode* left;<br>    treeNode* right;<br>    <span class="hljs-built_in">treeNode</span>() :<br><span class="hljs-built_in">left</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">NULL</span>) &#123; &#125;<br><span class="hljs-built_in">treeNode</span>(<span class="hljs-type">int</span> e, treeNode* left = <span class="hljs-literal">NULL</span>, treeNode* right = <span class="hljs-literal">NULL</span>) :<br><span class="hljs-built_in">data</span>(e), <span class="hljs-built_in">left</span>(left), <span class="hljs-built_in">right</span>(right) &#123; &#125;<br>&#125;;<br><br><span class="hljs-comment">//根据先序遍历和后序遍历重构二叉树</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(treeNode* root, <span class="hljs-type">int</span>* pre, <span class="hljs-type">int</span>* post, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> postleft,preright;  <span class="hljs-comment">//定义后序遍历左子树和先序遍历的右子树根节点下标</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(pre[i] == post[n<span class="hljs-number">-2</span>])&#123;<br>            preright = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(pre[<span class="hljs-number">1</span>] == post[i])&#123;<br>            postleft = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    root-&gt;left = <span class="hljs-keyword">new</span> <span class="hljs-built_in">treeNode</span>(pre[<span class="hljs-number">1</span>]);<br>    root-&gt;right = <span class="hljs-keyword">new</span> <span class="hljs-built_in">treeNode</span>(post[n<span class="hljs-number">-2</span>]);<br>    <span class="hljs-comment">//对左右子树递归重构</span><br>    <span class="hljs-built_in">rebuild</span>(root-&gt;left, pre+<span class="hljs-number">1</span>, post, preright<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">rebuild</span>(root-&gt;right, pre+preright, post+postleft+<span class="hljs-number">1</span>, n-postleft<span class="hljs-number">-2</span>);<br>&#125;<br><br><span class="hljs-comment">//二叉树中序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(treeNode* root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">inorder</span>(root-&gt;left);<br>    cout &lt;&lt; root-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">inorder</span>(root-&gt;right);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *pre = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> *post = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        cin&gt;&gt;pre[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        cin&gt;&gt;post[i];<br>    &#125;<br>    treeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">treeNode</span>(pre[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">rebuild</span>(root, pre, post, n);<br>    <span class="hljs-built_in">inorder</span>(root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第6题-旅行商-TSP"><a href="#第6题-旅行商-TSP" class="headerlink" title="第6题 旅行商(TSP)"></a>第6题 旅行商(TSP)</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h3><p>Shrek是一个大山里的邮递员，每天负责给所在地区的n个村庄派发信件。但杯具的是，由于道路狭窄，年久失修，村庄间的道路都只能单向通过，甚至有些村庄无法从任意一个村庄到达。这样我们只能希望尽可能多的村庄可以收到投递的信件。<br>Shrek希望知道如何选定一个村庄A作为起点（我们将他空投到该村庄），依次经过尽可能多的村庄，路途中的每个村庄都经过仅一次，最终到达终点村庄B，完成整个送信过程。这个任务交给你来完成。</p><p><strong>输入格式:</strong></p><p>第一行包括两个整数n，m，分别表示村庄的个数以及可以通行的道路的数目。<br>以下共m行，每行用两个整数v1和v2表示一条道路，两个整数分别为道路连接的村庄号，道路的方向为从v1至v2，n个村庄编号为[1, n]。</p><p>要求：<br>1 ≤ n ≤ 1,000,000<br>0 ≤ m ≤ 1,000,000<br>输入保证道路之间没有形成环</p><p><strong>输出格式:</strong></p><p>输出一个数字，表示符合条件的最长道路经过的村庄数。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>输出样例</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p><strong>point：</strong>图+拓扑排序</p><p>做这道题前先学习了一下拓扑排序的知识</p><p><strong>拓扑排序：</strong></p><blockquote><p>对一个<a href="https://baike.baidu.com/item/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/10972513">有向无环图</a>(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边&lt;u,v&gt;∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个<a href="https://baike.baidu.com/item/%E5%81%8F%E5%BA%8F/2439087">偏序</a>得到该集合上的一个<a href="https://baike.baidu.com/item/%E5%85%A8%E5%BA%8F/10577699">全序</a>，这个操作称之为拓扑排序。</p><p><strong>执行步骤：</strong></p><p>由AOV网构造拓扑序列的拓扑排序算法主要是循环执行以下两步，直到不存在入度为0的顶点为止。</p><p>(1) 选择一个入度为0的顶点并输出之；</p><p>(2) 从网中删除此顶点及所有<a href="https://baike.baidu.com/item/%E5%87%BA%E8%BE%B9">出边</a>。</p><p>循环结束后，若输出的顶点数小于网中的顶点数，则输出“有<a href="https://baike.baidu.com/item/%E5%9B%9E%E8%B7%AF/35792">回路</a>”信息，否则输出的顶点序列就是一种拓扑<a href="https://baike.baidu.com/item/%E5%BA%8F%E5%88%97/1302588">序列</a>。</p><p><img src="https://img.yiqiangshiyia.cn/blog/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F.jpg" alt="拓扑排序"></p></blockquote><p>好了，学会了拓扑排序现在可以开始做TSP了！可是一下午连别人写的代码都没看懂！！！😭</p><p><strong>解题思路：</strong></p><ol><li><p>拓扑排序</p><p>策略：将所有入度为0的顶点入栈，弹出栈顶元素，若此元素存在入度为1的邻居，将其入栈并将此邻居的入度-1，重复直到栈空。</p></li><li><p>将题意与拓扑排序结合</p><p>题目需要求的变量可等效地理解为求图的最大路径上的顶点数，注意到根据此题，顶点数=路径长度+1，于是问题转换为求图的最大路径长度，而图的最大路径长度就是到所有顶点的最大路径长度的最大值，如何求得到每个顶点的最大路径长度呢？我们知道拓扑排序算法将遍历图的每个入度为0的顶点的邻居，那么可采用动态规划的策略，为每个顶点增设一个长度属性，每遍历一个入度为0的顶点的邻居，此邻居的长度属性就更新为此邻居的长度属性与此入度为0的顶点的长度属性+1之间的较大者，更新后的值即当前到此邻居的最大路径长度，算法结束后，将得到到每个顶点的最大路径长度。为提升算法效率，可增设一记录图最大路径长度的变量，每次更新完一个顶点的长度属性后，就将此变量更新为此顶点的长度属性与此变量之间的较大者，算法结束后，将得到图的最大路径长度。</p></li></ol><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 1000000</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ENode</span>&#123;<br><span class="hljs-type">int</span> vsub;<br>ENode *succ;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VNode</span>&#123;<br><span class="hljs-type">int</span> in,len;<br>ENode *fstEdge;<br>&#125;;<br>VNode adjList[MAXSIZE];ENode *t;<br><span class="hljs-type">int</span> visited[MAXSIZE],stack[MAXSIZE],top=<span class="hljs-number">0</span>,maxlen=<span class="hljs-number">0</span>,n,m,v1,v2;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetMax</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;b)&#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//拓扑排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TSort</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!adjList[i].in)&#123;<br>            stack[++top] = i;<br>        &#125;<br>&#125;<br><span class="hljs-keyword">while</span>(top)&#123;<br><span class="hljs-type">int</span> v=stack[top--];<br><span class="hljs-keyword">for</span>(ENode *p=adjList[v].fstEdge;p;p=p-&gt;succ)&#123;<br>adjList[p-&gt;vsub].len = <span class="hljs-built_in">GetMax</span>(adjList[v].len+<span class="hljs-number">1</span>,adjList[p-&gt;vsub].len);<br>maxlen = <span class="hljs-built_in">GetMax</span>(adjList[p-&gt;vsub].len,maxlen);<br><span class="hljs-keyword">if</span>(!(--adjList[p-&gt;vsub].in))&#123;<br>                stack[++top] = p-&gt;vsub;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>cin&gt;&gt;v1&gt;&gt;v2;<br>t = <span class="hljs-keyword">new</span> ENode;<br>t-&gt;vsub = v2;<br>adjList[v2].in++;<br>t-&gt;succ = adjList[v1].fstEdge;<br>adjList[v1].fstEdge = t;<br>&#125;<br><span class="hljs-built_in">TSort</span>();<br>cout&lt;&lt;maxlen+<span class="hljs-number">1</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第7题-无线广播-Broadcast"><a href="#第7题-无线广播-Broadcast" class="headerlink" title="第7题 无线广播(Broadcast)"></a>第7题 无线广播(Broadcast)</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a>题目大意</h3><p>某广播公司要在一个地区架设无线广播发射装置。该地区共有n个小镇，每个小镇都要安装一台发射机并播放各自的节目。<br>不过，该公司只获得了FM104.2和FM98.6两个波段的授权，而使用同一波段的发射机会互相干扰。已知每台发射机的信号覆盖范围是以它为圆心，20km为半径的圆形区域，因此，如果距离小于20km的两个小镇使用同样的波段，那么它们就会由于波段干扰而无法正常收听节目。现在给出这些距离小于20km的小镇列表，试判断该公司能否使得整个地区的居民正常听到广播节目。</p><p><strong>输入格式:</strong></p><p>第一行为两个整数n，m，分别为小镇的个数以及接下来小于20km的小镇对的数目。 接下来的m行，每行2个整数，表示两个小镇的距离小于20km（编号从1开始）。</p><p>要求：<br>1 ≤ n ≤ 10000<br>1 ≤ m ≤ 30000<br>不需要考虑给定的20km小镇列表的空间特性，比如是否满足三角不等式，是否利用传递性可以推出更多的信息等等。</p><p><strong>输出格式:</strong></p><p>如果能够满足要求，输出1，否则输出-1。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>point：</strong>图的广度优先搜索</p><p><strong>Get Point：</strong>加深了对图+二叉树的两种遍历方式深度优先遍历和广度优先遍历的理解</p><p>需要学习的知识：数据结构图的创建和遍历</p><p><a href="https://www.bilibili.com/video/BV1T64y147r1?spm_id_from=333.337.search-card.all.click&amp;vd_source=7ad06c95735c5cae130daf28b94f5d0f">https://www.bilibili.com/video/BV1T64y147r1?spm_id_from=333.337.search-card.all.click&amp;vd_source=7ad06c95735c5cae130daf28b94f5d0f</a></p></blockquote><p><strong>问题分析：</strong></p><p>将一对距离小于20km的小镇模拟为一对无向边节点，这样所有的小镇可以生成一个多连通无向图。题目中要求距离小于20km的小镇（即输入给出的一对小镇）不能够放置同频率的波段，且广播一共有两种不同的波段。分别为两种波段设置标记值，问题可以转化成所有小镇所构建的多连通无向图中的任意相邻两个节点的标记值不同。</p><p><strong>解题思路：</strong></p><p>问题可转化为图的广度优先搜索问题，节点和其邻节点的数据不能相同（利用BFS一层一层的向外拓展并标记图的节点，找到一对邻节点标记值相同则返回false，全部标记成功则返回true）</p><p><strong>BFS+队列：</strong>将任意一点作为源点入队（标记为1），向外将其所有邻节点入队（标记为-1），再将源点出队，在取队首点所有邻节点入队（标记为1），此判断有无邻节点为与队首同标记，有则返回false，没有则继续执行</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 10000</span><br><br><span class="hljs-type">int</span> n,m;  <span class="hljs-comment">//小镇数，相距20km内的小镇对数</span><br><span class="hljs-type">int</span> queue[N+<span class="hljs-number">10</span>],head,tail;  <span class="hljs-comment">//模拟队列</span><br><br><span class="hljs-comment">//nextTown</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    Node* next;<br>    <span class="hljs-built_in">Node</span>() &#123; next = <span class="hljs-literal">NULL</span>; &#125;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> n,Node *node) :<span class="hljs-built_in">num</span>(n),<span class="hljs-built_in">next</span>(node) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//小镇</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Town</span>&#123;<br>    <span class="hljs-type">int</span> state;  <span class="hljs-comment">//状态</span><br>    Node *nt;  <span class="hljs-comment">//nextTown</span><br>    <span class="hljs-built_in">Town</span>() &#123; state = <span class="hljs-number">0</span>; nt = <span class="hljs-literal">NULL</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>;<br>&#125;town[N];<br><br><span class="hljs-comment">//插入新边</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Town::insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;nt == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;nt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(num,<span class="hljs-literal">NULL</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;nt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(num,<span class="hljs-keyword">this</span>-&gt;nt);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    queue[tail++] = x;<br>    town[x].state = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(head &lt; tail)&#123;<br>        Town cur = town[queue[head]];  <span class="hljs-comment">//当前小镇</span><br>        Node *tmp = cur.nt;  <span class="hljs-comment">//指向nextTown</span><br>        <span class="hljs-keyword">while</span>(tmp != <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!town[tmp-&gt;num].state)&#123;<br>                town[tmp-&gt;num].state = -cur.state;<br>                queue[tail++] = tmp-&gt;num;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(town[tmp-&gt;num].state == cur.state)&#123;  <span class="hljs-comment">//波段相同被干扰</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            tmp = tmp-&gt;next;<br>        &#125;<br>        head++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>        <span class="hljs-type">int</span> x,y;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        town[x].<span class="hljs-built_in">insert</span>(y);<br>        town[y].<span class="hljs-built_in">insert</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!town[i].state)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">bfs</span>(i) == <span class="hljs-literal">false</span>)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;1&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第8题-传染链-Infectious-Chain"><a href="#第8题-传染链-Infectious-Chain" class="headerlink" title="第8题 传染链( Infectious Chain )"></a>第8题 传染链( Infectious Chain )</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a>题目大意</h3><p>某病毒可以人传人，且传染能力极强，只要与已感染该病毒的人发生接触即刻感染。<br>现给定一些感染该病毒的人员接触关系，要求你找出其中最早最长的一条传染链。</p><p><strong>输入格式:</strong></p><p>输入在第一行中给出一个正整数 N（N≤10^4），即感染病毒的人员总数，从 0 到 N−1 进行编号。<br>随后N 行按照编号顺序给出人员接触信息，每行按以下格式描述该人员的接触对象：<br>k 接触人员1 …… 接触人员k<br>其中 k 是该编号人员接触的其他人总数，后面按照时间先后给出所有接触的人员编号。题目保证传染源头有且仅有一个，且已被感染人员不会与另一个感染人员再接触。</p><p><strong>输出格式:</strong></p><p>第一行输出从源头开始的最早最长传染链长度。<br>第二行输出从源头开始的最早最长传染链，编号之间以1个空格分隔，行首尾不得有多余空格。这里的最早最长传染链是指从源头开始的传染链上的人数最多，且被感染的时间最早。<br>所谓时间最早指的两个长度相等的传染链{a1,a2,…,an}和{b1,b2,…,bn}，存在1≤k&lt;n，对于所有的i (1≤i&lt;k)都满足ai=bi，且ak被感染的时间早于bk被感染的时间。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">10</span><br><span class="hljs-number">0</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p><strong>point：</strong></p><ul><li>用深度优先搜索（dfs）找出最早最长的传染链</li><li>用一个vector&lt;int&gt;类型的容器来存储每一条接触信息，模拟传染前后的时间关系</li><li>动态规划：在dfs时，用一个step数组记录从某一位置开始能走的最大步数，后面出现该位置时直接调用，避免了大量的重复计算</li><li>用一个nxt数组找出某一位置开始找到可以走的最大的步数时进行记录，这样就可以直接对最长路径进行输出</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 10000</span><br><br><span class="hljs-type">int</span> step[N+<span class="hljs-number">10</span>];  <span class="hljs-comment">//记录从某一位置开始走能走的最大路径长度</span><br><span class="hljs-type">int</span> nxt[N+<span class="hljs-number">10</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; v[N+<span class="hljs-number">10</span>];  <span class="hljs-comment">//存储每一条接触信息</span><br><br><span class="hljs-comment">//深度优先搜索每一个index的最大路径长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(v[index].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> steps=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;v[index].<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(step[v[index][i]] &gt; steps)&#123;<br>            steps = step[v[index][i]]+<span class="hljs-number">1</span>;<br>            nxt[index] = v[index][i];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> temp = <span class="hljs-built_in">dfs</span>(v[index][i])+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(temp &gt; steps)&#123;<br>                steps = temp;<br>                nxt[index] = v[index][i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    step[index] = steps;<br>    <span class="hljs-keyword">return</span> steps;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;k; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> t;<br>            cin&gt;&gt;t;<br>            v[i].<span class="hljs-built_in">push_back</span>(t);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>,ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        <span class="hljs-type">int</span> temp = <span class="hljs-built_in">dfs</span>(i);<br>        <span class="hljs-keyword">if</span>(temp &gt; ans)&#123;<br>            index = i;  <span class="hljs-comment">//当前最大路径的起始点</span><br>            ans = temp;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;ans<span class="hljs-number">-1</span>; i++)<br>    &#123;<br>        cout&lt;&lt;index&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        index = nxt[index];<br>    &#125;<br>    cout&lt;&lt;index;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第9题-重名剔除-Deduplicate"><a href="#第9题-重名剔除-Deduplicate" class="headerlink" title="第9题 重名剔除(Deduplicate)"></a>第9题 重名剔除(Deduplicate)</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a>题目大意</h3><p>Epicure先生正在编撰一本美食百科全书。为此，他已从众多的同好者那里搜集到了一份冗长的美食提名清单。既然源自多人之手，其中自然不乏重复的提名，故必须予以筛除。Epicure先生因此登门求助，并认定此事对你而言不过是“一碟小菜”，相信你不会错过在美食界扬名立万的这一良机。</p><p><strong>输入格式:</strong></p><p>第1行为1个整数n，表示提名清单的长度。以下n行各为一项提名。</p><p>要求：<br>1 &lt; n &lt; 6 * 10^5<br>提名均由小写字母组成，不含其它字符，且每项长度不超过40字符。</p><p><strong>输出格式:</strong></p><p>所有出现重复的提名（多次重复的仅输出一次），且以其在原清单中首次出现重复（即第二次出现）的位置为序。</p><p><strong>输入样例:</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">10</span><br><span class="hljs-keyword">brioche</span><br><span class="hljs-keyword"></span>camembert<br>cappelletti<br>savarin<br>cheddar<br>cappelletti<br>tortellni<br>croissant<br><span class="hljs-keyword">brioche</span><br><span class="hljs-keyword"></span>mapotoufu<br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cappelletti</span><br><span class="hljs-attribute">brioche</span><br></code></pre></td></tr></table></figure><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><blockquote><p>unorder_set 实现机理：哈希表，无序，元素不可重复</p></blockquote><p>unordered_set&lt;string&gt; set1 用来存储不重复 的元素，vector&lt;string&gt; vec 用来存储重复的元素且重复元素可以多次重复出现，vector&lt;string&gt; ans 用来存储第一次重复的元素</p><p>题目要求的输出格式为：所有出现重复的提名（多次重复的仅输出一次），且以其在原清单中首次出现重复（即第二次出现）的位置为序，因此定义一个bool类型的search函数，使vector容器实现查找功能，用来判断字符串是否为第一次重复</p><p>输出字符串，如果字符串重复且第一次重复，则将其存入输出的结果ans中，如果字符串重复但不是第一次重复存入vec中，输入的元素都存入set集合中。最后输出ans中的结果</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 600000</span><br><br><span class="hljs-comment">//使vector容器实现查找的函数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;string&gt;&amp; vec,string target)</span></span>&#123;<br>    vector&lt;string&gt;::iterator it;<br>    it = <span class="hljs-built_in">find</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), target);<br>    <span class="hljs-keyword">if</span>(it != vec.<span class="hljs-built_in">end</span>())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    unordered_set&lt;string&gt; set1;  <span class="hljs-comment">//存储不重复元素</span><br>    vector&lt;string&gt; vec;  <span class="hljs-comment">//存储重复元素</span><br>    vector&lt;string&gt; ans;  <span class="hljs-comment">//存储第一次重复的元素</span><br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        string str;<br>        cin&gt;&gt;str;<br>        <span class="hljs-keyword">if</span>(set1.<span class="hljs-built_in">count</span>(str) &amp;&amp; !<span class="hljs-built_in">search</span>(vec,str))&#123;  <span class="hljs-comment">//重复且第一次重复</span><br>            ans.<span class="hljs-built_in">push_back</span>(str);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(set1.<span class="hljs-built_in">count</span>(str))&#123;  <span class="hljs-comment">//重复</span><br>            vec.<span class="hljs-built_in">push_back</span>(str);<br>        &#125;<br>        set1.<span class="hljs-built_in">insert</span>(str);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;ans.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        cout&lt;&lt;ans[i]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第10题-玩具-Toy"><a href="#第10题-玩具-Toy" class="headerlink" title="第10题 玩具(Toy)"></a>第10题 玩具(Toy)</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a>题目大意</h3><p>ZC神最擅长逻辑推理，一日，他给大家讲述起自己儿时的数字玩具。<br>该玩具酷似魔方，又不是魔方。具体来说，它不是一个3 * 3 * 3的结构，而是4 * 2的结构。</p><p><img src="https://img.yiqiangshiyia.cn/blog/7020dc60-248c-483a-8bb9-d3d235e66b49.png" alt="图1"></p><p>按照该玩具约定的玩法，我们可反复地以如下三种方式对其做变换：<br>A． 交换上下两行。比如，图(a)经此变换后结果如图(b)所示。<br>B． 循环右移（ZC神从小就懂得这是什么意思的）。比如，图(b)经此变换后结果如图(c)所示。<br>C． 中心顺时针旋转。比如，图(c)经此变换后结果如图(d)所示。<br>ZC神自小就是这方面的天才，他往往是一只手还没揩干鼻涕，另一只手已经迅速地将处于任意状态的玩具复原至如图(a)所示的初始状态。物质极其匮乏的当年，ZC神只有一个这样的玩具；物质极大丰富的今天，你已拥有多个处于不同状态的玩具。现在，就请将它们全部复原吧。</p><p><strong>输入格式:</strong></p><p>第一行是一个正整数，即你拥有的魔方玩具总数N。<br>接下来共N行，每行8个正整数，是1~8的排列，表示该玩具的当前状态。<br>这里，魔方状态的表示规则为：前四个数自左向右给出魔方的第一行，后四个数自右向左给出第二行。比如，初始状态表示为“1 2 3 4 5 6 7 8”。</p><p>要求：1 &lt;= N &lt;= 1,000</p><p><strong>输出格式:</strong></p><p>共N行，各含一个整数，依次对应于复原各玩具所需执行变换的最少次数。<br>特别地，若某个玩具不可复原，则相应行输出-1。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">0<br>2<br></code></pre></td></tr></table></figure><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><ul><li>一共有8!=40320中状态，通过哈希表建立映射(康托展开)</li><li>大体思路就是从原始状态开始通过三种操作的反向给出一切可以达到的状态，通过BFS进行探索</li><li>如果某个状态已经实现过则回溯，因为BFS第一遍到达该结点的步数就是最短路径，故需要记录每个状态的访问标记和需要达到的最小步数，假设步数为-1即为未访问过</li><li>对于逆康托要保存康托的结果，大大提高效率</li></ul><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">初态： 1 2 3 4 5 6 7 8</span><br><span class="hljs-comment">A变换：8 7 6 5 4 3 2 1</span><br><span class="hljs-comment">B变换：5 8 7 6 3 2 1 4</span><br><span class="hljs-comment">C变换：5 1 8 6 3 7 2 4</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//存放阶乘</span><br><span class="hljs-type">int</span> jie[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>,<span class="hljs-number">120</span>,<span class="hljs-number">720</span>,<span class="hljs-number">5040</span>,<span class="hljs-number">40320</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Cantor</span><span class="hljs-params">(<span class="hljs-type">int</span> adr[])</span><span class="hljs-comment">//康托函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> sou = <span class="hljs-number">0</span>,cnt;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++)<br>    &#123;<br>        cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">8</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(adr[j] &lt; adr[i])<br>            &#123;<br>                cnt++;<span class="hljs-comment">//逆序数</span><br>            &#125;<br>        &#125;<br>        sou += cnt * jie[<span class="hljs-number">7</span> - i];<span class="hljs-comment">//阶乘求和</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> sou;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nCantor</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> adr[])</span><span class="hljs-comment">//逆康托函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> s[<span class="hljs-number">8</span>],t,j,l;<br>    <span class="hljs-built_in">memset</span>(&amp;s,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(s));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        t = x / jie[<span class="hljs-number">7</span> - i];<br>        x -= t * jie[<span class="hljs-number">7</span> - i];<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>,l = <span class="hljs-number">0</span>; l &lt;= t; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                l++;<br>            &#125;<br>        &#125;<br>        j--;<br>        s[j] = <span class="hljs-number">1</span>;<br>        adr[i] = j + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//定义三种变换</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><span class="hljs-comment">//交换行</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tmp[<span class="hljs-number">8</span>],s[<span class="hljs-number">8</span>];<br>    <span class="hljs-built_in">nCantor</span>(a,tmp);<br>    s[<span class="hljs-number">0</span>] = tmp[<span class="hljs-number">4</span>];<br>    s[<span class="hljs-number">1</span>] = tmp[<span class="hljs-number">5</span>];<br>    s[<span class="hljs-number">2</span>] = tmp[<span class="hljs-number">6</span>];<br>    s[<span class="hljs-number">3</span>] = tmp[<span class="hljs-number">7</span>];<br>    s[<span class="hljs-number">4</span>] = tmp[<span class="hljs-number">0</span>];<br>    s[<span class="hljs-number">5</span>] = tmp[<span class="hljs-number">1</span>];<br>    s[<span class="hljs-number">6</span>] = tmp[<span class="hljs-number">2</span>];<br>    s[<span class="hljs-number">7</span>] = tmp[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Cantor</span>(s);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">B</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span><span class="hljs-comment">//循环右移</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tmp[<span class="hljs-number">8</span>], s[<span class="hljs-number">8</span>];<br>    <span class="hljs-built_in">nCantor</span>(b,tmp);<br>    s[<span class="hljs-number">0</span>] = tmp[<span class="hljs-number">3</span>];<br>    s[<span class="hljs-number">1</span>] = tmp[<span class="hljs-number">0</span>];<br>    s[<span class="hljs-number">2</span>] = tmp[<span class="hljs-number">1</span>];<br>    s[<span class="hljs-number">3</span>] = tmp[<span class="hljs-number">2</span>];<br>    s[<span class="hljs-number">4</span>] = tmp[<span class="hljs-number">7</span>];<br>    s[<span class="hljs-number">5</span>] = tmp[<span class="hljs-number">4</span>];<br>    s[<span class="hljs-number">6</span>] = tmp[<span class="hljs-number">5</span>];<br>    s[<span class="hljs-number">7</span>] = tmp[<span class="hljs-number">6</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Cantor</span>(s);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span><span class="hljs-comment">//中心顺时针旋转</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tmp[<span class="hljs-number">8</span>],s[<span class="hljs-number">8</span>];<br>    <span class="hljs-built_in">nCantor</span>(c, tmp);<br>    s[<span class="hljs-number">0</span>] = tmp[<span class="hljs-number">0</span>];<br>    s[<span class="hljs-number">1</span>] = tmp[<span class="hljs-number">5</span>];<br>    s[<span class="hljs-number">2</span>] = tmp[<span class="hljs-number">1</span>];<br>    s[<span class="hljs-number">3</span>] = tmp[<span class="hljs-number">3</span>];<br>    s[<span class="hljs-number">4</span>] = tmp[<span class="hljs-number">4</span>];<br>    s[<span class="hljs-number">5</span>] = tmp[<span class="hljs-number">6</span>];<br>    s[<span class="hljs-number">6</span>] = tmp[<span class="hljs-number">2</span>];<br>    s[<span class="hljs-number">7</span>] = tmp[<span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Cantor</span>(s);<br><br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    string pum;<br>    <span class="hljs-type">int</span> folat;<span class="hljs-comment">//康托数</span><br>    <span class="hljs-built_in">node</span>(string a = <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-type">int</span> b = <span class="hljs-number">-1</span>):<span class="hljs-built_in">pum</span>(a),<span class="hljs-built_in">folat</span>(b) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue &lt;node&gt; q;<span class="hljs-comment">//广度优先搜索队列</span><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> mban[<span class="hljs-number">8</span>],sum,cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> chu[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//初始状态</span><br>        <span class="hljs-type">bool</span> flog = <span class="hljs-literal">true</span>,hashcode[<span class="hljs-number">50000</span>] = &#123;<span class="hljs-literal">false</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;mban[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">7</span>; i &gt; <span class="hljs-number">3</span>; i--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;mban[i]);<br>        &#125;<br>        sum = <span class="hljs-built_in">Cantor</span>(mban);<span class="hljs-comment">//计算康托数</span><br>        <span class="hljs-function">node <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span>,Cantor(chu))</span></span>;<br>        q.<span class="hljs-built_in">push</span>(a);<br>        <span class="hljs-keyword">while</span>(flog)<br>        &#123;<br>            cnt++;<br>            <span class="hljs-type">int</span> m = q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m &amp;&amp; flog; i++)<br>            &#123;<br>                node tmp = q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span> (tmp.folat == sum)<br>                &#123;<br>                    flog = <span class="hljs-literal">false</span>;<br>                    string res = tmp.pum;<br>                    <span class="hljs-type">int</span> le = res.<span class="hljs-built_in">size</span>(), hang = le / <span class="hljs-number">60</span>; <span class="hljs-comment">// 计算输出行数</span><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,cnt - <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; hang + <span class="hljs-number">1</span>; k++) <span class="hljs-comment">// 每行60个字符</span><br>                    &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">60</span> &amp;&amp; le &gt; <span class="hljs-number">0</span>; j++)<br>                        &#123;<br>                            le--;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flog)<br>                &#123;<br>                    <span class="hljs-type">int</span> a1 = <span class="hljs-built_in">A</span>(tmp.folat), a2 = <span class="hljs-built_in">B</span>(tmp.folat), a3 = <span class="hljs-built_in">C</span>(tmp.folat);<br>                    <span class="hljs-comment">// 判断三种操作后产生的情况是否出现过，没有则入队，并记录相应的操作步骤</span><br>                    <span class="hljs-keyword">if</span> (!hashcode[a1])<br>                    &#123;<br>                        hashcode[a1] = <span class="hljs-literal">true</span>;<br>                        string f = tmp.pum + <span class="hljs-string">&quot;A&quot;</span>;<br>                        <span class="hljs-function">node <span class="hljs-title">x</span><span class="hljs-params">(f, a1)</span></span>;<br>                        q.<span class="hljs-built_in">push</span>(x);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (!hashcode[a2])<br>                    &#123;<br>                        hashcode[a2] = <span class="hljs-literal">true</span>;<br>                        string f = tmp.pum + <span class="hljs-string">&quot;B&quot;</span>;<br>                        <span class="hljs-function">node <span class="hljs-title">x</span><span class="hljs-params">(f, a2)</span></span>;<br>                        q.<span class="hljs-built_in">push</span>(x);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (!hashcode[a3])<br>                    &#123;<br>                        hashcode[a3] = <span class="hljs-literal">true</span>;<br>                        string f = tmp.pum + <span class="hljs-string">&quot;C&quot;</span>;<br>                        <span class="hljs-function">node <span class="hljs-title">x</span><span class="hljs-params">(f, a3)</span></span>;<br>                        q.<span class="hljs-built_in">push</span>(x);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第11题-任务调度-Schedule"><a href="#第11题-任务调度-Schedule" class="headerlink" title="第11题 任务调度(Schedule)"></a>第11题 任务调度(Schedule)</h2><h3 id="题目大意-10"><a href="#题目大意-10" class="headerlink" title="题目大意"></a>题目大意</h3><p>某高性能计算集群（HPC cluster）采用的任务调度器与众不同。为简化起见，假定该集群不支持多任务同时执行，故同一时刻只有单个任务处于执行状态。初始状态下，每个任务都由称作优先级数的一个整数指定优先级，该数值越小优先级越高；若优先级数相等，则任务名ASCII字典顺序低者优先。此后，CPU等资源总是被优先级数最小的任务占用；每一任务计算完毕，再选取优先级数最小的下一任务。不过，这里的任务在计算结束后通常并不立即退出，而是将优先级数加倍（加倍计算所需的时间可以忽略）并继续参与调度；只有在优先级数不小于2^32时，才真正退出。<br>你的任务是，根据初始优先级设置，按照上述调度原则，预测一批计算任务的执行序列。</p><p><strong>输入格式:</strong></p><p>第一行为以空格分隔的两个整数n和m，n为初始时的任务总数，m为所预测的任务执行序列长度，每行末尾有一个换行符。<br>以下n行分别包含一个整数和一个由不超过8个小写字母和数字组成的字符串。前者为任务的初始优先级数，后者为任务名。数字和字符串之间以空格分隔。</p><p>要求：<br>0 ≤ n ≤ 4,000,000<br>0 ≤ m ≤ 2,000,000<br>0 &lt; 每个任务的初始优先级 &lt; 2^32<br>不会有重名的任务</p><p><strong>输出格式:</strong></p><p>最多m行，各含一个字符串。按执行次序分别给出执行序列中前m个任务的名称，若执行序列少于m，那么输出调度器的任务处理完毕前的所有任务即可。</p><p><strong>输入样例:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span>hello<br><span class="hljs-symbol">2 </span>world<br><span class="hljs-symbol">10 </span>test<br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hello</span><br><span class="hljs-attribute">hello</span><br><span class="hljs-attribute">world</span><br></code></pre></td></tr></table></figure><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h3><p>做这道题首先要了解<strong>优先队列、堆、最大堆、最小堆</strong>等数据结构内容</p><p>优先队列</p><blockquote><p>优先队列（priority queue）</p><p>​        普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出 （first in, largest out）的行为特征。通常采用堆数据结构来实现。</p><p>​        优先队列也称为堆，本质是用一个数组进行模拟的一颗完全二叉树，可以拿出优先级最大的元素</p></blockquote><p>堆、最大堆、最小堆</p><blockquote><p>堆是数据结构结构中一种特殊的树，分为最大堆和最小堆，可以用二叉树表示，满足以下两点要求：</p><ul><li>堆是一个完全二叉树。</li><li>堆中每个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。</li></ul><p>通过要求二可知，堆有两种类型，大顶堆和小顶堆：</p><ul><li>对于每个节点的值都大于等于子树中每个节点值的堆，叫作“大顶堆”。</li><li>对于每个节点的值都小于等于子树中每个节点值的堆，叫作“小顶堆”。</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/dui.jpeg"></p><p>上图中，第1、2个是大顶堆，第3个是小顶堆，第4个不是堆。</p></blockquote><p>堆的插入、取值和排序</p><blockquote><p>堆的插入、取值和排序：<a href="https://www.cnblogs.com/chenkeyu/p/7505637.html">https://www.cnblogs.com/chenkeyu/p/7505637.html</a></p></blockquote><p>解题思路：</p><p>STL定义优先队列用来存储任务，声明结构体，用来表示任务，val为任务名，str数组为任务名。通过重载自定义优先队列的优先级：先比较优先级的大小，若优先级数相等，则任务名ASCII字典顺序低者优先。</p><p>每次取出堆顶，输出，然后将其优先级数乘以2，如果优先级数小于2的32次方，则重新入队。直至执行m次取出操作或队为空。</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//结构体声明</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> val;  <span class="hljs-comment">//任务优先级</span><br>    <span class="hljs-type">char</span> str[<span class="hljs-number">8</span>];  <span class="hljs-comment">//任务名</span><br>    <span class="hljs-comment">//重载自定义优先级</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (Node a, Node b) &#123;<br>        <span class="hljs-keyword">if</span> (a.val != b.val)<br>            <span class="hljs-keyword">return</span> a.val &gt; b.val;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(a.str, b.str) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;Node&gt; que;  <span class="hljs-comment">//STL定义优先队列</span><br>    <span class="hljs-type">int</span> n,m;<br>    Node node;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        cin&gt;&gt;node.val&gt;&gt;node.str;<br>        que.<span class="hljs-built_in">push</span>(node);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>            cout&lt;&lt;que.<span class="hljs-built_in">top</span>().str&lt;&lt;endl;<br>            Node node2 = que.<span class="hljs-built_in">top</span>();<br>            node2.val = que.<span class="hljs-built_in">top</span>().val*<span class="hljs-number">2</span>;<br>            que.<span class="hljs-built_in">push</span>(node2);<br>            que.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第12题-循环移位-Cycle"><a href="#第12题-循环移位-Cycle" class="headerlink" title="第12题 循环移位(Cycle)"></a>第12题 循环移位(Cycle)</h2><h3 id="题目大意-11"><a href="#题目大意-11" class="headerlink" title="题目大意"></a>题目大意</h3><p>所谓循环移位是指：一个字符串的首字母移到末尾, 其他字符的次序保持不变。比如ABCD经过一次循环移位后变成BCDA。<br>给定两个字符串，判断它们是不是可以通过若干次循环移位得到彼此。</p><p><strong>输入格式:</strong></p><p>第一行为一个整数，为判断的次数n；<br>下面由m行组成，每行包含两个由大写字母’A’~’Z’组成的字符串，中间由空格隔开。</p><p>要求：<br>0 ≤ n ≤ 5000<br>0 ≤ m ≤ 5000<br>1 ≤ |S1|, |S2| ≤ 10^5</p><p><strong>输出格式:</strong></p><p>对于每行输入，输出这两个字符串是否可以通过循环移位得到彼此：YES表示是，NO表示否。</p><p><strong>输入样例:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>AACD CDAA<br>ABCDEFG EFGABCD<br>ABCD ACBD<br>ABCDEFEG ABCDEE<br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br></code></pre></td></tr></table></figure><h3 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h3><p>输入两个字符串 str1 和 str2，定义一个新字符串 str = str1+str1 ，若 str2 是 str 的子串，则 str1 可以通过若干次循环移位得到 str2，否则则不能</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        string str1,str2;<br>        cin&gt;&gt;str1&gt;&gt;str2;<br>        string str = str1+str1;<br>        <span class="hljs-keyword">if</span>(str.<span class="hljs-built_in">find</span>(str2) != <span class="hljs-number">-1</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>优先队列</tag>
      
      <tag>堆</tag>
      
      <tag>图</tag>
      
      <tag>拓扑排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-注解与反射</title>
    <link href="/2022/08/03/Java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/08/03/Java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解Annotation</h1><h2 id="1-什么是注解"><a href="#1-什么是注解" class="headerlink" title="1. 什么是注解"></a>1. 什么是注解</h2><ul><li>Annotation 是从JDK5.0开始引入的新技术 . </li><li>Annotation的作用 <ul><li>不是程序本身 , 可以对程序作出解释.(这一点和注释(comment)没什么区别) </li><li>可以被其他程序(比如:编译器等)读取. </li></ul></li><li>Annotation的格式 <ul><li>注解是以”@注释名”在代码中存在的 </li><li>还可以添加一些参数值 , 例如:@SuppressWarnings(value=”unchecked”) </li></ul></li><li>Annotation在哪里使用? <ul><li>可以附加在package , class , method , field 等上面 , 相当于给他们添加了额外的辅助信息 </li><li>我们可以通过反射机制实现对这些元数据的访问</li></ul></li></ul><h2 id="2-内置注解"><a href="#2-内置注解" class="headerlink" title="2. 内置注解"></a>2. 内置注解</h2><ul><li><strong>@Override</strong> <ul><li>定义在 java.lang.Override 中 , 此注释只适用于修辞方法 , 表示一个方法声明打算重写超类中 的另一个方法声明. </li></ul></li><li><strong>@Deprecated</strong> <ul><li>定义在java.lang.Deprecated中 , 此注释可以用于修辞方法 , 属性 , 类 , </li><li>表示不鼓励程序员使用这样的元素 , 通常是因为它很危险或者存在更好的选择 . </li></ul></li><li><strong>@SuppressWarnings</strong> <ul><li>定义在java.lang.SuppressWarnings中,用来抑制编译时的警告信息. </li><li>与前两个注释有所不同,你需要添加一个参数才能正确使用,这些参数都是已经定义好了的,我们 选择性的使用就好了 . <ul><li>@SuppressWarnings(“all”) </li><li>@SuppressWarnings(“unchecked”) </li><li>@SuppressWarnings(value={“unchecked”,”deprecation”})</li></ul></li></ul></li></ul><p><strong>内置注解的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Annotation;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    内置注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&#123;<br>    <span class="hljs-comment">//@Override 重写的注解</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString();<br>    &#125;<br><br>    <span class="hljs-comment">//Deprecated 不推荐程序员使用，但是可以使用，或者存在更好的方式</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Deprecated&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-元注解"><a href="#3-元注解" class="headerlink" title="3. 元注解"></a>3. 元注解</h2><ul><li>元注解的作用就是负责注解其他注解 , Java定义了4个标准的meta-annotation类型,他们被用来提供 对其他annotation类型作说明 . </li><li>这些类型和它们所支持的类在java.lang.annotation包中可以找到 .( @Target , @Retention , @Documented , @Inherited ) <ul><li><strong>@Target</strong> : 用于描述注解的使用范围(即:被描述的注解可以用在什么地方) </li><li><strong>@Retention</strong> : 表示需要在什么级别保存该注释信息 , 用于描述注解的生命周期 (SOURCE &lt; CLASS &lt; RUNTIME) </li><li><strong>@Document</strong>：说明该注解将被包含在javadoc中 </li><li><strong>@Inherited</strong>：说明子类可以继承父类中的该注解</li></ul></li></ul><p><strong>元注解的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    元注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@MyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义一个注解</span><br><span class="hljs-comment">//@Target：表示我们的注解可以用到哪些地方</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><br><span class="hljs-comment">//@Retention：表示我们的注解在什么地方还有效</span><br><span class="hljs-comment">//RUNTIME&gt;CLASS&gt;SOURCE</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><br><span class="hljs-comment">//@Documented：表示是否将我们的注解生成在JAVAdoc中</span><br><span class="hljs-meta">@Documented</span><br><br><span class="hljs-comment">//@Inherited：表示子类可以继承父类的注解</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@interface</span> MyAnnotation&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4. 自定义注解"></a>4. 自定义注解</h2><ul><li>使用 @interface自定义注解时 , 自动继承了java.lang.annotation.Annotation接口 </li><li>分析 : <ul><li>@ interface用来声明一个注解 , 格式 : public @ interface 注解名 { 定义内容 } </li><li>其中的每一个方法实际上是声明了一个配置参数. </li><li>方法的名称就是参数的名称. </li><li>返回值类型就是参数的类型 ( 返回值只能是基本类型,Class , String , enum ). </li><li>可以通过default来声明参数的默认值 </li><li>如果只有一个参数成员 , 一般参数名为value </li><li>注解元素必须要有值 , 我们定义注解元素时 , 经常使用空字符串,0作为默认值</li></ul></li></ul><p><strong>自定义注解的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    自定义注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test03</span> &#123;<br>    <span class="hljs-comment">//注解可以显示赋值，如果没有默认值，我们就必须给注解赋值</span><br>    <span class="hljs-meta">@MyAnnotation2</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@MyAnnotation3(&quot;林慕椿&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotation2&#123;<br>    <span class="hljs-comment">//注解的参数：参数类型+参数名()</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -<span class="hljs-number">1</span>;  <span class="hljs-comment">//如果默认值为-1，代表不存在</span><br><br>    String[] schools() <span class="hljs-keyword">default</span> &#123;<span class="hljs-string">&quot;中国石油大学（华东）&quot;</span>&#125;;<br>&#125;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotation3&#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-反射注解读取"><a href="#5-反射注解读取" class="headerlink" title="5. 反射注解读取"></a>5. 反射注解读取</h2><h1 id="反射机制Reflection"><a href="#反射机制Reflection" class="headerlink" title="反射机制Reflection"></a>反射机制Reflection</h1><h2 id="1-静态-VS-动态语言"><a href="#1-静态-VS-动态语言" class="headerlink" title="1. 静态 VS 动态语言"></a>1. 静态 VS 动态语言</h2><ul><li><p>动态语言 </p><ul><li>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的 函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自 身结构。 </li><li>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//体现动态语言的代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;var a=3;var b=5;alert(a+b)&quot;</span>;<br><span class="hljs-built_in">eval</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>静态语言 </p><ul><li>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。 </li><li>Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用 反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！</li></ul></li></ul><h2 id="2-Java-Reflection"><a href="#2-Java-Reflection" class="headerlink" title="2. Java Reflection"></a>2. Java Reflection</h2><p>Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取 得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>)<br></code></pre></td></tr></table></figure><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这 个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子， 透过这个镜子看到类的结构，所以，我们形象的称之为：<strong>反射</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220804171024890.png" alt="image-20220804171024890"></p><p><strong>反射的基本使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    什么叫反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//通过反射获取类的Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.User&quot;</span>);<br>        <span class="hljs-comment">//一个类被加载后 , 类的整个结构信息会被放到对应的Class对象中</span><br>        System.out.println(c1);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.User&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.User&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.User&quot;</span>);<br><br>        <span class="hljs-comment">//一个类在内存中只有一个Class对象</span><br>        <span class="hljs-comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span><br>        System.out.println(c2.hashCode());<br>        System.out.println(c3.hashCode());<br>        System.out.println(c4.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建实体类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Java反射机制提供的功能</strong> </p><ul><li>在运行时判断任意一个对象所属的类 </li><li>在运行时构造任意一个类的对象 </li><li>在运行时判断任意一个类所具有的成员变量和方法 </li><li>在运行时获取泛型信息 </li><li>在运行时调用任意一个对象的成员变量和方法 </li><li>在运行时处理注解 </li><li>生成动态代理</li></ul><p><strong>Java反射优点和缺点</strong> </p><ul><li>优点：可以实现动态创建对象和编译，体现出很大的灵活性 ! </li><li>缺点：对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满 足我们的要求。这类操作总是慢于 直接执行相同的操作。</li></ul><h2 id="3-反射相关的主要API"><a href="#3-反射相关的主要API" class="headerlink" title="3. 反射相关的主要API"></a>3. 反射相关的主要API</h2><ul><li>java.lang.Class : 代表一个类 </li><li>java.lang.reflect.Method : 代表类的方法 </li><li>java.lang.reflect.Field : 代表类的成员变量 </li><li>java.lang.reflect.Constructor : 代表类的构造器</li></ul><h2 id="4-Class类"><a href="#4-Class类" class="headerlink" title="4. Class类"></a>4. Class类</h2><p>在Object类中定义了以下的方法，此方法将被所有子类继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Class <span class="hljs-title function_">getClass</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来 看也很好理解，即：可以通过对象反射求出类的名称。</p><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220806100636578.png" alt="image-20220806100636578"></p><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个 类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构 (class/interface/enum/annotation/primitive type/void/[])的有关信息。</p><ul><li>Class 本身也是一个类 </li><li>Class 对象只能由系统建立对象 </li><li>一个加载的类在 JVM 中只会有一个Class实例 </li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件 </li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成 </li><li>通过Class可以完整地得到一个类中的所有被加载的结构 </li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><p><strong>获取Class类的实例：</strong></p><p><strong>方法1：</strong>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">class</span> <span class="hljs-operator">=</span> Person.class;<br></code></pre></td></tr></table></figure><p><strong>方法2：</strong>已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">class</span> <span class="hljs-operator">=</span> person.getClass();<br></code></pre></td></tr></table></figure><p><strong>方法3：</strong>已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出 ClassNotFoundException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">class</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;demo01.Student&quot;</span>);<br></code></pre></td></tr></table></figure><p>方法4：内置基本数据类型可以直接用类名.Type</p><p>方法5：还可以利用ClassLoader我们之后讲解</p><p>获取Class类的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    得到Class类的几种方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(<span class="hljs-string">&quot;这个人是：&quot;</span>+person.name);<br><br>        <span class="hljs-comment">//方式1：通过对象获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> person.getClass();<br>        System.out.println(c1.hashCode());<br><br>        <span class="hljs-comment">//方式2：forName()获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Student&quot;</span>);<br>        System.out.println(c2.hashCode());<br><br>        <span class="hljs-comment">//方式3：通过类名.class获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> Student.class;<br>        System.out.println(c3.hashCode());<br><br>        <span class="hljs-comment">//方式4：基本内置类型的包装类都有一个TYPE属性</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> Integer.TYPE;<br><br>        <span class="hljs-comment">//获得父类类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c5</span> <span class="hljs-operator">=</span> c1.getSuperclass();<br>        System.out.println(c5);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;老师&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Class类的常用方法：</strong></p><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static ClassforName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体（类，接口，数组类或 void）的名称。</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class[] getinterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Method getMothed(String name,Class.. T)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr></tbody></table><p><strong>有Class对象的类型：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    所有类型的Class</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Object.class;  <span class="hljs-comment">//类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Comparable.class;  <span class="hljs-comment">//接口</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> String[].class;  <span class="hljs-comment">//一维数组</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> <span class="hljs-type">int</span>[][].class;  <span class="hljs-comment">//二维数组</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c5</span> <span class="hljs-operator">=</span> Override.class;  <span class="hljs-comment">//注解</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c6</span> <span class="hljs-operator">=</span> ElementType.class;  <span class="hljs-comment">//枚举</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c7</span> <span class="hljs-operator">=</span> Integer.class;  <span class="hljs-comment">//基本数据类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">void</span>.class;  <span class="hljs-comment">//void</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c9</span> <span class="hljs-operator">=</span> Class.class;  <span class="hljs-comment">//Class</span><br><br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>        System.out.println(c5);<br>        System.out.println(c6);<br>        System.out.println(c7);<br>        System.out.println(c8);<br>        System.out.println(c9);<br><br>        <span class="hljs-comment">//只要元素类型和维度一样，就是同一个Class</span><br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>        System.out.println(a.getClass().hashCode());<br>        System.out.println(b.getClass().hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>class java.lang.Object<br>interface java.lang.Comparable<br>class [Ljava.lang.String;<br>class [[I<br>interface java.lang.Override<br>class java.lang.annotation.ElementType<br>class java.lang.Integer<br>void<br>class java.lang.Class<br>295530567<br>295530567</p></blockquote><h2 id="5-Java内存分析"><a href="#5-Java内存分析" class="headerlink" title="5. Java内存分析"></a>5. Java内存分析</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220806163250.png" alt="QQ截图20220806163250"></p><p><strong>类的加载过程</strong></p><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220806162934.png" alt="QQ截图20220806162934"></p><p><strong>类的加载与ClassLoader的理解</strong></p><p>类的加载： </p><ul><li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构， 然后生成一个代表这个类的java.lang.Class对象. </li></ul><p>类的链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。 </p><ul><li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题 </li><li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方 法区中进行分配。 </li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。 </li></ul><p>类的初始化： </p><ul><li>执行类构造器()方法的过程。类构造器()方法是由编译期自动收集类中所有类变量的赋值动作 和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造 器）。 </li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。 </li><li>虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        System.out.println(A.m);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.加载到内存会产生一个类对应的Class对象</span><br><span class="hljs-comment">        2.链接，链接结束后 m=0</span><br><span class="hljs-comment">        3.初始化</span><br><span class="hljs-comment">            &lt;clinit&gt;()&#123;</span><br><span class="hljs-comment">                System.out.println(&quot;A类静态代码块初始化&quot;);</span><br><span class="hljs-comment">                m = 300;</span><br><span class="hljs-comment">                m = 100;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            m = 100;</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//静态代码块</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A类静态代码块初始化&quot;</span>);<br>        m = <span class="hljs-number">300</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A类的无参构造初始化&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>A类静态代码块初始化<br>A类的无参构造初始化<br>100</p></blockquote><p><strong>什么时候会发生类的初始化</strong></p><p>类的主动引用（一定会发生类的初始化） </p><ul><li>当虚拟机启动，先初始化main方法所在的类 </li><li>new一个类的对象 </li><li>调用类的静态成员（除了final常量）和静态方法 </li><li>使用java.lang.reflect包的方法对类进行反射调用 </li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类 </li></ul><p>类的被动引用（不会发生类的初始化） </p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静 态变量，不会导致子类初始化 </li><li>通过数组定义类引用，不会触发此类的初始化 </li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    测试类什么时候初始化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test06</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//1.主动引用</span><br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br><br>        <span class="hljs-comment">//2.反射也会产生主动引用</span><br>        Class.forName(<span class="hljs-string">&quot;Reflection.Son&quot;</span>);<br><br>        <span class="hljs-comment">//不会产生类的引用的方法</span><br>        System.out.println(Son.b);<br><br>        Son[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>[<span class="hljs-number">5</span>];<br><br>        System.out.println(Son.M);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类被加载&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类被加载&quot;</span>);<br>        m = <span class="hljs-number">300</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">M</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类加载器的作用</strong></p><p>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数 据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入 口。 </p><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持 加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220806170735.png" alt="QQ截图20220806170735"></p><p>类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220806171001.png" alt="QQ截图20220806171001"></p><p>获得系统的类加载器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    获得系统类的加载器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//获取系统类的加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">systemClassLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class="hljs-comment">//获取系统类加载器的父加载器--&gt;扩展类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> systemClassLoader.getParent();<br>        System.out.println(parent);<br><br>        <span class="hljs-comment">//获取扩展类加载器的父加载器--&gt;根加载器(c/c++)</span><br>        <span class="hljs-comment">//根加载器是用来装载核心类库，该加载器无法直接获取</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent1</span> <span class="hljs-operator">=</span> parent.getParent();<br>        System.out.println(parent1);<br><br>        <span class="hljs-comment">//测试当前类是哪个加载器加载的</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.test07&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//测试JDK内置的类是谁加载的</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(classLoader2);<br><br>        <span class="hljs-comment">//如何获取获得系统类加载器可以加载的路径</span><br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-获取类的信息"><a href="#6-获取类的信息" class="headerlink" title="6. 获取类的信息"></a>6. 获取类的信息</h2><p>通过反射获取运行时类的完整结构 Field、Method、Constructor、Superclass、Interface、Annotation </p><ul><li>实现的全部接口 </li><li>所继承的父类 </li><li>全部的构造器 </li><li>全部的方法 </li><li>全部的Field </li><li>注解</li></ul><p><strong>获取类信息常用方法：</strong></p><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static ClassforName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体（类，接口，数组类或 void）的名称。</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class[] getinterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Method getMothed(String name,Class.. T)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr></tbody></table><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    获得类的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.User&quot;</span>);<br>        <span class="hljs-comment">//获得类的名字</span><br>        System.out.println(c1.getName());<br>        System.out.println(c1.getSimpleName());<br><br>        <span class="hljs-comment">//获得类的属性</span><br>        Field[] fields = c1.getFields();  <span class="hljs-comment">//只能找到public属性</span><br><br>        fields = c1.getDeclaredFields();  <span class="hljs-comment">//找到全部属性</span><br>        <span class="hljs-keyword">for</span>(Field field : fields)&#123;<br>            System.out.println(field);<br>        &#125;<br><br>        <span class="hljs-comment">//获得指定属性的值</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br><br>        <span class="hljs-comment">//获得类的方法</span><br>        Method[] methods = c1.getMethods();  <span class="hljs-comment">//获得本类以及父类的全部public方法</span><br>        <span class="hljs-keyword">for</span>(Method method : methods)&#123;<br>            System.out.println(<span class="hljs-string">&quot;正常的：&quot;</span>+method);<br>        &#125;<br>        methods = c1.getDeclaredMethods();  <span class="hljs-comment">//获得本来的所有方法</span><br>        <span class="hljs-keyword">for</span>(Method method : methods)&#123;<br>            System.out.println(<span class="hljs-string">&quot;getDeclaredMethods：&quot;</span>+method);<br>        &#125;<br><br>        <span class="hljs-comment">//获得指定方法</span><br>        <span class="hljs-comment">//重载</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getName</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;getName&quot;</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">setName</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;setName&quot;</span>,String.class);<br>        System.out.println(getName);<br>        System.out.println(setName);<br><br>        <span class="hljs-comment">//获得指定的构造器</span><br>        Constructor[] constructors = c1.getConstructors();<br>        <span class="hljs-keyword">for</span>(Constructor constructor : constructors)&#123;<br>            System.out.println(constructor);<br>        &#125;<br>        constructors = c1.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span>(Constructor constructor : constructors)&#123;<br>            System.out.println(<span class="hljs-string">&quot;#&quot;</span>+constructor);<br>        &#125;<br><br>        <span class="hljs-comment">//获得指定的构造器</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(String.class,<span class="hljs-type">int</span>.class,<span class="hljs-type">int</span>.class);<br>        System.out.println(<span class="hljs-string">&quot;指定：&quot;</span>+declaredConstructor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note：</strong></p><ul><li>在实际的操作中，取得类的信息的操作代码，并不会经常开发。 </li><li>一定要熟悉java.lang.reflect包的作用，反射机制。 </li><li>如何取得属性、方法、构造器的名称，修饰符等。</li></ul><h2 id="7-动态的创建对象"><a href="#7-动态的创建对象" class="headerlink" title="7. 动态的创建对象"></a>7. 动态的创建对象</h2><p><strong>方法1：</strong>创建类的对象：调用Class对象的newInstance()方法 </p><ul><li>类必须有一个无参数的构造器。 </li><li>类的构造器的访问权限需要足够</li></ul><p><strong>方法2：</strong>无参构造器创建对象：只要在操作的时候明确的调用类中的构造器， 并将参数传递进去之后，才可以实例化操作。 步骤如下： </p><ul><li>通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型 的构造器 </li><li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。 </li><li>通过Constructor实例化对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    动态的创建对象，通过反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">//获得Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.User&quot;</span>);<br><br>        <span class="hljs-comment">//构造一个对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)c1.newInstance();  <span class="hljs-comment">//本质是调用了类的无参构造器</span><br>        System.out.println(user);<br><br>        <span class="hljs-comment">//通过构造器创建对象</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> (User)constructor.newInstance(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-number">001</span>,<span class="hljs-number">21</span>);<br>        System.out.println(user2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>User{name=’null’, id=0, age=0}<br>User{name=’林慕椿’, id=1, age=21}<br>林南芊<br>林思湫</p></blockquote><h2 id="8-调用指定的方法"><a href="#8-调用指定的方法" class="headerlink" title="8. 调用指定的方法"></a>8. 调用指定的方法</h2><p>通过反射，调用类中的方法，通过Method类完成。 </p><ul><li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对 象，并设置此方法操作时所需要的参数类型。 </li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对 象的参数信息。</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220807170310.png" alt="QQ截图20220807170310"></p><p><strong>Object invoke(Object obj, Object … args)</strong></p><ul><li>Object 对应原方法的返回值，若原方法无返回值，此时返回null </li><li>若原方法若为静态方法，此时形参Object obj可为null </li><li>若原方法形参列表为空，则Object[] args为null </li><li>若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的 setAccessible(true)方法，将可访问private的方法。</li></ul><h2 id="9-setAccessible"><a href="#9-setAccessible" class="headerlink" title="9. setAccessible"></a>9. setAccessible</h2><ul><li>Method和Field、Constructor对象都有setAccessible()方法。 </li><li>setAccessible作用是启动和禁用访问安全检查的开关。 </li><li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。 </li><li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。 </li><li>使得原本无法访问的私有成员也可以访问 参数值为false则指示反射的对象应该实施Java语言访问检查</li></ul><h2 id="10-性能对比分析"><a href="#10-性能对比分析" class="headerlink" title="10. 性能对比分析"></a>10. 性能对比分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    分析性能问题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test10</span> &#123;<br>    <span class="hljs-comment">//普通方式调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000000000</span>; i++)&#123;<br>            user.getName();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;普通方式执行10亿次：&quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//反射方式调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> user.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getName</span> <span class="hljs-operator">=</span> c1.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000000000</span>; i++)&#123;<br>            getName.invoke(user,<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方式执行10亿次：&quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//反射方式调用，关闭检测</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> user.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getName</span> <span class="hljs-operator">=</span> c1.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>,<span class="hljs-literal">null</span>);<br>        getName.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000000000</span>; i++)&#123;<br>            getName.invoke(user,<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;关闭检测执行10亿次：&quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, NoSuchMethodException, IllegalAccessException &#123;<br>        test01();<br>        test02();<br>        test03();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>普通方式执行10亿次：4ms<br>反射方式执行10亿次：2690ms<br>关闭检测执行10亿次：1695ms</p></blockquote><h2 id="11-反射操作泛型"><a href="#11-反射操作泛型" class="headerlink" title="11. 反射操作泛型"></a>11. 反射操作泛型</h2><p>Java采用泛型擦除的机制来引入泛型 , Java中的泛型仅仅是给编译器javac使用的,确保数据的安全性 和免去强制类型转换问题 , 但是 , 一旦编译完成 , 所有和泛型有关的类型全部擦除 </p><p>为了通过反射操作这些类型 , Java新增了 ParameterizedType , GenericArrayType , TypeVariable 和 WildcardType 几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型. </p><ul><li>ParameterizedType : 表示一种参数化类型,比如Collection </li><li>GenericArrayType : 表示一种元素类型是参数化类型或者类型变量的数组类型 </li><li>TypeVariable : 是各种类型变量的公共父接口 </li><li>WildcardType : 代表一种通配符类型表达式</li></ul><h2 id="12-反射操作注解"><a href="#12-反射操作注解" class="headerlink" title="12. 反射操作注解"></a>12. 反射操作注解</h2><p><strong>OMR：</strong>Object relationship Mapping –&gt; 对象关系映射</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220808092227.png" alt="QQ截图20220808092227"></p><ul><li>类和表结构对应 </li><li>属性和字段对应 </li><li>对象和记录对应</li></ul><p>利用注解和反射完成类和表结构的映射关系</p><p>反射操作注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    反射操作注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Student2&quot;</span>);<br><br>        <span class="hljs-comment">//通过反射获得注解</span><br>        Annotation[] annotations = c1.getAnnotations();<br>        <span class="hljs-keyword">for</span>(Annotation annotation : annotations)&#123;<br>            System.out.println(annotation);<br>        &#125;<br><br>        <span class="hljs-comment">//获得注解的value的值</span><br>        <span class="hljs-type">MyAnnotation</span> <span class="hljs-variable">myannotation</span> <span class="hljs-operator">=</span> (MyAnnotation)c1.getAnnotation(MyAnnotation.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> myannotation.value();<br>        System.out.println(value);<br><br>        <span class="hljs-comment">//获得类指定的注解</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">MyAnnotation2</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> f.getAnnotation(MyAnnotation2.class);<br>        System.out.println(annotation.columnName());<br>        System.out.println(annotation.type());<br>        System.out.println(annotation.length());<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@MyAnnotation(&quot;db_student&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2</span>&#123;<br>    <span class="hljs-meta">@MyAnnotation2(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@MyAnnotation2(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@MyAnnotation2(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 3)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student2</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student2</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> age, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student2&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//类名的注解</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotation&#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//属性的注解</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotation2&#123;<br>    String <span class="hljs-title function_">columnName</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">type</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>@Reflection.MyAnnotation(“db_student”)<br>db_student<br>db_name<br>varchar<br>3</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-集合框架</title>
    <link href="/2022/07/04/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/07/04/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p><strong>Java JDK11在线帮助文档：<a href="https://www.runoob.com/manual/jdk11api/">https://www.runoob.com/manual/jdk11api/</a></strong></p><h1 id="1-集合的概念"><a href="#1-集合的概念" class="headerlink" title="1. 集合的概念"></a>1. 集合的概念</h1><h2 id="1-1-集合概念"><a href="#1-1-集合概念" class="headerlink" title="1.1 集合概念"></a>1.1 集合概念</h2><p>集合是对象的容器，定义了多个对对象进行操作的常用方法。可实现数组的功能。</p><h2 id="1-2-集合和数组的区别"><a href="#1-2-集合和数组的区别" class="headerlink" title="1.2 集合和数组的区别"></a>1.2 集合和数组的区别</h2><ul><li>数组的长度固定，集合的长度不固定</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型</li><li>位置：java.util.*</li></ul><h1 id="2-Collection接口"><a href="#2-Collection接口" class="headerlink" title="2. Collection接口"></a>2. Collection接口</h1><h2 id="2-1-Collection体系集合"><a href="#2-1-Collection体系集合" class="headerlink" title="2.1 Collection体系集合"></a>2.1 Collection体系集合</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220628162522.png" alt="QQ截图20220628162522"></p><h2 id="2-2-Collection父接口"><a href="#2-2-Collection父接口" class="headerlink" title="2.2 Collection父接口"></a>2.2 Collection父接口</h2><blockquote><p>public interface Collection&lt;E&gt;<br>extends Iterable&lt;E&gt;</p><p>集合层次结构中的根界面。 集合表示一组被称为其元素的对象。  一些集合允许重复元素，而其他集合不允许。 有些被命令和其他无序。  JDK不提供此接口的任何直接实现：它提供了更具体的子接口的实现，如 Set 和 List 。 该界面通常用于传递集合，并在需要最大的通用性的情况下对其进行操作。 </p></blockquote><p><strong>特点：</strong>代表一组任意类型的对象，无序、无下标、不能重复</p><p><strong>方法：</strong></p><ul><li>boolean add(Object obj)    //添加一个对象</li><li>boolean addAll(Collection c)    //将一个集合中的所有对象添加到此集合中</li><li>void clear()    //清空此集合中的所有对象</li><li>boolean contains(Object o)    //判断此集合中是否包含o对象</li><li>boolean equals(Object o)    //比较此集合是否与指定对象相等</li><li>boolean isEmpty()    //判断此集合是否为空</li><li>boolean remove(Object o)    //在此集合中移除o对象</li><li>int size()    //返回此集合中的元素个数</li><li>Object[] toArray()    //将此集合转换成数组</li></ul><p><strong>Collection接口使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Collection;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">//集合添加、删除、遍历、判断</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();  <span class="hljs-comment">//实例化ArrayList</span><br>        <span class="hljs-comment">//添加</span><br>        collection.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;3&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;4&quot;</span>);<br>        System.out.println(collection);<br><br>        <span class="hljs-comment">//删除</span><br>        collection.remove(<span class="hljs-string">&quot;3&quot;</span>);<br>        System.out.println(collection);<br><br>        <span class="hljs-comment">//遍历1:增强for遍历</span><br>        <span class="hljs-keyword">for</span>(Object obj : collection)&#123;<br>            System.out.println(obj);<br>        &#125;<br>        <span class="hljs-comment">//遍历2:迭代器遍历</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> collection.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br><br>        <span class="hljs-comment">//判断</span><br>        System.out.println(collection.isEmpty());<br>        System.out.println(collection.contains(<span class="hljs-string">&quot;4&quot;</span>));<br>        System.out.println(collection.size());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-List接口与实现类"><a href="#3-List接口与实现类" class="headerlink" title="3. List接口与实现类"></a>3. List接口与实现类</h1><h2 id="3-1-List子接口"><a href="#3-1-List子接口" class="headerlink" title="3.1 List子接口"></a>3.1 List子接口</h2><blockquote><p>public interface List&lt;E&gt;<br>extends Collection&lt;E&gt;</p><p>有序集合（也称为序列 ）。 该界面的用户可以精确控制列表中每个元素的插入位置。  用户可以通过整数索引（列表中的位置）访问元素，并搜索列表中的元素。 </p></blockquote><p><strong>特点：</strong>有序、有下标、元素可以重复</p><p><strong>方法：</strong></p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">void</td><td align="left">add(int index, E element)</td><td align="left">将指定元素插入此列表中的指定位置（可选操作）。</td></tr><tr><td align="left">boolean</td><td align="left">add(E e)</td><td align="left">将指定的元素追加到此列表的末尾（可选操作）。</td></tr><tr><td align="left">void</td><td align="left">clear()</td><td align="left">从此列表中删除所有元素（可选操作）。</td></tr><tr><td align="left">boolean</td><td align="left">contains(Object o)</td><td align="left">如果此列表包含指定的元素，则返回 true 。</td></tr><tr><td align="left">boolean</td><td align="left">equals(Object o)</td><td align="left">将指定对象与此列表进行比较以获得相等性。</td></tr><tr><td align="left">E</td><td align="left">get(int index)</td><td align="left">返回此列表中指定位置的元素。</td></tr><tr><td align="left">int</td><td align="left">hashCode()</td><td align="left">返回此列表的哈希码值。</td></tr><tr><td align="left">int</td><td align="left">indexOf(Object o)</td><td align="left">返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td align="left">boolean</td><td align="left">isEmpty()</td><td align="left">如果此列表不包含任何元素，则返回 true 。</td></tr><tr><td align="left">Iterator&lt;E&gt;</td><td align="left">iterator()</td><td align="left">以适当的顺序返回此列表中元素的迭代器。</td></tr><tr><td align="left">int</td><td align="left">lastIndexOf(Object o)</td><td align="left">返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td align="left">ListIterator&lt;E&gt;</td><td align="left">listIterator()</td><td align="left">返回此列表中元素的列表迭代器（按适当顺序）。</td></tr><tr><td align="left">E</td><td align="left">remove(int index)</td><td align="left">删除此列表中指定位置的元素（可选操作）。</td></tr><tr><td align="left">boolean</td><td align="left">remove(Object o)</td><td align="left">从该列表中删除指定元素的第一个匹配项（如果存在）（可选操作）。</td></tr><tr><td align="left">E</td><td align="left">set(int index, E element)</td><td align="left">用指定的元素替换此列表中指定位置的元素（可选操作）。</td></tr><tr><td align="left">int</td><td align="left">size()</td><td align="left">返回此列表中的元素数。</td></tr><tr><td align="left">default void</td><td align="left">sort(Comparator&lt;? super E&gt; c)</td><td align="left">根据指定的<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Comparator.html">Comparator</a>引发的顺序对此列表进行排序。</td></tr><tr><td align="left">List&lt;E&gt;</td><td align="left">subList(int fromIndex, int toIndex)</td><td align="left">返回指定的 fromIndex （包含）和 toIndex （不包括）之间的此列表部分的视图。</td></tr><tr><td align="left">Object[]</td><td align="left">toArray()</td><td align="left">以适当的顺序（从第一个元素到最后一个元素）返回包含此列表中所有元素的数组。</td></tr><tr><td align="left">&lt;T&gt; T[]</td><td align="left">toArray(T[] a)</td><td align="left">以适当的顺序返回包含此列表中所有元素的数组; 返回数组的运行时类型是指定数组的运行时类型。</td></tr></tbody></table><ul><li>包含Collection中的所有方法</li></ul><p><strong>List接口使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> List;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();  <span class="hljs-comment">//实例化list接口的实现类，不能实例化接口</span><br>        <span class="hljs-comment">//添加元素</span><br>        list.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;3&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;5&quot;</span>);<br>        list.add(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;4&quot;</span>);<br>        System.out.println(list.toString());<br><br>        <span class="hljs-comment">//删除</span><br>        list.remove(<span class="hljs-string">&quot;2&quot;</span>);<br>        list.remove(<span class="hljs-number">3</span>);<br>        System.out.println(list.toString());<br><br>        <span class="hljs-comment">//遍历1 for循环</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;list.size(); i++)&#123;<br>            System.out.println(list.get(i));  <span class="hljs-comment">//Note:和数组遍历略有区别</span><br>        &#125;<br>        <span class="hljs-comment">//遍历2 增强for循环</span><br><br>        <span class="hljs-comment">//遍历3 迭代器遍历</span><br><br>        <span class="hljs-comment">//遍历4 列表迭代器 list特有 功能更加强大 listIterator可以向前或向后遍历，添加、删除、修改元素</span><br>        <span class="hljs-type">ListIterator</span> <span class="hljs-variable">lit</span> <span class="hljs-operator">=</span> list.listIterator();<br>        <span class="hljs-keyword">while</span>(lit.hasNext())&#123;<br>            System.out.println(lit.nextIndex()+<span class="hljs-string">&quot;:&quot;</span>+lit.next());<br>        &#125;<br>        <span class="hljs-comment">//从后往前遍历</span><br>        <span class="hljs-keyword">while</span>(lit.hasPrevious())&#123;<br>            System.out.println(lit.previousIndex()+<span class="hljs-string">&quot;:&quot;</span>+lit.previous());<br>        &#125;<br><br>        <span class="hljs-comment">//获取位置</span><br>        System.out.println(list.indexOf(<span class="hljs-string">&quot;4&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-ArrayList"><a href="#3-2-ArrayList" class="headerlink" title="3.2 ArrayList"></a>3.2 ArrayList</h2><blockquote><p>public class ArrayList&lt;E&gt;<br>extends AbstractList&lt;E&gt;<br>implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable</p><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。ArrayList 继承了 AbstractList ，并实现了 List 接口。</p></blockquote><p><strong>特点：</strong>数组结构实现，查询快，增删慢；运行效率快，线程不安全</p><p><strong>方法：</strong></p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-add.html">add()</a></td><td align="left">将元素插入到指定位置的 arraylist 中</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-addall.html">addAll()</a></td><td align="left">添加集合中的所有元素到 arraylist 中</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-clear.html">clear()</a></td><td align="left">删除 arraylist 中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-clone.html">clone()</a></td><td align="left">复制一份 arraylist</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-contains.html">contains()</a></td><td align="left">判断元素是否在 arraylist</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-get.html">get()</a></td><td align="left">通过索引值获取 arraylist 中的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-indexof.html">indexOf()</a></td><td align="left">返回 arraylist 中元素的索引值</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-removeall.html">removeAll()</a></td><td align="left">删除存在于指定集合中的 arraylist 里的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-remove.html">remove()</a></td><td align="left">删除 arraylist 里的单个元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-size.html">size()</a></td><td align="left">返回 arraylist 里元素数量</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-isempty.html">isEmpty()</a></td><td align="left">判断 arraylist 是否为空</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-sublist.html">subList()</a></td><td align="left">截取部分 arraylist 的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-set.html">set()</a></td><td align="left">替换 arraylist 中指定索引的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-sort.html">sort()</a></td><td align="left">对 arraylist 元素进行排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-toarray.html">toArray()</a></td><td align="left">将 arraylist 转换为数组</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-tostring.html">toString()</a></td><td align="left">将 arraylist 转换为字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-surecapacity.html">ensureCapacity</a>()</td><td align="left">设置指定容量大小的 arraylist</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-lastindexof.html">lastIndexOf()</a></td><td align="left">返回指定元素在 arraylist 中最后一次出现的位置</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-retainall.html">retainAll()</a></td><td align="left">保留 arraylist 中在指定集合中也存在的那些元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-containsall.html">containsAll()</a></td><td align="left">查看 arraylist 是否包含指定集合中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-trimtosize.html">trimToSize()</a></td><td align="left">将 arraylist 中的容量调整为数组中的元素个数</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-removerange.html">removeRange()</a></td><td align="left">删除 arraylist 中指定索引之间存在的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-replaceall.html">replaceAll()</a></td><td align="left">将给定的操作内容替换掉数组中每一个元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-removeif.html">removeIf()</a></td><td align="left">删除所有满足特定条件的 arraylist 元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-foreach.html">forEach()</a></td><td align="left">遍历 arraylist 中每一个元素并执行特定操作</td></tr></tbody></table><p><strong>ArrayList的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ArrayList;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        ArrayList&lt;String&gt; arraylist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();  <span class="hljs-comment">//&lt;&gt;代表泛型 ()代表无参构造</span><br>        <span class="hljs-comment">//添加元素</span><br>        arraylist.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        arraylist.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        arraylist.add(<span class="hljs-string">&quot;!&quot;</span>);<br>        arraylist.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        System.out.println(arraylist);<br><br>        <span class="hljs-comment">//访问元素</span><br>        System.out.println(arraylist.get(<span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">//修改元素</span><br>        arraylist.set(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;javase&quot;</span>);<br>        System.out.println(arraylist);<br><br>        <span class="hljs-comment">//删除元素</span><br>        arraylist.remove(<span class="hljs-number">3</span>);<br>        System.out.println(arraylist);<br><br>        <span class="hljs-comment">//计算大小</span><br>        System.out.println(arraylist.size());<br><br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-comment">//遍历1</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arraylist.size(); i++)&#123;<br>            System.out.println(arraylist.get(i));<br>        &#125;<br>        <span class="hljs-comment">//遍历2</span><br>        <span class="hljs-keyword">for</span>(Object obj : arraylist)&#123;<br>            System.out.println(obj);<br>        &#125;<br>        <span class="hljs-comment">//遍历3</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> arraylist.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-LinkedList"><a href="#3-3-LinkedList" class="headerlink" title="3.3 LinkedList"></a>3.3 LinkedList</h2><blockquote><p>public class LinkedList&lt;E&gt;<br>extends AbstractSequentialList&lt;E&gt;<br>implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, Serializable</p><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p><p>存储结构：双向链表</p></blockquote><p><strong>特点：</strong>链表结构实现，增删快，查询慢</p><p><strong>分类：</strong></p><p>链表可分为单向链表和双向链表。</p><p>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/06/408px-Singly-linked-list.svg_.png" alt="img"></p><p>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/06/610px-Doubly-linked-list.svg_.png" alt="img"></p><p>Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。</p><p><strong>实现与继承：</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/linkedlist.png" alt="linkedlist"></p><ul><li>LinkedList 继承了 AbstractSequentialList 类。</li><li>LinkedList 实现了 Queue 接口，可作为队列使用。</li><li>LinkedList 实现了 List 接口，可进行列表的相关操作。</li><li>LinkedList 实现了 Deque 接口，可作为队列使用。</li><li>LinkedList 实现了 Cloneable 接口，可实现克隆。</li><li>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</li></ul><p><strong>方法：</strong></p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">public boolean add(E e)</td><td align="left">链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="left">public void add(int index, E element)</td><td align="left">向指定位置插入元素。</td></tr><tr><td align="left">public boolean addAll(Collection c)</td><td align="left">将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="left">public boolean addAll(int index, Collection c)</td><td align="left">将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="left">public void addFirst(E e)</td><td align="left">元素添加到头部。</td></tr><tr><td align="left">public void addLast(E e)</td><td align="left">元素添加到尾部。</td></tr><tr><td align="left">public void clear()</td><td align="left">清空链表。</td></tr><tr><td align="left">public E removeFirst()</td><td align="left">删除并返回第一个元素。</td></tr><tr><td align="left">public E removeLast()</td><td align="left">删除并返回最后一个元素。</td></tr><tr><td align="left">public boolean remove(Object o)</td><td align="left">删除某一元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="left">public E remove(int index)</td><td align="left">删除指定位置的元素。</td></tr><tr><td align="left">public E remove()</td><td align="left">删除并返回第一个元素。</td></tr><tr><td align="left">public boolean contains(Object o)</td><td align="left">判断是否含有某一元素。</td></tr><tr><td align="left">public E get(int index)</td><td align="left">返回指定位置的元素。</td></tr><tr><td align="left">public E getFirst()</td><td align="left">返回第一个元素。</td></tr><tr><td align="left">public E getLast()</td><td align="left">返回最后一个元素。</td></tr><tr><td align="left">public int indexOf(Object o)</td><td align="left">查找指定元素从前往后第一次出现的索引。</td></tr><tr><td align="left">public int lastIndexOf(Object o)</td><td align="left">查找指定元素最后一次出现的索引。</td></tr><tr><td align="left">public E set(int index, E element)</td><td align="left">设置指定位置的元素。</td></tr><tr><td align="left">public Object clone()</td><td align="left">克隆该列表。</td></tr><tr><td align="left">public int size()</td><td align="left">返回链表元素个数。</td></tr><tr><td align="left">public Object[] toArray()</td><td align="left">返回一个由链表元素组成的数组。</td></tr></tbody></table><p><strong>LinkedList的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> LinkedList;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        LinkedList&lt;String&gt; sites = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;();<br><br>        <span class="hljs-comment">//添加</span><br>        sites.add(<span class="hljs-string">&quot;Geogle&quot;</span>);<br>        sites.add(<span class="hljs-string">&quot;runoob&quot;</span>);<br>        sites.add(<span class="hljs-string">&quot;firefox&quot;</span>);<br>        sites.add(<span class="hljs-string">&quot;baidu&quot;</span>);<br>        System.out.println(sites.size());<br>        System.out.println(sites);<br>        <span class="hljs-comment">//头部添加</span><br>        sites.addFirst(<span class="hljs-string">&quot;taobao&quot;</span>);<br>        <span class="hljs-comment">//尾部添加</span><br>        sites.addLast(<span class="hljs-string">&quot;wiki&quot;</span>);<br>        System.out.println(sites);<br><br>        <span class="hljs-comment">//删除</span><br>        sites.remove(<span class="hljs-string">&quot;firefox&quot;</span>);<br>        <span class="hljs-comment">//删除头部元素</span><br>        sites.removeFirst();<br>        <span class="hljs-comment">//删除尾部元素</span><br>        sites.removeLast();<br>        System.out.println(sites);<br><br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-comment">//遍历1</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;sites.size(); i++)&#123;<br>            System.out.println(sites.get(i));<br>        &#125;<br>        <span class="hljs-comment">//遍历2</span><br>        <span class="hljs-keyword">for</span>(Object obj : sites)&#123;<br>            System.out.println(obj);<br>        &#125;<br>        <span class="hljs-comment">//遍历3</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> sites.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br>        <br>        <span class="hljs-comment">//获取</span><br>        <span class="hljs-comment">//使用getFirst()获取头部元素</span><br>        System.out.println(sites.getFirst());<br>        <span class="hljs-comment">//使用getLast()获取尾部元素</span><br>        System.out.println(sites.getLast());<br>        <span class="hljs-comment">//获取index</span><br>        System.out.println(sites.indexOf(<span class="hljs-string">&quot;runoob&quot;</span>));<br><br>        <span class="hljs-comment">//判断</span><br>        System.out.println(sites.isEmpty());<br>        System.out.println(sites.contains(<span class="hljs-string">&quot;runoob&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-ArrayList和LinkedList区别"><a href="#3-4-ArrayList和LinkedList区别" class="headerlink" title="3.4 ArrayList和LinkedList区别"></a>3.4 ArrayList和LinkedList区别</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220704160627.png" alt="QQ截图20220704160627"></p><h2 id="3-5-Vector"><a href="#3-5-Vector" class="headerlink" title="3.5 Vector"></a>3.5 Vector</h2><blockquote><p>public class Vector&lt;E&gt;<br>extends AbstractList&lt;E&gt;<br>implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable</p><p>Vector类实现了可扩展的对象数组。  像数组一样，它包含可以使用整数索引访问的组件。 但是， Vector的大小可以根据需要增长或缩小，以适应在创建Vector之后添加和删除项目。</p></blockquote><p><strong>特点：</strong>数组结构实现，查询快，增删慢；运行效率慢，线程安全</p><p><strong>vector的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Vector;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>        <span class="hljs-comment">//添加</span><br>        vector.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        vector.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        vector.add(<span class="hljs-string">&quot;!&quot;</span>);<br>        vector.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        System.out.println(vector);<br><br>        <span class="hljs-comment">//删除</span><br>        vector.remove(<span class="hljs-string">&quot;!&quot;</span>);<br><span class="hljs-comment">//      vector.remove(2);</span><br>        System.out.println(vector);<br><br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-comment">//使用枚举器</span><br>        <span class="hljs-type">Enumeration</span> <span class="hljs-variable">en</span> <span class="hljs-operator">=</span> vector.elements();<br>        <span class="hljs-keyword">while</span>(en.hasMoreElements())&#123;<br>            System.out.println(en.nextElement());<br>        &#125;<br><br>        <span class="hljs-comment">//判断</span><br>        System.out.println(vector.contains(<span class="hljs-string">&quot;java&quot;</span>));<br>        System.out.println(vector.isEmpty());<br>        <br>        <span class="hljs-comment">//vector其他方法:firstElement、lastElement、elementAt()</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-Iterator"><a href="#3-6-Iterator" class="headerlink" title="3.6 Iterator"></a>3.6 Iterator</h2><h3 id="3-6-1-Iterator"><a href="#3-6-1-Iterator" class="headerlink" title="3.6.1 Iterator"></a>3.6.1 Iterator</h3><blockquote><p>public interface Iterator&lt;E&gt;</p><p>位于java.util包下</p><p>Iterator(迭代器)不是一个集合，它是一种用于访问集合的方法，可用于迭代ArrayList和HashSet等集合。</p></blockquote><p><strong>常用方法：</strong></p><ul><li>iterator()    //获取迭代器</li><li>boolean hasNext()    //检测集合中是否还有元素</li><li>E next()    //返回迭代器的下一个元素，并且更新迭代器的状态</li><li>void remove()    //将迭代器返回的元素删除</li></ul><h3 id="3-6-1-ListIterator"><a href="#3-6-1-ListIterator" class="headerlink" title="3.6.1 ListIterator"></a>3.6.1 ListIterator</h3><blockquote><p>public interface ListIterator&lt;E&gt;<br>extends Iterator&lt;E&gt;</p><p>用于允许程序员沿任一方向遍历列表的列表的迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置。 </p></blockquote><p><strong>常用方法：</strong></p><ul><li>void add(E e)    //将指定的元素插入列表</li><li>boolean hasNext()    //如果此列表迭代器在向前方向遍历列表时具有更多元素，则返回true</li><li>boolean hasPrevious()    //如果此列表迭代器在相反方向遍历列表时具有更多元素，则返回true</li><li>E next()    //返回列表中的下一个元素，并且前进光标位置。</li><li>int nextIndex()    //返回由后续调用返回的元素的索引 next()</li><li>E previous()    //返回列表中的上一个元素，并向后移动光标位置。 </li><li>int previousIndex()    //返回由后续调用返回的元素的索引 previous()</li><li>void remove()    //从列表中删除 next() 或 previous() 返回的最后一个元素。 </li><li>void set(E e)    //用指定的元素替换 next() 或 previous() 返回的最后一个元素。 </li></ul><h1 id="4-泛型和工具类"><a href="#4-泛型和工具类" class="headerlink" title="4. 泛型和工具类"></a>4. 泛型和工具类</h1><h2 id="4-1-泛型"><a href="#4-1-泛型" class="headerlink" title="4.1 泛型"></a>4.1 泛型</h2><ul><li>Java泛型是JDK1.5中引入的一个新特性，<strong>泛型的本质是为了参数化类型</strong>（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</li><li>常见的形式有泛型类、泛型接口、泛型方法</li><li>语法：&lt;T,….&gt; T称为类型占位符，表示一种引用类型。T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</li><li>好处：<ul><li>提高代码的复用性</li><li>防止类型转换异常，提高代码的安全性</li></ul></li></ul><h2 id="4-2-泛型类"><a href="#4-2-泛型类" class="headerlink" title="4.2 泛型类"></a>4.2 泛型类</h2><p>泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    泛型类</span><br><span class="hljs-comment">    语法：类名&lt;T&gt;</span><br><span class="hljs-comment">    T是类型占位符，表示一种引用类型，如果编写多个使用逗号隔开</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGeneric</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">//使用泛型T</span><br>    <span class="hljs-comment">//1.创建变量</span><br>    T t;<br><br>    <span class="hljs-comment">//2.泛型作为方法的参数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span>&#123;<br>        System.out.println(t);<br>    &#125;<br><br>    <span class="hljs-comment">//3.泛型作为方法的返回值</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getT</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：使用泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestGeneric</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//使用泛型类创建对象</span><br>        <span class="hljs-comment">//注意：1.泛型只能使用引用类型 2.不同泛型类型对象之间不能相互赋值</span><br>        MyGeneric&lt;String&gt; myGeneric = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyGeneric</span>&lt;String&gt;();<br>        myGeneric.t = <span class="hljs-string">&quot;hello&quot;</span>;<br>        myGeneric.show(<span class="hljs-string">&quot;world&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> myGeneric.getT();<br>        System.out.println(str);<br><br>        <span class="hljs-comment">//Integer类型</span><br>        MyGeneric&lt;Integer&gt; myGeneric2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyGeneric</span>&lt;Integer&gt;();<br>        myGeneric2.t = <span class="hljs-number">100</span>;<br>        myGeneric2.show(<span class="hljs-number">200</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> myGeneric2.getT();<br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-泛型接口"><a href="#4-3-泛型接口" class="headerlink" title="4.3 泛型接口"></a>4.3 泛型接口</h2><p>泛型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    泛型接口</span><br><span class="hljs-comment">    语法：接口名&lt;T&gt;</span><br><span class="hljs-comment">    注意：不能使用泛型创建静态常量</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyInterface</span>&lt;T&gt; &#123;<br>    T <span class="hljs-title function_">server</span><span class="hljs-params">(T t)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：使用泛型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    方法1：实现接口时确定类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterfaceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyInterface</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">server</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    方法2：实现接口时不确定类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterfaceImpl2</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyInterface</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">server</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//test1</span><br>        <span class="hljs-type">MyInterfaceImpl</span> <span class="hljs-variable">impl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterfaceImpl</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> impl.server(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(str);<br><br>        <span class="hljs-comment">//test2</span><br>        MyInterfaceImpl2&lt;Integer&gt; impl2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterfaceImpl2</span>&lt;Integer&gt;();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> impl2.server(<span class="hljs-number">100</span>);<br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-泛型方法"><a href="#4-4-泛型方法" class="headerlink" title="4.4 泛型方法"></a>4.4 泛型方法</h2><p>泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    泛型方法</span><br><span class="hljs-comment">    语法：&lt;T&gt; 返回值类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGenericMethod</span> &#123;<br>    <span class="hljs-comment">//泛型方法</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span>&#123;<br>        System.out.println(t);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">MyGenericMethod</span> <span class="hljs-variable">myGenericMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyGenericMethod</span>();<br>        myGenericMethod.show(<span class="hljs-string">&quot;hello&quot;</span>);<br>        myGenericMethod.show(<span class="hljs-number">100</span>);<br>        myGenericMethod.show(<span class="hljs-number">3.14</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5-泛型集合"><a href="#4-5-泛型集合" class="headerlink" title="4.5 泛型集合"></a>4.5 泛型集合</h2><p>概念：参数化类型、类型安全的集合，强制集合元素的类型必须一致。</p><p>特点：</p><ul><li>编译时即可检查，而非运行时抛出异常</li><li>访问时，不必类型转换（拆箱）</li><li>不同泛型之间相互引用不能相互赋值，泛型不存在多态</li></ul><p>泛型集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FanXing;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    泛型集合</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arraylist</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">//集合元素类型为object，使用时需要类型转换，可能会出现类型转换异常</span><br>        arraylist.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        arraylist.add(<span class="hljs-number">100</span>);<br>        arraylist.add(<span class="hljs-number">3.14</span>);<br>        <span class="hljs-keyword">for</span>(Object object : arraylist)&#123;<br>            System.out.println(object);<br>        &#125;<br><br>        <span class="hljs-comment">//泛型集合 避免类型转换异常</span><br>        ArrayList&lt;String&gt; arraylist2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        arraylist2.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        arraylist2.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        <span class="hljs-keyword">for</span>(String str : arraylist2)&#123;<br>            System.out.println(str);<br>        &#125;<br><br>        ArrayList&lt;Integer&gt; arraylist3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        arraylist3.add(<span class="hljs-number">100</span>);<br>        arraylist3.add(<span class="hljs-number">20</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> arraylist3.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-Set接口与实现类"><a href="#5-Set接口与实现类" class="headerlink" title="5. Set接口与实现类"></a>5. Set接口与实现类</h1><h2 id="5-1-Set子接口"><a href="#5-1-Set子接口" class="headerlink" title="5.1 Set子接口"></a>5.1 Set子接口</h2><blockquote><p>public interface Set&lt;E&gt;<br>extends Collection&lt;E&gt;</p><p>不包含重复元素的集合。  更正式地，集合不包含一对元素e1和e2  ，使得e1.equals(e2)，并且最多只有一个空元素。  正如其名称所暗示的那样，这个接口模拟了数学集抽象。 </p></blockquote><p><strong>特点：</strong>无序、无下标、元素不可重复</p><p><strong>方法：</strong></p><ul><li>全部继承自Collection中的方法</li></ul><p><strong>Set接口的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Set;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    set接口的使用</span><br><span class="hljs-comment">    特点：无序、没有下标、不能重复</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><br>        <span class="hljs-comment">//1.添加数据</span><br>        set.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;d&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+set.size());<br>        System.out.println(set.toString());<br>        <span class="hljs-comment">/* 输出：[a, b, c, d] 说明set无序不能重复 */</span><br><br>        <span class="hljs-comment">//2.删除数据</span><br>        set.remove(<span class="hljs-string">&quot;d&quot;</span>);<br>        System.out.println(set.toString());<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-comment">//遍历1：增强for</span><br>        <span class="hljs-keyword">for</span>(String str : set)&#123;<br>            System.out.println(str);<br>        &#125;<br>        <span class="hljs-comment">//遍历2：迭代器</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> set.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br><br>        <span class="hljs-comment">//判断</span><br>        System.out.println(set.isEmpty());<br>        System.out.println(set.contains(<span class="hljs-string">&quot;b&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-HashSet"><a href="#5-2-HashSet" class="headerlink" title="5.2 HashSet"></a>5.2 HashSet</h2><p><strong>HashSet：</strong></p><ul><li>基于HashCode计算元素存放位置</li><li>当存入元素的哈希码相同时，会调用equals进行确认，如结果为true，则拒绝后者存入</li></ul><blockquote><p>public class HashSet&lt;E&gt;<br>extends AbstractSet&lt;E&gt;<br>implements Set&lt;E&gt;, Cloneable, Serializable</p><p>该类实现Set接口，由哈希表（实际为HashMap实例）支持。  对集合的迭代顺序不作任何保证; 特别是，它不能保证订单在一段时间内保持不变。  这个类允许null元素。 </p></blockquote><p><strong>方法：</strong></p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="left">add(E e)</td><td align="left">如果指定的元素尚不存在，则将其添加到此集合中。</td></tr><tr><td align="left">void</td><td align="left">clear()</td><td align="left">从该集中删除所有元素。</td></tr><tr><td align="left">Object</td><td align="left">clone()</td><td align="left">返回此 HashSet实例的浅表副本：未克隆元素本身。</td></tr><tr><td align="left">boolean</td><td align="left">contains(Object o)</td><td align="left">如果此set包含指定的元素，则返回 true 。</td></tr><tr><td align="left">boolean</td><td align="left">isEmpty()</td><td align="left">如果此集合不包含任何元素，则返回 true 。</td></tr><tr><td align="left">Iterator&lt;E&gt;</td><td align="left">iterator()</td><td align="left">返回此set中元素的迭代器。</td></tr><tr><td align="left">boolean</td><td align="left">remove(Object o)</td><td align="left">如果存在，则从该集合中移除指定的元素。</td></tr><tr><td align="left">int</td><td align="left">size()</td><td align="left">返回此集合中的元素数（基数）。</td></tr></tbody></table><p><strong>HashSet的使用1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Set;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    HashSet集合的使用</span><br><span class="hljs-comment">    存储结构：哈希表（数组+链表+红黑树）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        HashSet&lt;String&gt; hashset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><br>        <span class="hljs-comment">//1.添加元素</span><br>        hashset.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        hashset.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        hashset.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        hashset.add(<span class="hljs-string">&quot;d&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+hashset.size());<br>        System.out.println(hashset.toString());<br><br>        <span class="hljs-comment">//2.删除元素</span><br>        hashset.remove(<span class="hljs-string">&quot;d&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除之后：&quot;</span>+hashset.size());<br>        System.out.println(hashset.toString());<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-comment">//遍历1</span><br>        <span class="hljs-keyword">for</span>(String str : hashset)&#123;<br>            System.out.println(str);<br>        &#125;<br><br>        <span class="hljs-comment">//遍历2</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> hashset.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br><br>        <span class="hljs-comment">//判断</span><br>        System.out.println(hashset.isEmpty());<br>        System.out.println(hashset.contains(<span class="hljs-string">&quot;c&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>HashSet的使用2 &amp;&amp; HashSet存储过程：</strong></p><p>Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">//带参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Person)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) o;<br><br>        <span class="hljs-keyword">if</span> (getAge() != person.getAge()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> getName().equals(person.getName());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> getName().hashCode();<br>        result = <span class="hljs-number">31</span> * result + getAge();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Set;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    HashSet的使用</span><br><span class="hljs-comment">    存储结构：哈希表（数组+链表+红黑树）</span><br><span class="hljs-comment">    存储过程：</span><br><span class="hljs-comment">        1.根据hashcode计算保存的位置，如果此位置为空，则直接保存，如果不为空执行第二步</span><br><span class="hljs-comment">        2.再执行equals方法，如果equals方法为true，则认为是重复，否则形成链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        HashSet&lt;Person&gt; person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Person&gt;();<br><br>        <span class="hljs-comment">//1.添加元素</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;林南芊&quot;</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-number">21</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;林思湫&quot;</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;林落诗&quot;</span>,<span class="hljs-number">22</span>);<br><br>        person.add(p1);<br>        person.add(p2);<br>        person.add(p3);<br>        person.add(p4);<br><span class="hljs-comment">//      person.add(p4);  不可添加，元素重复</span><br>        person.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;林落诗&quot;</span>,<span class="hljs-number">22</span>));  <span class="hljs-comment">//可以添加</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            要使重新new的重复元素无法添加，则需要了解HashSet的存储过程</span><br><span class="hljs-comment">            重写Person类中的hashCode方法和equals方法，使其对添加的元素的name和age进行判断</span><br><span class="hljs-comment">         */</span><br><br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+person.size());<br>        System.out.println(person.toString());<br><br>        <span class="hljs-comment">//2.删除元素</span><br>        person.remove(<span class="hljs-string">&quot;p4&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除之后：&quot;</span>+person.size());<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-comment">//遍历1</span><br>        <span class="hljs-keyword">for</span>(Person str : person)&#123;<br>            System.out.println(str);<br>        &#125;<br>        <span class="hljs-comment">//遍历2</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> person.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br><br>        <span class="hljs-comment">//4.判断</span><br>        System.out.println(person.isEmpty());<br>        System.out.println(person.contains(p2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-TreeSet"><a href="#5-3-TreeSet" class="headerlink" title="5.3 TreeSet"></a>5.3 TreeSet</h2><p><strong>TreeSet：</strong></p><ul><li>基于排列顺序实现元素不重复</li><li>实现了SortedSet接口，对集合元素自动排序</li><li><strong>元素对象的类型必须实现Comparable接口</strong>，指定排序规则，否则无法添加</li><li>通过CompareTo方法确定是否为重复元素</li></ul><blockquote><p>public class TreeSet&lt;E&gt;<br>extends AbstractSet&lt;E&gt;<br>implements NavigableSet&lt;E&gt;, Cloneable, Serializable</p><p>该类实现了Set接口，可以实现排序等功能。</p></blockquote><p><strong>方法：</strong></p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="left">add(E e)</td><td align="left">如果指定的元素尚不存在，则将其添加到此集合中。</td></tr><tr><td align="left">boolean</td><td align="left"><code>addAll(Collection&lt;? extends E&gt; c)</code></td><td align="left">将指定集合中的所有元素添加到此集合中。</td></tr><tr><td align="left">E</td><td align="left">ceiling(E e)</td><td align="left">返回此set中大于或等于给定元素的 null元素，如果没有这样的元素，则null 。</td></tr><tr><td align="left">void</td><td align="left">clear()</td><td align="left">从该集中删除所有元素。</td></tr><tr><td align="left">boolean</td><td align="left">contains(Object o)</td><td align="left">如果此set包含指定的元素，则返回 true 。</td></tr><tr><td align="left">E</td><td align="left">first()</td><td align="left">返回此集合中当前的第一个（最低）元素。</td></tr><tr><td align="left">E</td><td align="left">floor(E e)</td><td align="left">返回此set中小于或等于给定元素的最大元素，如果没有这样的元素，则 null 。</td></tr><tr><td align="left">SortedSet&lt;E&gt;</td><td align="left">headSet(E toElement)</td><td align="left">返回此set的部分视图，其元素严格小于 toElement 。</td></tr><tr><td align="left">E</td><td align="left">higher(E e)</td><td align="left">返回此集合中的最小元素严格大于给定元素，如果没有这样的元素，则 null 。</td></tr><tr><td align="left">boolean</td><td align="left">isEmpty()</td><td align="left">如果此集合不包含任何元素，则返回 true 。</td></tr><tr><td align="left">Iterator&lt;E&gt;</td><td align="left">iterator()</td><td align="left">以升序返回此集合中元素的迭代器。</td></tr><tr><td align="left">E</td><td align="left">last()</td><td align="left">返回此集合中当前的最后一个（最高）元素。</td></tr><tr><td align="left">E</td><td align="left">lower(E e)</td><td align="left">返回此集合中的最大元素严格小于给定元素，如果没有这样的元素，则 null 。</td></tr><tr><td align="left">E</td><td align="left">pollFirst()</td><td align="left">检索并删除第一个（最低）元素，如果此组为空，则返回 null 。</td></tr><tr><td align="left">E</td><td align="left">pollLast()</td><td align="left">检索并删除最后一个（最高）元素，如果此集合为空，则返回 null 。</td></tr><tr><td align="left">boolean</td><td align="left">remove(Object o)</td><td align="left">如果存在，则从该集合中移除指定的元素。</td></tr><tr><td align="left">int</td><td align="left">size()</td><td align="left">返回此集合中的元素数（基数）。</td></tr></tbody></table><p><strong>TreeSet的使用1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Set;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    TreeSet的使用</span><br><span class="hljs-comment">    存储结构：红黑树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        TreeSet&lt;String&gt; treeSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;String&gt;();<br><br>        <span class="hljs-comment">//1.添加元素</span><br>        treeSet.add(<span class="hljs-string">&quot;xyz&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+treeSet.size());<br>        System.out.println(treeSet.toString());<br><br>        <span class="hljs-comment">//2.删除元素</span><br>        treeSet.remove(<span class="hljs-string">&quot;world&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除之后：&quot;</span>+treeSet.size());<br><br>        <span class="hljs-comment">//3.遍历元素</span><br>        <span class="hljs-comment">//遍历1</span><br>        <span class="hljs-keyword">for</span>(String str : treeSet)&#123;<br>            System.out.println(str);<br>        &#125;<br>        <span class="hljs-comment">//遍历2</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> treeSet.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br><br>        <span class="hljs-comment">//判断</span><br>        System.out.println(treeSet.contains(<span class="hljs-string">&quot;abc&quot;</span>));<br>        System.out.println(treeSet.isEmpty());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>TreeSet的使用2（使用TreeSet保存数据）：</strong></p><p>要求：元素的类型必须实现Comparable接口，compareTo()方法返回值为0，认为是重复元素</p><p>Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Person&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">//带参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//先比较姓名，再比较年龄，可自定义比较</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Person o)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.name.compareTo(o.getName());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.age-o.getAge();<br>        <span class="hljs-type">return</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span> ? n2 : n1;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Set;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    使用TreeSet保存数据</span><br><span class="hljs-comment">    存储结构：红黑树</span><br><span class="hljs-comment">    要求：元素必须实现Comparable接口，compareTo()方法返回值为0，认为是重复元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        TreeSet&lt;Person&gt; persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;Person&gt;();<br><br>        <span class="hljs-comment">//1.添加元素</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;南芊&quot;</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;慕椿&quot;</span>,<span class="hljs-number">21</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;思湫&quot;</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;落诗&quot;</span>,<span class="hljs-number">22</span>);<br><br>        persons.add(p1);<br>        persons.add(p2);<br>        persons.add(p3);<br>        persons.add(p4);<br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+persons.size());<br>        System.out.println(persons.toString());<br><br>        <span class="hljs-comment">//2.删除元素</span><br>        persons.remove(p4);<br>        System.out.println(<span class="hljs-string">&quot;删除之后：&quot;</span>+persons.size());<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-comment">//遍历1</span><br>        <span class="hljs-keyword">for</span>(Person person : persons)&#123;<br>            System.out.println(person);<br>        &#125;<br>        <span class="hljs-comment">//遍历2</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> persons.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br><br>        <span class="hljs-comment">//判断</span><br>        System.out.println(persons.isEmpty());<br>        System.out.println(persons.contains(p4));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-4-Comparator接口"><a href="#5-4-Comparator接口" class="headerlink" title="5.4 Comparator接口"></a>5.4 Comparator接口</h2><blockquote><p>Functional Interface:</p><p>这是一个功能接口，因此可以用作lambda表达式或方法引用的赋值目标。</p><p>@FunctionalInterface<br>public interface Comparator&lt;T&gt;</p><p>比较函数，它对某些对象集合施加<em>总排序</em> 。 可以将比较器传递给排序方法（例如<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Collections.html#sort(java.util.List,java.util.Comparator)">Collections.sort</a>或<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Arrays.html#sort(T[],java.util.Comparator)">Arrays.sort</a> ），以便精确控制排序顺序。 比较器还可用于控制某些数据结构的顺序（例如<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/SortedSet.html">sorted sets</a>或<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/SortedMap.html">sorted maps</a> ），或者为没有<a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/Comparable.html">natural ordering</a>的对象集合提供排序。</p></blockquote><p><strong>Comparator接口的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Set;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    TreeSet集合的使用</span><br><span class="hljs-comment">    Comparator：实现定制比较（比较器，是一种功能接口）</span><br><span class="hljs-comment">    Comparable：可比较的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合，并指定比较规则</span><br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">persons</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Person&gt;() &#123;<br>            <span class="hljs-comment">//重写compare方法</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Person o1, Person o2)</span> &#123;<br>                <span class="hljs-comment">//自定义排序，先比较年龄，再比较姓名</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> o1.getAge()-o2.getAge();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> o1.getName().compareTo(o2.getName());<br>                <span class="hljs-type">return</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span> ? n2 : n1;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            自定义比较规则后，元素不一定要实现Comparable接口，因为在创建集合时已经指定比较规则了</span><br><span class="hljs-comment">            不能直接new接口，采用匿名内部类的方式实现比较器</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//1.添加元素</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;nanqian&quot;</span>,<span class="hljs-number">21</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;muchun&quot;</span>,<span class="hljs-number">23</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;siqiu&quot;</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;luoshi&quot;</span>,<span class="hljs-number">22</span>);<br><br>        persons.add(p1);<br>        persons.add(p2);<br>        persons.add(p3);<br>        persons.add(p4);<br>        System.out.println(persons.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-Map接口与实现类"><a href="#6-Map接口与实现类" class="headerlink" title="6. Map接口与实现类"></a>6. Map接口与实现类</h1><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220725161304.png" alt="QQ截图20220725161304"></p><h2 id="6-1-Map父接口"><a href="#6-1-Map父接口" class="headerlink" title="6.1 Map父接口"></a>6.1 Map父接口</h2><blockquote><p>public interface Map&lt;K,V&gt;</p><p>将键映射到值的对象。 地图不能包含重复的键; 每个键最多可以映射一个值。</p></blockquote><p><strong>特点：</strong>存储一对数据（Key-Value），无序、无下标，键不可重复，值可重复</p><p><strong>方法：</strong></p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">void</td><td align="left">clear()</td><td align="left">从此映射中删除所有映射（可选操作）。</td></tr><tr><td align="left">boolean</td><td align="left">containsKey(Object key)</td><td align="left">如果此映射包含指定键的映射，则返回 <code>true</code> 。</td></tr><tr><td align="left">boolean</td><td align="left">containsValue(Object value)</td><td align="left">如果此映射将一个或多个键映射到指定值，则返回 true</td></tr><tr><td align="left">Set&lt;Map.Entry&lt;K,V&gt;&gt;</td><td align="left">entrySet()</td><td align="left">返回此映射中包含的映射的<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Set.html">Set</a>视图。即返回所有键值对的Set集合。</td></tr><tr><td align="left">boolean</td><td align="left">equals(Object o)</td><td align="left">将指定对象与此映射进行比较以获得相等性。</td></tr><tr><td align="left">V</td><td align="left">get(Object key)</td><td align="left">返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回null</td></tr><tr><td align="left">boolean</td><td align="left">isEmpty()</td><td align="left">如果此映射不包含键 - 值映射，则返回 true 。</td></tr><tr><td align="left">Set&lt;K&gt;</td><td align="left">keySet()</td><td align="left">返回此映射中包含的键的<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Set.html">Set</a>视图。即返回所有key的Set集合。</td></tr><tr><td align="left">V</td><td align="left">put(K key, V value)</td><td align="left">将对象存入到集合中，关联键值。key重复则覆盖原值</td></tr><tr><td align="left">V</td><td align="left">remove(Object key)</td><td align="left">如果存在，则从该映射中移除键的映射。</td></tr><tr><td align="left">int</td><td align="left">size()</td><td align="left">返回此映射中键 - 值映射的数量。</td></tr><tr><td align="left">Collection&lt;V&gt;</td><td align="left">values()</td><td align="left">返回包含所有值的Collection集合</td></tr></tbody></table><p><strong>Map接口的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Map;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Map接口的使用</span><br><span class="hljs-comment">    特点：1.存储键值对 2.键不能重复 3.无序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建Map集合</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();<br><br>        <span class="hljs-comment">//1.添加元素 添加重复key，后者元素会覆盖前者元素</span><br>        map.put(<span class="hljs-string">&quot;cn&quot;</span>,<span class="hljs-string">&quot;中国&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;uk&quot;</span>,<span class="hljs-string">&quot;英国&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;usa&quot;</span>,<span class="hljs-string">&quot;美国&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;rus&quot;</span>,<span class="hljs-string">&quot;俄罗斯&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+map.size());<br>        System.out.println(map.toString());<br><br>        <span class="hljs-comment">//2.删除</span><br>        map.remove(<span class="hljs-string">&quot;rus&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除之后：&quot;</span>+map.size());<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-comment">//遍历1：使用keySet()方法，返回所有key的Set集合</span><br>        System.out.println(<span class="hljs-string">&quot;使用keySet()方法遍历：&quot;</span>);<br>        Set&lt;String&gt; keyset = map.keySet();<br>        <span class="hljs-keyword">for</span>(String key : keyset)&#123;<br>            System.out.println(key+<span class="hljs-string">&quot;,&quot;</span>+map.get(key));<br>        &#125;<br>        <span class="hljs-comment">//合并写法</span><br><span class="hljs-comment">//        for(String key : map.keySet())&#123;</span><br><span class="hljs-comment">//            System.out.println(key+&quot;,&quot;+map.get(key));</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//遍历2：使用entrySet()方法，返回所有键值对的Set集合</span><br>        System.out.println(<span class="hljs-string">&quot;使用entrySet()方法遍历：&quot;</span>);<br>        Set&lt;Map.Entry&lt;String,String&gt;&gt; entries = map.entrySet();<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;String,String&gt; entry : entries)&#123;<br>            System.out.println(entry.getKey()+<span class="hljs-string">&quot;,&quot;</span>+entry.getValue());<br>        &#125;<br>        <span class="hljs-comment">//合并写法</span><br><span class="hljs-comment">//        for(Map.Entry&lt;String,String&gt; entry : map.entrySet())&#123;</span><br><span class="hljs-comment">//            System.out.println(entry.getKey()+&quot;,&quot;+entry.getValue());</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//4.判断</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;cn&quot;</span>));<br>        System.out.println(map.containsValue(<span class="hljs-string">&quot;冰岛&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-2-HashMap"><a href="#6-2-HashMap" class="headerlink" title="6.2 HashMap"></a>6.2 HashMap</h2><blockquote><p>public class HashMap&lt;K,V&gt;<br>extends AbstractMap&lt;K,V&gt;<br>implements Map&lt;K,V&gt;, Cloneable, Serializable</p><p>基于哈希表的Map接口的实现，即Map接口的实现类。 此实现提供了所有可选的映射操作，并允许null值和null键。 （ HashMap类大致相当于Hashtable ，除了它是不同步的并且允许空值。）此类不保证地图的顺序; 特别是，它不保证订单会随着时间的推移保持不变。</p></blockquote><p><strong>特点：</strong>线程不安全，运行效率快</p><p><strong>方法：</strong></p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">void</td><td align="left">clear()</td><td align="left">从此映射中删除所有映射。</td></tr><tr><td align="left">boolean</td><td align="left">containsKey(Object key)</td><td align="left">如果此映射包含指定键的映射，则返回 true 。</td></tr><tr><td align="left">boolean</td><td align="left">containsValue(Object value)</td><td align="left">如果此映射将一个或多个键映射到指定值，则返回 true 。</td></tr><tr><td align="left">Set&lt;Map.Entry&lt;K,V&gt;&gt;</td><td align="left">entrySet()</td><td align="left">返回此映射中包含的映射的<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Set.html">Set</a>视图。</td></tr><tr><td align="left">V</td><td align="left">get(Object key)</td><td align="left">返回指定键映射到的值，如果此映射不包含键的映射，则返回 null 。</td></tr><tr><td align="left">boolean</td><td align="left">isEmpty()</td><td align="left">如果此映射不包含键 - 值映射，则返回 true 。</td></tr><tr><td align="left">Set&lt;K&gt;</td><td align="left">keySet()</td><td align="left">返回此映射中包含的键的<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Set.html">Set</a>视图。</td></tr><tr><td align="left">V</td><td align="left">put(K key, V value)</td><td align="left">将指定的值与此映射中的指定键相关联。</td></tr><tr><td align="left">V</td><td align="left">remove(Object key)</td><td align="left">从此映射中删除指定键的映射（如果存在）。</td></tr><tr><td align="left">int</td><td align="left">size()</td><td align="left">返回此映射中键 - 值映射的数量。</td></tr><tr><td align="left">Collection&lt;V&gt;</td><td align="left">values()</td><td align="left">返回此映射中包含的值的<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Collection.html">Collection</a>视图。</td></tr></tbody></table><p><strong>HashMap的使用：</strong></p><p>Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sno;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String sno)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sno = sno;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSno</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sno;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSno</span><span class="hljs-params">(String sno)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sno = sno;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Student)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br><br>        <span class="hljs-keyword">if</span> (!getName().equals(student.getName())) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> getSno().equals(student.getSno());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> getName().hashCode();<br>        result = <span class="hljs-number">31</span> * result + getSno().hashCode();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sno=&#x27;&quot;</span> + sno + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Map;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    HashMap集合的使用</span><br><span class="hljs-comment">    存储结构：哈希表（数组+链表+红黑树）</span><br><span class="hljs-comment">    使用key的hashcode和equals作为重复</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        HashMap&lt;Student,String&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Student,String&gt;();<br><br>        <span class="hljs-comment">//1.添加元素</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林南芊&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-string">&quot;0002&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林思湫&quot;</span>,<span class="hljs-string">&quot;0003&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林落诗&quot;</span>,<span class="hljs-string">&quot;0004&quot;</span>);<br><br>        students.put(s1,<span class="hljs-string">&quot;青岛&quot;</span>);<br>        students.put(s2,<span class="hljs-string">&quot;南京&quot;</span>);<br>        students.put(s3,<span class="hljs-string">&quot;北京&quot;</span>);<br>        students.put(s4,<span class="hljs-string">&quot;深圳&quot;</span>);<br>        students.put(s1,<span class="hljs-string">&quot;青岛&quot;</span>);  <span class="hljs-comment">//重复元素，地址相同，不可重复添加</span><br>        students.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林南芊&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>),<span class="hljs-string">&quot;青岛&quot;</span>);  <span class="hljs-comment">//虽然元素相同，但是元素地址不相同，可以添加</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            要使重新new的重复元素无法添加，则需要了重写Student类中的hashCode方法和equals方法，</span><br><span class="hljs-comment">            使其对添加的元素的name和sno进行判断，和HashSet类似</span><br><span class="hljs-comment">         */</span><br><br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+students.size());<br>        System.out.println(students.toString());<br><br>        <span class="hljs-comment">//2.删除</span><br>        students.remove(s4);<br>        System.out.println(<span class="hljs-string">&quot;删除之后：&quot;</span>+students.size());<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-comment">//遍历1：使用keySet()方法，返回所有key的Set集合</span><br>        <span class="hljs-keyword">for</span>(Student key : students.keySet())&#123;<br>            System.out.println(key.toString()+<span class="hljs-string">&quot;,&quot;</span>+students.get(key));<br>        &#125;<br>        <span class="hljs-comment">//遍历2：使用entrySet()方法，返回所有键值对的Set集合</span><br>        <span class="hljs-keyword">for</span>(HashMap.Entry&lt;Student,String&gt; entry : students.entrySet())&#123;<br>            System.out.println(entry.getKey()+<span class="hljs-string">&quot;,&quot;</span>+entry.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">//4.判断</span><br>        System.out.println(students.isEmpty());<br>        System.out.println(students.containsKey(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林南芊&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>)));<br>        System.out.println(students.containsValue(<span class="hljs-string">&quot;成都&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-3-TreeMap"><a href="#6-3-TreeMap" class="headerlink" title="6.3 TreeMap"></a>6.3 TreeMap</h2><p><strong>TreeMap：</strong></p><ul><li>基于排列顺序实现元素不重复</li><li>实现类SortedMap接口（是Map的子接口），可以对key自动排序</li><li><strong>key的类型必须实现Comparable接口</strong>，指定排序规则；或者利用Comparator接口实现定制比较，否则无法添加</li><li>通过CompareTo方法确定是否为重复元素</li></ul><blockquote><p>public class TreeMap&lt;K,V&gt;<br>extends AbstractMap&lt;K,V&gt;<br>implements NavigableMap&lt;K,V&gt;, Cloneable, Serializable</p><p>基于<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/NavigableMap.html">红黑</a>树的<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/NavigableMap.html">NavigableMap</a>实现。 该地图是根据排序<a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/Comparable.html">natural ordering</a>其密钥，或通过<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Comparator.html">Comparator</a>在地图创建时提供，这取决于所使用的构造方法。</p></blockquote><p><strong>特点：</strong>实现类SortedMap接口（是Map的子接口），可以对key自动排序</p><p><strong>方法：</strong></p><p>看API文档：<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/TreeMap.html">https://www.runoob.com/manual/jdk11api/java.base/java/util/TreeMap.html</a></p><p><strong>TreeMap的使用：</strong></p><p>Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sno;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String sno)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sno = sno;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSno</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sno;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSno</span><span class="hljs-params">(String sno)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sno = sno;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sno=&#x27;&quot;</span> + sno + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-built_in">this</span>.sno)-Integer.parseInt(o.getSno());<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Map;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    TreeMap的使用</span><br><span class="hljs-comment">    存储结构：红黑树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建集合</span><br>        TreeMap&lt;Student,String&gt; treeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;Student,String&gt;();<br><br>        <span class="hljs-comment">//1.添加元素</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林南芊&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林慕椿&quot;</span>,<span class="hljs-string">&quot;0002&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林思湫&quot;</span>,<span class="hljs-string">&quot;0003&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林落诗&quot;</span>,<span class="hljs-string">&quot;0004&quot;</span>);<br><br>        treeMap.put(s1,<span class="hljs-string">&quot;青岛&quot;</span>);<br>        treeMap.put(s2,<span class="hljs-string">&quot;南京&quot;</span>);<br>        treeMap.put(s3,<span class="hljs-string">&quot;北京&quot;</span>);<br>        treeMap.put(s4,<span class="hljs-string">&quot;深圳&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+treeMap.size());<br>        System.out.println(treeMap.toString());<br><br>        <span class="hljs-comment">//2.删除</span><br>        treeMap.remove(s4);<br>        System.out.println(<span class="hljs-string">&quot;删除之后：&quot;</span>+treeMap.size());<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-comment">//遍历1：使用keySet()方法，返回所有key的Set集合</span><br>        <span class="hljs-keyword">for</span>(Student key : treeMap.keySet())&#123;<br>            System.out.println(key.toString()+<span class="hljs-string">&quot;,&quot;</span>+treeMap.get(key));<br>        &#125;<br>        <span class="hljs-comment">//遍历2：使用entrySet()方法，返回所有键值对的Set集合</span><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Student,String&gt; entry : treeMap.entrySet())&#123;<br>            System.out.println(entry.getKey()+<span class="hljs-string">&quot;,&quot;</span>+entry.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">//判断</span><br>        System.out.println(treeMap.containsKey(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林南芊&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>)));<br>        System.out.println(treeMap.containsValue(<span class="hljs-string">&quot;青岛&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h1><h2 id="7-1-Collections工具类"><a href="#7-1-Collections工具类" class="headerlink" title="7.1 Collections工具类"></a>7.1 Collections工具类</h2><p><strong>概念：</strong>集合工具类，定义了除了存取以外的集合常用方法，Collections是对集合进行操作的，类似于Arrays对数组进行操作</p><blockquote><p>public class Collections<br>extends Object</p><p>此类仅包含对集合进行操作或返回集合的静态方法。 它包含对集合进行操作的多态算法，“包装器”，它返回由指定集合支持的新集合，以及其他一些可能性和结束。</p></blockquote><p><strong>方法：</strong></p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">static &lt;T&gt; int</td><td align="left">binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)</td><td align="left">使用二进制搜索算法在指定列表中搜索指定对象。</td></tr><tr><td align="left">static &lt;T&gt; void</td><td align="left">copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</td><td align="left">将一个列表中的所有元素复制到另一个列表中。</td></tr><tr><td align="left">static &lt;T&gt; List&lt;T&gt;</td><td align="left">emptyList()</td><td align="left">返回一个空列表。</td></tr><tr><td align="left">static &lt;K,V&gt;Map&lt;K,V&gt;</td><td align="left">emptyMap()</td><td align="left">返回一个空映射。</td></tr><tr><td align="left">static &lt;T&gt; Set&lt;T&gt;</td><td align="left">emptySet()</td><td align="left">返回一个空集。</td></tr><tr><td align="left">static int</td><td align="left">indexOfSubList(List&lt;?&gt; source, List&lt;?&gt; target)</td><td align="left">返回指定源列表中第一次出现的指定目标列表的起始位置，如果不存在，则返回-1。</td></tr><tr><td align="left">static int</td><td align="left">lastIndexOfSubList(List&lt;?&gt; source, List&lt;?&gt; target)</td><td align="left">返回指定源列表中指定目标列表最后一次出现的起始位置，如果不存在，则返回-1。</td></tr><tr><td align="left">static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt;T</td><td align="left">max(Collection&lt;? extends T&gt; coll)</td><td align="left">根据元素的 <em>自然顺序</em>返回给定集合的最大元素。</td></tr><tr><td align="left">static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt;T</td><td align="left">min(Collection&lt;? extends T&gt; coll)</td><td align="left">根据元素的 <em>自然顺序</em>返回给定集合的最小元素。</td></tr><tr><td align="left">static &lt;T&gt; boolean</td><td align="left">replaceAll(List&lt;T&gt; list, T oldVal, T newVal)</td><td align="left">用列表替换列表中所有出现的指定值。</td></tr><tr><td align="left">static void</td><td align="left">reverse(List&lt;?&gt; list)</td><td align="left">反转指定列表中元素的顺序。</td></tr><tr><td align="left">static void</td><td align="left">shuffle(List&lt;?&gt; list)</td><td align="left">使用默认的随机源随机置换指定的列表。</td></tr><tr><td align="left">static &lt;T extends Comparable&lt;? super T&gt;&gt;void</td><td align="left">sort(List&lt;T&gt; list)</td><td align="left">根据其元素的<a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/Comparable.html">natural ordering</a> ，将指定列表按升序排序。</td></tr><tr><td align="left">static &lt;T&gt; void</td><td align="left">sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</td><td align="left">根据指定比较器引发的顺序对指定列表进行排序。</td></tr><tr><td align="left">static void</td><td align="left">swap(List&lt;?&gt; list, int i, int j)</td><td align="left">交换指定列表中指定位置的元素。</td></tr></tbody></table><p><strong>Collections工具类的使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Map;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Collections工具类的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        list.add(<span class="hljs-number">4</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">5</span>);<br>        list.add(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//sort排序</span><br>        System.out.println(<span class="hljs-string">&quot;排序前：&quot;</span>+list.toString());<br>        Collections.sort(list);<br>        System.out.println(<span class="hljs-string">&quot;排序后：&quot;</span>+list.toString());<br><br>        <span class="hljs-comment">//binarySearch：二分查找</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Collections.binarySearch(list,<span class="hljs-number">2</span>);<br>        System.out.println(i);<br><br>        <span class="hljs-comment">//copy：复制</span><br>        List&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            copy()方法要求两个集合的大小相等，所以要对集合进行赋值</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;list.size(); j++)&#123;<br>            list2.add(<span class="hljs-number">0</span>);<br>        &#125;<br>        Collections.copy(list2,list);<br>        System.out.println(<span class="hljs-string">&quot;复制后：&quot;</span>+list2.toString());<br><br>        <span class="hljs-comment">//reverse：反转</span><br>        Collections.reverse(list);<br>        System.out.println(<span class="hljs-string">&quot;反转之后：&quot;</span>+list);<br><br>        <span class="hljs-comment">//shuffle：打乱</span><br>        Collections.shuffle(list);<br>        System.out.println(<span class="hljs-string">&quot;打乱之后：&quot;</span>+list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-2-集合与数组互转"><a href="#7-2-集合与数组互转" class="headerlink" title="7.2 集合与数组互转"></a>7.2 集合与数组互转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Map;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    集合与数组互转</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arsg)</span>&#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        list.add(<span class="hljs-number">4</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">5</span>);<br>        list.add(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//补充：集合转成数组</span><br>        Integer[] arr = list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">0</span>]);<br>        System.out.println(arr.length);<br>        System.out.println(<span class="hljs-string">&quot;转成数组：&quot;</span>+ Arrays.toString(arr));<br><br>        <span class="hljs-comment">//数组转成集合</span><br>        String[] letters = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>&#125;;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            数组转成集合后，集合是一个受限集合，不能对集合进行添加和删除操作</span><br><span class="hljs-comment">         */</span><br>        List&lt;String&gt; list2 = Arrays.asList(letters);<br>        System.out.println(<span class="hljs-string">&quot;转成集合：&quot;</span>+list2.toString());<br><br>        Integer[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        List&lt;Integer&gt; list3 = Arrays.asList(nums);<br>        System.out.println(<span class="hljs-string">&quot;转成集合：&quot;</span>+list3.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-3-集合总结"><a href="#7-3-集合总结" class="headerlink" title="7.3 集合总结"></a>7.3 集合总结</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220727214323.png" alt="QQ截图20220727214323"></p><p>Java JDK11在线帮助文档：<a href="https://www.runoob.com/manual/jdk11api/">https://www.runoob.com/manual/jdk11api/</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-基础知识</title>
    <link href="/2022/07/04/Java-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/07/04/Java-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h1><h2 id="Java数组-1"><a href="#Java数组-1" class="headerlink" title="Java数组"></a>Java数组</h2><p><strong>数组的创建：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*格式1：</span><br><span class="hljs-comment">元素类型[] 数组名 = new 元素类型[元素个数或数组长度];</span><br><span class="hljs-comment">示例：</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">格式2：</span><br><span class="hljs-comment">元素类型[] 数组名 = new 元素类型[]&#123;元素，元素，……&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;;<br><br></code></pre></td></tr></table></figure><p><strong>数组的遍历：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式一：for循环</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listFor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span>[] arrs = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrs.length; i++) &#123;<br>            System.out.print(arrs[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;   <br><span class="hljs-comment">//方式二：for-each</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listFor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span>[] arrs = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> arr : arrs) &#123;<br>            System.out.print(arr+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><ul><li>菜鸟笔记：<a href="https://www.runoob.com/java/java-array.html">https://www.runoob.com/java/java-array.html</a></li></ul><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p><p><strong>具有以下功能：</strong></p><ul><li>给数组赋值：通过 fill 方法。</li><li>对数组排序：通过 sort 方法,按升序。</li><li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li><li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li></ul><p><strong>实现方法：</strong></p><ul><li><p><strong>public static void fill(int[] a, int val)</strong></p><p>将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>Arrays.fill(arr,<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>public static void sort(Object[] a)</strong></p><p>对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br>Arrays.sort(arr);<br></code></pre></td></tr></table></figure></li><li><p><strong>public static boolean equals(long[] a, long[] a2)</strong></p><p>如果两个指定的 long 型数组彼此相等，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</p></li><li><p><strong>public static int binarySearch(Object[] a, Object key)</strong></p><p>用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</p></li></ul><h1 id="Java字符串"><a href="#Java字符串" class="headerlink" title="Java字符串"></a>Java字符串</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>菜鸟笔记：<a href="https://www.runoob.com/java/java-string.html">https://www.runoob.com/java/java-string.html</a></li></ul><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><ul><li>菜鸟笔记：<a href="https://www.runoob.com/java/java-stringbuffer.html">https://www.runoob.com/java/java-stringbuffer.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hyperledger Fabric石油能源交易系统</title>
    <link href="/2022/07/03/%E5%9F%BA%E4%BA%8EHyperledger-Fabric%E7%9F%B3%E6%B2%B9%E8%83%BD%E6%BA%90%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/07/03/%E5%9F%BA%E4%BA%8EHyperledger-Fabric%E7%9F%B3%E6%B2%B9%E8%83%BD%E6%BA%90%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Hyperledger-Fabric石油能源交易系统"><a href="#基于Hyperledger-Fabric石油能源交易系统" class="headerlink" title="基于Hyperledger Fabric石油能源交易系统"></a>基于Hyperledger Fabric石油能源交易系统</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>​        项目使用 Hyperledger Fabric 构建底层区块链网络, go语言编写智能合约，应用层使用 gin+fabric-sdk-go ，前端使用 vue+element-ui框架，系统的设计主要是基于区块链的去中心化，数据共享和不可篡改的特点。项目的核心是分布式账本，记录区块上发生的所有石油交易。区块链账本是去中心化的，它会被复制到许多区块参与者中，每个参与者都在协作维护账本；数据共享是当某个客户发起交易后，所有位于区块链上的客户都可以进行竞价交易且交易信息共享；不可篡改指发起一笔交易后不能单方面撤销交易,如果需要撤销之前的交易必须再花几笔交易告诉全区块我需要撤销之前的交易。系统中有管理员和五个客户，管理员为客户创建石油，客户可以查看和交易石油。客户交易信息以附加的方式记录到区块链上，使用加密技术保证一旦将交易添加到账本就无法修改。</p><p>​        客户发起销售，所有的客户都可以查看销售列表，在有效期期间可以随时取消交易，有效期到期后自动关闭交易，购买者购买后进行扣款操作，并等待发起销售的客户确认，交易完成后，更新石油拥有者。客户发起捐赠，指定受赠人，受赠人确认接收受赠前，双方可取消捐赠/受赠。</p><h2 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h2><h4 id="区块链部分"><a href="#区块链部分" class="headerlink" title="区块链部分"></a>区块链部分</h4><ol><li><p>crypto-config.yaml文件</p><p>crypto-config.yaml定义了生成证书的数量，还有用户的数量，使用cryptogen工具读取改文件生成相应的公私钥和证书，生成的证书在crypto-config文件夹中</p></li><li><p>configtx.yaml文件</p><p>configtx.yaml中定义了组织与Fabric共识、区块大小，超时时间等参数，用于生成创世区块</p></li><li><p>docker-compose文件</p><p> 这个是docker-compose启动时读取的文件，将一次性启动多个容器，这些容器是peer节点和orderer节点，文件中写明了具体的配置信息，比如挂载一些本地文件，使用的镜像文件等，比如使用1.4.12版本的fabric镜像</p></li><li><p>start.sh 文件</p><p>这个是启动区块链网络的脚本</p></li><li><p>hyperledger-fabric-linux-amd64-1.4.12 文件夹</p><p>文件夹内有生成证书、创世区块的工具</p></li><li><p>explorer文件夹</p><p>这个是区块链浏览器的文件夹，文件夹中的start.sh文件，每次重启区块链网络时私钥会变，因此该文件中有替换密钥的操作。connection-profile中的network_temp.json是配置文件，定义了读取区块链网络的信息与登陆区块链浏览器的账号密码。</p></li></ol><h4 id="智能合约部分"><a href="#智能合约部分" class="headerlink" title="智能合约部分"></a>智能合约部分</h4><ol><li><p>go.mod 文件</p><p>这个文件是定义了一个模块，一般就是本目录，在本项目中是chaincode，然后有go的版本和需要的依赖</p></li><li><p>go.sum文件</p><p>这个是固定项目的依赖文件版本</p></li><li><p>chaincode.go文件</p><p>这个里边主要关注两个函数，一个是Init函数，就是在链码进行实例化时会进行的操作，在这个项目中是向区块链中写入预先设定的账户；下边是Invoke函数，除了Init时对区块链的操作都是Invoke，可以看到当传入参数时，会读取api里相应的函数。</p></li><li><p>api中的.go文件</p><p>这里就是智能合约中函数的位置，当接收到sdk的请求时，调用这里的函数，实现相应的操作。比较重要的有QueryAccountList(),CreateRealEstate(),QueryRealEstateList()，分别完成了对账户的查询、创建石油与查询石油列表。</p></li><li><p>model文件夹中的model.go文件</p><p>该文件定义了一些结构体，包含了字段的属性，例如定义了一个石油的所有属性</p></li></ol><h4 id="app部分"><a href="#app部分" class="headerlink" title="app部分"></a>app部分</h4><ol><li><p>build.sh</p><p>这个是构建app的容器，将app放在容器中运行，具体做的事情在Dockfile文件里</p></li><li><p>start.sh、docker-compose.yml就是启动app容器</p></li><li><p>server文件夹就是后端，使用的gin框架</p><p>当后端接收到web的请求后，就会查看routers的路由信息，找到对应的api进行操作。在api中，接收到web发来的请求后进行处理，然后调用智能合约实现对区块链网络的交互</p></li><li><p>blockchain/sdk.go config.yaml</p><p>这里定义了 sdk的配置信息</p></li><li><p>web文件夹是前端的部分 使用的vue + element ui</p></li><li><p>api文件夹中的js文件定义了函数相对应的url、method、携带的数据，就是与后端进行交互</p></li><li><p>views文件夹是前端</p><p>当用户在页面填写数据后，使用vue文件里的方法，调用api里的函数，与后端进行交互</p></li></ol><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h4 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h4><p>VMware虚拟机上安装Ubuntu环境，Ubuntu的版本为20.04，一开始安装的Ubuntu18.04在配置环境遇到了很多不明原因的报错。</p><h4 id="2-安装docker和docker-compose"><a href="#2-安装docker和docker-compose" class="headerlink" title="2.安装docker和docker-compose"></a>2.安装docker和docker-compose</h4><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure><p>将用户添加到docker组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><p>更新用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">newgrp docker<br></code></pre></td></tr></table></figure><p>安装docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo curl -L <span class="hljs-string">&quot;https://mirror.ghproxy.com/https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>增加运行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>测试是否安装成功，有输出内容即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose <br></code></pre></td></tr></table></figure><p>给docker换源 编辑 /etc/docker/daemon.json 写入以下内容保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><p>启动区块链网络以及部署智能合约：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/admin001/桌面/fabdeal-master/network<br>sudo ./start.sh<br></code></pre></td></tr></table></figure><p>编译镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/admin001/桌面/fabdeal-master/application<br>sudo ./build.sh<br></code></pre></td></tr></table></figure><p>启动应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./start.sh<br></code></pre></td></tr></table></figure><p>虚拟机浏览器访问：<a href="http://localhost:8000/web">http://localhost:8000/web</a><br>主机浏览器访问：<a href="http://192.168.80.129:8000/web">http://192.168.80.129:8000/web</a></p><p>启动区块链浏览器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/admin001/桌面/fabdeal-master/network/explorer<br>sudo ./start.sh<br></code></pre></td></tr></table></figure><p>虚拟机浏览器访问：<a href="http://localhost:8080/">http://localhost:8080</a>    用户名:admin，密码:123456</p><p>主机浏览器访问：<a href="http://192.168.80.129:8080/">http://192.168.80.129:8080</a></p><p>清理环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/admin001/桌面/fabdeal-master/network<br>sudo ./stop.sh<br><span class="hljs-built_in">cd</span> /home/admin001/桌面/fabdeal-master/application<br>sudo ./stop.sh<br></code></pre></td></tr></table></figure><p>项目演示视频：</p><ul><li><a href="https://www.bilibili.com/video/BV1N34y1p7EW?spm_id_from=333.999.list.card_archive.click&amp;vd_source=7ad06c95735c5cae130daf28b94f5d0f">https://www.bilibili.com/video/BV1N34y1p7EW?spm_id_from=333.999.list.card_archive.click&amp;vd_source=7ad06c95735c5cae130daf28b94f5d0f</a></li></ul><p>Note：</p><ul><li>本项目改自Github项目：基于区块链（Hyperledger Fabric）的房地产交易系统</li><li>原项目Github地址：<a href="https://github.com/togettoyou/fabric-realty">https://github.com/togettoyou/fabric-realty</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows10电脑重装系统</title>
    <link href="/2022/06/27/windows10%E7%94%B5%E8%84%91%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/06/27/windows10%E7%94%B5%E8%84%91%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="windows10电脑重装系统"><a href="#windows10电脑重装系统" class="headerlink" title="windows10电脑重装系统"></a>windows10电脑重装系统</h2><p>安装系统主要有两种方法：</p><ul><li>微软官方IOS镜像文件直接写入</li><li>使用PE便携式操作系统辅助安装</li></ul><p><strong>装系统的本质就是运行提前在U盘内放好的windows安装包</strong></p><h2 id="win10官方IOS镜像直装"><a href="#win10官方IOS镜像直装" class="headerlink" title="win10官方IOS镜像直装"></a>win10官方IOS镜像直装</h2><ul><li>好处：纯净、方便、简单</li><li>缺点：功能简单僵硬</li></ul><p>相比之下，我选择微PE辅助安装！😂</p><h2 id="微PE辅助安装"><a href="#微PE辅助安装" class="headerlink" title="微PE辅助安装"></a>微PE辅助安装</h2><h3 id="1-下载微PE"><a href="#1-下载微PE" class="headerlink" title="1.下载微PE"></a>1.下载微PE</h3><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627184541.png" alt="QQ截图20220627184541"></p><h3 id="2-把PE安装进U盘内"><a href="#2-把PE安装进U盘内" class="headerlink" title="2.把PE安装进U盘内"></a>2.把PE安装进U盘内</h3><p>打开下载好的微PE安装包</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627184959.png" alt="QQ截图20220627184959"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627185806.png" alt="QQ截图20220627185806"></p><p>等待3-10分钟</p><h3 id="3-完成安装，PE成功安装进U盘内"><a href="#3-完成安装，PE成功安装进U盘内" class="headerlink" title="3.完成安装，PE成功安装进U盘内"></a>3.完成安装，PE成功安装进U盘内</h3><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627190210.png" alt="QQ截图20220627190210"></p><ul><li>空白分区：普通U盘</li><li>EFI分区：PE本身所在的分区，不要更改</li></ul><h3 id="4-下载win10安装包"><a href="#4-下载win10安装包" class="headerlink" title="4.下载win10安装包"></a>4.下载win10安装包</h3><ul><li>下载网站：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627190955.png" alt="QQ截图20220627190955"></p><p>复制连接迅雷下载</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627191516.png" alt="QQ截图20220627191516"></p><p>下载完成之后比对哈希值，确保镜像文件完整性</p><h3 id="5-启动盘制作完成！"><a href="#5-启动盘制作完成！" class="headerlink" title="5.启动盘制作完成！"></a>5.启动盘制作完成！</h3><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627211853.png" alt="QQ截图20220627211853"></p><h3 id="6-进入主板BIOS"><a href="#6-进入主板BIOS" class="headerlink" title="6.进入主板BIOS"></a>6.进入主板BIOS</h3><p><strong>将启动盘插入待重装系统的电脑（重装系统从这一步开始，前面操作是在制作启动盘）</strong></p><p>不同品牌以及台式和笔记本电脑进入BIOS页面的方式不同，具体可百度或者查阅笔记本官网</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627200128.png" alt="QQ截图20220627200128"></p><h3 id="7-修改启动项"><a href="#7-修改启动项" class="headerlink" title="7.修改启动项"></a>7.修改启动项</h3><ol><li>将UEFI开头的U盘设为第一启动项，保存并重启</li><li>或者直接进入以UEFI开头的U盘启动项</li></ol><p><img src="https://img.yiqiangshiyia.cn/blog/20211115142040.png" alt="20211115142040"></p><p>等待启动进入winPE桌面</p><h3 id="8-进入winPE桌面"><a href="#8-进入winPE桌面" class="headerlink" title="8.进入winPE桌面"></a>8.进入winPE桌面</h3><p>由于第一启动项更改成了U盘，而U盘内有PE便携式操作系统，所以会自动进入winPE的桌面</p><p><img src="https://img.yiqiangshiyia.cn/blog/20211115142115.png" alt="20211115142115"></p><h3 id="9-磁盘分区"><a href="#9-磁盘分区" class="headerlink" title="9.磁盘分区"></a>9.磁盘分区</h3><p>不用微软自带的分区工具（麻烦且不方便使用），改用更高级的程序。打开win PE桌面的分区工具（一般叫分区精灵），分区精灵是一个磁盘管理程序，它相当于win10的安装程序自带的磁盘管理，不仅有图形化界面且功能多</p><p><strong>删除/保留磁盘</strong></p><p>如果磁盘存在分区，删除所有磁盘分区并保存更改；新磁盘则默认空闲状态</p><p><strong>转换分区表类型</strong></p><ul><li>UEFI启动对应分区类型：GUID（也就是GPT）</li><li>Legacy启动对应分区类型：MBR</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627203514.png" alt="QQ截图20220627203514"></p><p><strong>快速分区</strong></p><p>磁盘的分区数目和大小以及磁盘名称都是可以自定义的</p><p>系统盘建议大小：50-100G</p><p><strong>需要注意的是：勾选对齐分区到此扇区的整数倍：2048扇区</strong>（固态硬盘的4K对齐，不勾选会损坏硬盘的性能以及降低固态硬盘的使用寿命）</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627203654.png" alt="QQ截图20220627203654"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627204112.png" alt="QQ截图20220627204112"></p><p>确定之后，稍等10s，等待分区精灵运作</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627204559.png" alt="QQ截图20220627204559"></p><p>完成分区，关闭分区精灵</p><h3 id="10-重装系统"><a href="#10-重装系统" class="headerlink" title="10.重装系统"></a>10.重装系统</h3><p>接下来打开我的电脑，找到之前放在U盘的win10安装包</p><p><img src="https://img.yiqiangshiyia.cn/blog/20211115142337.png" alt="20211115142337"></p><p>然后右键装载或者双击之后，打开setup.exe安装程序</p><p><img src="https://img.yiqiangshiyia.cn/blog/20211115142412.png" alt="20211115142412"></p><p><img src="https://img.yiqiangshiyia.cn/blog/20211115142432.png" alt="20211115142432"></p><p>后面就一直是傻瓜式安装！</p><p>到这一步之后需要注意！</p><p><img src="https://img.yiqiangshiyia.cn/blog/20211115142721.png" alt="20211115142721"></p><p>由于已经使用过分区精灵对磁盘进行了分区，所有这里就不用再使用微软自带的分区工具进行分区了</p><p>因此直接选择将系统安装到之前分好区的80G的C盘上就好了</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627205414.png" alt="QQ截图20220627205414"></p><p>点击下一步，等待win10安装程序自动走完流程</p><p><img src="https://img.yiqiangshiyia.cn/blog/20211115142856.png" alt="20211115142856"></p><p>安装完成后，10s后电脑会自动重启！拔掉U盘</p><p>之后不要动电脑，期间电脑自动重启2-3次，耐心等待就哦可了</p><h3 id="11-重装系统完成"><a href="#11-重装系统完成" class="headerlink" title="11.重装系统完成"></a>11.重装系统完成</h3><p>之后进入win10初始化主界面</p><p>完成一系列设置之后，然后win10会花费几分钟的时间完成最后的初始化操作，耐心等待几分钟，系统安装成功，大功告成！！！</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627210814.png" alt="QQ截图20220627210814"></p><h3 id="12-后序"><a href="#12-后序" class="headerlink" title="12.后序"></a>12.后序</h3><p>系统重装后可能会出现缺少驱动程序的情况，比如连接wifi的驱动，可以利用U盘安装驱动精灵软件安装驱动</p><p><strong>驱动管理可以检测电脑缺少的驱动</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220627211128.png" alt="QQ截图20220627211128"></p>]]></content>
    
    
    <categories>
      
      <category>解忧杂货</category>
      
    </categories>
    
    
    <tags>
      
      <tag>win10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>课设：高校学籍管理系统</title>
    <link href="/2022/06/14/%E8%AF%BE%E8%AE%BE%EF%BC%9A%E9%AB%98%E6%A0%A1%E5%AD%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/06/14/%E8%AF%BE%E8%AE%BE%EF%BC%9A%E9%AB%98%E6%A0%A1%E5%AD%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="高校学籍管理系统"><a href="#高校学籍管理系统" class="headerlink" title="高校学籍管理系统"></a>高校学籍管理系统</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p><strong>高校学籍管理系统</strong></p><p>功能要求：</p><ul><li>实现学生信息、班级、院系、专业等的管理；</li><li>实现课程、学生成绩信息管理；实现学生的奖惩信息管理；</li><li>创建规则用于限制性别项只能输入“男”或“女”；</li><li>创建视图查询各个学生的学号、姓名、班级、专业、院系；</li><li>创建存储过程查询指定学生的成绩单；</li><li>创建触发器当增加、删除学生和修改学生班级信息时自动修改相应班级学生人数；</li><li>建立数据库相关表之间的参照完整性约束。</li></ul><h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p>本数据库课程设计选题为高校学籍管理系统，课程设计的系统架构为C/S架构，数据库采用的是MySQL，选用的编程语言为Java，连接数据库的方式为JDBC。课程设计报告主要包括以下内容：需求分析、概念结构设计、逻辑结构设计、数据库物理设计与实施、数据库操作要求及实现、概念结构设计、逻辑结构设计、物理设计、数据库实施、系统设计相关代码、感想及心得体会。</p><h3 id="部分展示"><a href="#部分展示" class="headerlink" title="部分展示"></a>部分展示</h3><p><img src="https://img.yiqiangshiyia.cn/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-06-14%20114814.png" alt="屏幕截图 2022-06-14 114814"></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E5%88%9D%E5%A7%8B%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.jpg" alt="初始登录界面"></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E8%BF%9B%E5%85%A5%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.jpg" alt="进入学生管理系统"></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E6%9F%A5%E8%AF%A2%E5%AD%A6%E7%94%9F%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.jpg" alt="查询学生基本信息"></p><p><img src="https://img.yiqiangshiyia.cn/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-06-14%20115014.png" alt="屏幕截图 2022-06-14 115014"></p><h3 id="数据库代码"><a href="#数据库代码" class="headerlink" title="数据库代码"></a>数据库代码</h3><h4 id="基本表创建"><a href="#基本表创建" class="headerlink" title="基本表创建"></a>基本表创建</h4><p>1.创建学生表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE student(<br>snoVARCHAR(20) PRIMARY KEY,<br>sname VARCHAR(20) NOT NULL,<br>sex VARCHAR(6) NOT NULL,<br>birth DATE,<br>telVARCHAR(20),<br>qq VARCHAR(20),<br>sdeptVARCHAR(20)NOT NULL,<br>classVARCHAR(20)NOT NULL,<br>addressVARCHAR(50)<br>);<br></code></pre></td></tr></table></figure><p>2.创建教师表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE teacher(<br>tno VARCHAR(20) PRIMARY KEY,<br>tname VARCHAR(20) NOT NULL,<br>classVARCHAR(20)NOT NULL,<br>cnoVARCHAR(20)NOT NULL,<br>Foreign KEY (cno) REFERENCES Course(cno)<br>);<br></code></pre></td></tr></table></figure><p>3.创建学生成绩表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE sc(<br>snoVARCHAR(20),<br>cnoVARCHAR(20),<br>gradeFLOAT,<br>point FLOAT,<br>PRIMARY KEY(sno,cno),<br>Foreign KEY (sno) REFERENCES Student(sno),<br>Foreign KEY (cno) REFERENCES Course(cno)<br>);<br></code></pre></td></tr></table></figure><p>4.创建学生奖惩表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE rp(<br>  rpno VARCHAR(20),<br>styleVARCHAR(2),<br>snoVARCHAR(20),<br>snameVARCHAR(20),<br>repunish VARCHAR(50),<br>PRIMARY KEY(sno,rpno),<br>Foreign Key(sno) REFERENCES Student(sno)<br>);<br></code></pre></td></tr></table></figure><p>5.创建课程表 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE course( <br>   cno VARCHAR(20) PRIMARY KEY,<br>   cname VARCHAR(20) NOT NULL,<br>   cpnoVARCHAR(20) ,<br>   creditFLOAT NOT NULL,<br>   tnameVARCHAR(20) NOT NULL<br>);<br></code></pre></td></tr></table></figure><p>6.创建部门、专业和班级表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE dmc(<br>department VARCHAR(20) NOT NULL,<br>sdeptVARCHAR(20)NOT NULL,<br>classVARCHAR(20) NOT NULL,<br>renshu VARCHAR(20) NOT NULL<br>);<br></code></pre></td></tr></table></figure><p>7.创建用户信息表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user( <br>  unameVARCHAR(20) NOT NULL,<br>  upassVARCHAR(30) NOT NULL,<br>  bs INT NOT NULL<br>);<br></code></pre></td></tr></table></figure><h4 id="CHECK约束"><a href="#CHECK约束" class="headerlink" title="CHECK约束"></a>CHECK约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student<br>ADD CONSTRAINT C1 CHECK(sex=&#x27;男&#x27; OR sex=&#x27;女&#x27;);<br></code></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>为学生表的学号创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE INDEX index_id ON student(sno)<br></code></pre></td></tr></table></figure><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>1.创建学生-班级视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW Stu_DMC<br>AS<br>SELECT sno,sname,sex,dmc.class,dmc.sdept,department<br>FROM student,dmc<br>WHERE student.class=dmc.class<br></code></pre></td></tr></table></figure><p>2.创建学生-课程-成绩视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW Stu_Cou_SC<br>AS<br>SELECT sc.sno,student.sname,sc.cno,cname,credit,grade,point,tname<br>FROM student,sc,course<br>WHERE student.sno=sc.sno AND sc.cno=course.cno<br></code></pre></td></tr></table></figure><p>3.创建教师-课程视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW Tea_Cou<br>AS<br>SELECT tno,teacher.tname,class,teacher.cno,cname<br>FROM teacher,course<br>WHERE teacher.cno=course.cno<br></code></pre></td></tr></table></figure><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p>1.创建触发器当增加学生班级信息时自动修改相应班级学生人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TRIGGER tri_renshu_insert<br>AFTER INSERT ON student<br>FOR EACH ROW<br>BEGIN<br>UPDATE dmc<br>SET  renshu=renshu+1<br>WHERE dmc.class=new.class;<br>END;<br></code></pre></td></tr></table></figure><p>2.创建触发器当删除学生班级信息时自动修改相应班级学生人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TRIGGER tri_renshu_delete<br>AFTER DELETE ON student<br>FOR EACH ROW<br>BEGIN<br>UPDATE dmc<br>SET  renshu=renshu-1<br>WHERE dmc.class=old.class;<br>END;<br></code></pre></td></tr></table></figure><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p>创建存储过程查询指定学生的成绩单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE PROCEDURE show_grade(sno VARCHAR(20))<br>BEGIN<br>SELECT grade<br>FROM sc<br>WHERE sc.sno=sno;<br>END<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课设</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM-MyBatis</title>
    <link href="/2022/06/06/SSM-MyBatis/"/>
    <url>/2022/06/06/SSM-MyBatis/</url>
    
    <content type="html"><![CDATA[<p><strong>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org/mybatis-3/zh/index.html</a></strong></p><h1 id="1-Mybatis简介"><a href="#1-Mybatis简介" class="headerlink" title="1. Mybatis简介"></a>1. Mybatis简介</h1><p>环境说明：</p><ul><li><p>jdk 8 +</p></li><li><p>MySQL 5.7.</p></li><li><p>maven-3.6.</p></li><li><p>IDEA</p></li></ul><p>学习前需要掌握：</p><ul><li><p>JDBC</p></li><li><p>MySQL</p></li><li><p>Java 基础</p></li><li><p>Maven</p></li><li><p>Junit</p></li></ul><h2 id="1-1-什么是MyBatis"><a href="#1-1-什么是MyBatis" class="headerlink" title="1.1 什么是MyBatis"></a>1.1 什么是MyBatis</h2><p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis logo"></p><ul><li><p>MyBatis 是一款优秀的<strong>持久层框架</strong></p></li><li><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</p></li><li><p>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</p></li><li><p>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</p></li><li><p>2013 年 11 月迁移到 <strong>Github</strong>.</p></li><li><p>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org/mybatis-3/zh/index.html</a></p></li><li><p>GitHub : <a href="https://github.com/mybatis/mybatis-">https://github.com/mybatis/mybatis-</a></p></li></ul><h2 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a>1.2 持久化</h2><ul><li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p><ul><li><p>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</p></li><li><p>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</p></li><li><p>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</p></li></ul></li><li><h5 id="为什么需要持久化服务呢？那是由于内存本身的缺陷引起的"><a href="#为什么需要持久化服务呢？那是由于内存本身的缺陷引起的" class="headerlink" title="为什么需要持久化服务呢？那是由于内存本身的缺陷引起的"></a>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</h5><ul><li><p>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</p></li><li><p>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</p></li></ul></li></ul><h2 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h2><ul><li><p>什么是持久层？</p><ul><li><p>完成持久化工作的代码块. —-&gt; dao层 【DAO (Data Access Object) 数据访问对象】</p></li><li><p>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</p></li><li><p>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</p></li><li><p>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</p></li></ul></li></ul><h2 id="1-4-为什么需要Mybatis"><a href="#1-4-为什么需要Mybatis" class="headerlink" title="1.4 为什么需要Mybatis"></a>1.4 为什么需要Mybatis</h2><ul><li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据.</p></li><li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率.</p></li><li><p>MyBatis 是一个半自动化的 <strong>ORM框架 (Object Relationship Mapping) –&gt;对象关系映射</strong></p></li><li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！ 技术没有高低之分，只有使用这个技术的人有高低之别</p></li><li><p>MyBatis的优点</p><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供xml标签，支持编写动态sql。</li><li>…….</li></ul></li></ul><h1 id="2-第一个MyBatis程序"><a href="#2-第一个MyBatis程序" class="headerlink" title="2. 第一个MyBatis程序"></a>2. 第一个MyBatis程序</h1><p>思路流程：搭建环境–&gt;导入Mybatis—&gt;编写代码—&gt;测试</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220609172441.png" alt="QQ截图20220609172441"></p><p>测试结果</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220609172503.png" alt="QQ截图20220609172503"></p><h2 id="2-1-代码演示"><a href="#2-1-代码演示" class="headerlink" title="2.1 代码演示"></a>2.1 代码演示</h2><ol><li><p><strong>搭建实验数据库</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220609172323.png" alt="QQ截图20220609172323"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE `mybatis`;<br><br>CREATE TABLE `user` (<br>`id` int(20) PRIMARY KEY,<br>`name` varchar(20) NOT NULL,<br>`pwd` varchar(20) NOT NULL<br>);<br></code></pre></td></tr></table></figure></li><li><p><strong>导入MyBatis相关 jar 包（pom.xml）</strong></p><ul><li>GitHub上找</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--子模块--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--junit--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--在build中配置resources,来防止我们资源导出失败的问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>编写MyBatis核心配置文件（mybatis-config.xml）</strong></p><ul><li>查看帮助文档</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--事物管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;ssm/study/dao/userMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>编写MyBatis工具类（MybatisUtils.java）</strong></p><ul><li>查看帮助文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> ssm.study.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取SqlSessionFactory对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//获取SqlSession连接</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        既然有了SqlSessionFactory，我们就可以从中获取SqlSession实例了</span><br><span class="hljs-comment">        SqlSession完全包含了面向数据库执行sql所需要的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>创建实体类（User.java）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.pojo;<br><br><span class="hljs-comment">//实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> String pwd; <span class="hljs-comment">//密码</span><br><br>    <span class="hljs-comment">//构造,有参,无参</span><br>    <span class="hljs-comment">//set/get</span><br>    <span class="hljs-comment">//toString()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPwd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPwd</span><span class="hljs-params">(String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>编写Mapper接口类（UserMapper.java）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.dao;<br><br><span class="hljs-keyword">import</span> ssm.study.pojo.User;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>编写Mapper.xml配置文件（UserMapper.xml）</strong></p><ul><li>namespace 十分重要，不能写错！</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace绑定一个对应的Mapper/Dao接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;ssm.study.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--sql语句--&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>编写测试类（UserMapperTest.java）</strong></p><ul><li>Junit 包测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.dao;<br><br><span class="hljs-keyword">import</span> ssm.study.pojo.User;<br><span class="hljs-keyword">import</span> ssm.study.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//第一步 ：获得sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><br>        <span class="hljs-comment">//方式一：getMapper</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>        List&lt;User&gt; userList = mapper.selectUser();<br><br>        <span class="hljs-keyword">for</span> (User user: userList)&#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭SqlSession</span><br>        session.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>运行测试</strong></p></li></ol><h2 id="2-2-问题说明"><a href="#2-2-问题说明" class="headerlink" title="2.2 问题说明"></a>2.2 问题说明</h2><p><strong>可能出现问题说明：Maven静态资源过滤问题</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>遇到的问题</strong></p><ul><li>都是一些小问题，百度都可以解决</li></ul><h1 id="3-CRUD操作"><a href="#3-CRUD操作" class="headerlink" title="3. CRUD操作"></a>3. CRUD操作</h1><h2 id="3-1-namespace"><a href="#3-1-namespace" class="headerlink" title="3.1 namespace"></a>3.1 namespace</h2><p><strong>Note：</strong></p><p>配置文件UserMapper.xml中namespace中包名要和Dao/Mapper接口的包名一致！</p><h2 id="3-2-select"><a href="#3-2-select" class="headerlink" title="3.2 select"></a>3.2 select</h2><ul><li><p>select标签是mybatis中最常用的标签之一</p></li><li><p>select语句有很多属性可以详细配置每一条SQL语句</p><ul><li><strong>id</strong>：对应namespace中的方法名<ul><li><p>命名空间中唯一的标识符</p></li><li><p>接口中的方法名与映射文件中的SQL语句ID 一一对应</p></li></ul></li><li><strong>parameterType</strong>：传入SQL语句的参数类型</li><li><strong>resultType</strong>：SQL语句执行的返回值类型</li></ul></li></ul><p><strong>例1：根据id查询用户</strong></p><ol><li><p>在UserMapper中添加对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">//查询全部用户</span><br>    List&lt;User&gt; <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//根据id查询用户</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中添加select语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--namespace绑定一个对应的Mapper/Dao接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;ssm.study.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span>&gt;</span><br>        select * from user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试类中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUserById(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;查询到的用户为：&quot;</span>+user);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输出结果</p><blockquote><p>查询到的用户为：User{id=1, name=’admin’, pwd=’123456’}</p></blockquote></li></ol><p><strong>例2：根据密码和名字查询用户</strong></p><p><strong>方法1：直接在方法中传递参数</strong></p><ol><li><p>在接口方法的参数前加 @Param属性</p></li><li><p>Sql语句编写的时候，直接取@Param中设置的值即可，不需要单独设置参数类型</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过密码和名字查询用户</span><br>User <span class="hljs-title function_">selectUserByNP</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username,<span class="hljs-meta">@Param(&quot;pwd&quot;)</span> String pwd)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&lt;select id=&quot;selectUserByNP&quot; resultType=&quot;com.kuang.pojo.User&quot;&gt;</span><br><span class="hljs-comment">select * from user where name = #&#123;username&#125; and pwd = #&#123;pwd&#125;</span><br><span class="hljs-comment">&lt;/select&gt;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>方法2：使用万能的Map</strong></p><p><strong>例3：模糊查询</strong></p><p>模糊查询like语句：</p><p>方法1：在Java代码中添加sql通配符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">string wildcardname = “%smi%”;<br>list<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> names = mapper.selectlike(wildcardname);<br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectlike&quot;</span>&gt;</span><br>select * from foo where bar like #&#123;value&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方法2：在sql语句中拼接通配符，会引起sql注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">string wildcardname = “smi”;<br>list<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> names = mapper.selectlike(wildcardname);<br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectlike&quot;</span>&gt;</span><br>select * from foo where bar like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-3-insert"><a href="#3-3-insert" class="headerlink" title="3.3 insert"></a>3.3 insert</h2><p>我们一般使用insert标签进行插入操作，它的配置和select标签差不多！</p><p><strong>例：给数据库增加一个用户</strong></p><ol><li><p>在UserMapper接口中添加对应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//insert一个用户</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure></li><li><p>在UserMapper.xml中添加insert语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span>&gt;</span><br>    insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> mapper.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;user3&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    <span class="hljs-keyword">if</span>(res&gt;<span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>    &#125;<br>    sqlSession.commit(); <span class="hljs-comment">//提交事务,重点!不写的话不会提交到数据库</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>Note：增、删、改操作需要提交事务！</strong></p><h2 id="3-4-update"><a href="#3-4-update" class="headerlink" title="3.4 update"></a>3.4 update</h2><p>我们一般使用update标签进行更新操作，它的配置和select标签差不多！</p><p><strong>需求：修改用户的信息</strong></p><ol><li><p>编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改用户</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的配置文件SQL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span>&gt;</span><br>    update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    mapper.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;user2pro&quot;</span>,<span class="hljs-string">&quot;12345678&quot;</span>));<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-5-delete"><a href="#3-5-delete" class="headerlink" title="3.5 delete"></a>3.5 delete</h2><p>我们一般使用delete标签进行删除操作，它的配置和select标签差不多！</p><p><strong>需求：根据id删除一个用户</strong></p><ol><li><p>编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id删除用户</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的配置文件SQL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>    delete from user where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    mapper.deleteUser(<span class="hljs-number">4</span>);<br>    sqlSession.commit();  <span class="hljs-comment">////提交事务,重点!不写的话不会提交到数据库</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-6-万能的map"><a href="#3-6-万能的map" class="headerlink" title="3.6 万能的map"></a>3.6 万能的map</h2><p><strong>万能的map：insert插入用户</strong></p><p>假设我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p><ol><li><p>在接口方法中，参数直接传递Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//万能的map</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addUser2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写sql语句的时候，需要传递参数类型，参数类型为map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象中的属性可以直接取出来，传递map中的key--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>insert into user(id,pwd) values(#&#123;userid&#125;,#&#123;password&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在使用方法的时候，Map的 key 为 sql中取的值即可，没有顺序要求！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> selSession.getMapper(UserMapper.class);<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">5</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    mapper.addUser(map);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>万能的map：select查询用户</strong></p><ol><li><p>在接口方法中，参数直接传递Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//万能的map</span><br>User <span class="hljs-title function_">getUserById2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写sql语句的时候，需要传递参数类型，参数类型为map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象中的属性可以直接取出来，传递map中的key--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selsect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span>&gt;</span><br>select* from user where id=#&#123;idpro&#125; and name=#&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">selsect</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在使用方法的时候，Map的key为sql中取的值即可，没有顺序要求！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserById2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;idpro&quot;</span>,<span class="hljs-number">1</span>);<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>    mapper.getUserById(map);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>总结：</strong></p><ul><li><p>parameterType=”map”：Map传递参数时，直接在sql中取出key即可！</p></li><li><p>parameterType=”Object”：对象传递参数时，直接在对象中取sql的属性即可！</p></li><li><p>只有一个基本类型参数的情况下，可以直接在sql中取到</p></li></ul><p>如果参数过多，我们可以考虑直接使用Map或者注解实现，如果参数比较少，直接传递参数即可</p><h2 id="3-7-Note"><a href="#3-7-Note" class="headerlink" title="3.7 Note"></a>3.7 Note</h2><p><strong>小结：</strong></p><ul><li><p>所有的增删改操作都需要提交事务！</p></li><li><p>接口所有的普通参数，尽量都写上@Param参数，尤其是多个参数时，必须写上！</p></li><li><p>有时候根据业务的需求，可以考虑使用map传递参数！</p></li><li><p>为了规范操作，在SQL的配置文件中，我们尽量将Parameter参数和resultType都写上！</p></li></ul><h1 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4. 配置解析"></a>4. 配置解析</h1><h2 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1 核心配置文件"></a>4.1 核心配置文件</h2><ul><li><p>mybatis-config.xml 系统核心配置文件</p></li><li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p></li><li><p>能配置的内容如下：</p></li></ul><blockquote><ul><li><p>configuration（配置）</p><ul><li><p>properties（属性）</p></li><li><p>settings（设置）</p></li><li><p>typeAliases（类型别名）</p></li><li><p>typeHandlers（类型处理器）</p></li><li><p>objectFactory（对象工厂）</p></li><li><p>plugins（插件）</p></li><li><p>environments（环境配置）</p><ul><li><p>environment（环境变量）</p><ul><li><p>transactionManager（事务管理器）</p></li><li><p>dataSource（数据源）</p></li></ul></li></ul></li><li><p>databaseIdProvider（数据库厂商标识）</p></li><li><p>mappers（映射器）</p></li></ul></li></ul><!-- 注意元素节点的顺序！顺序不对会报错 --></blockquote><p><strong>例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;dp.properties&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--类型别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--事物管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;ssm/study/dao/userMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-environments元素"><a href="#4-2-environments元素" class="headerlink" title="4.2 environments元素"></a>4.2 environments元素</h2><blockquote><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p></blockquote><ul><li><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（<strong>通过default指定</strong>）</p></li><li><p>具体的一套环境，通过设置id进行区别，id保证唯一！</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--环境1--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--环境2--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>子元素节点： environment</strong></p><ul><li><p>子元素节点： 事务管理器（transactionManager）</p><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;[ JDBC | MANAGED ]&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>详情：[点击查看官方文档](<a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments">mybatis – MyBatis 3 | 配置</a>)</p></li><li><p>这两种事务管理器类型都不需要设置任何属性。</p></li></ul></li><li><p>子元素节点： <strong>数据源（dataSource）</strong></p><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p><ul><li><p>数据源是必须配置的。</p></li><li><p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">type=<span class="hljs-string">&quot;[UNPOOLED|POOLED|JNDI]&quot;</span>）<br></code></pre></td></tr></table></figure></li><li><p>unpooled： 这个数据源的实现只是每次被请求时打开和关闭连接。</p></li><li><p><strong>pooled</strong> ： 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得并发 Web 应用快速响应请求的流行处理方式。</p></li><li><p>jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</p></li><li><p>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</p></li></ul></li></ul><p>Mybatis默认的事务管理器就是JDBC，连接池：POOLED</p><h2 id="4-3-mappers元素"><a href="#4-3-mappers元素" class="headerlink" title="4.3 mappers元素"></a>4.3 mappers元素</h2><h3 id="4-3-1-mappers"><a href="#4-3-1-mappers" class="headerlink" title="4.3.1 mappers"></a>4.3.1 mappers</h3><p>MapperRegistry：注册绑定我们的Mapper文件</p><blockquote><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。</p></blockquote><h3 id="4-3-2-引入资源方式"><a href="#4-3-2-引入资源方式" class="headerlink" title="4.3.2 引入资源方式"></a>4.3.2 引入资源方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用映射器接口实现类的完全限定类名</span><br><span class="hljs-comment">需要配置文件名称和接口名称一致，并且位于同一目录下 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器</span><br><span class="hljs-comment">但是需要配置文件名称和接口名称一致，并且位于同一目录下--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-Properties优化"><a href="#4-4-Properties优化" class="headerlink" title="4.4 Properties优化"></a>4.4 Properties优化</h2><p>数据库这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过properties 元素的子元素来传递。具体的[官方文档](<a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties">mybatis – MyBatis 3 | 配置</a>)</p><p><strong>我们来优化我们的配置文件</strong></p><p>第一步：在资源目录下新建一个配置文件db.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">drive = com.mysql.cj.jdbc.<span class="hljs-type">Driver</span><br><span class="hljs-variable">url</span> <span class="hljs-operator">=</span> jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8</span><br>username = <span class="hljs-type">root</span><br><span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>第二步：在核心配置文件中引入配置文件db.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--注意顺序：properties元素必须放在第一个！导入properties文件--&gt;</span><br>    <span class="hljs-comment">&lt;!--引入配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>note：</strong></p><ul><li><p>可以直接引入 外部文件</p></li><li><p>可以在其中增加一些属性配置</p></li><li><p>如果两个文件有同一个字段，优先使用外部配置文件的</p></li></ul><h2 id="4-5-typeAliases优化"><a href="#4-5-typeAliases优化" class="headerlink" title="4.5 typeAliases优化"></a>4.5 typeAliases优化</h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--类型别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;ssm.study.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当这样配置时， User 可以用在任何使用 ssm.study.pojo.User 的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ssm.study.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每一个在包 ssm.study.pojo 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p><p>若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>note：</strong></p><ul><li>在实体类比较少的时候，使用第一种方式</li><li>如果实体类十分多，建议使用第二种</li><li>第一种可以自定义别名，第二种不行；如果非要该，需要在实体上增加注解</li></ul><h2 id="4-6-其他配置浏览"><a href="#4-6-其他配置浏览" class="headerlink" title="4.6 其他配置浏览"></a>4.6 其他配置浏览</h2><h3 id="4-6-1-设置"><a href="#4-6-1-设置" class="headerlink" title="4.6.1 设置"></a>4.6.1 设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><ul><li>[设置（settings）](<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">mybatis – MyBatis 3 | 配置</a>) 相关 =&gt; 查看帮助文档<ul><li><p>懒加载</p></li><li><p>日志实现</p></li><li><p>缓存开启关闭</p></li></ul></li><li>一个配置完整的 settings 元素的示例如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-6-2-类型处理器"><a href="#4-6-2-类型处理器" class="headerlink" title="4.6.2 类型处理器"></a>4.6.2 类型处理器</h3><p>[官方文档](<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">mybatis – MyBatis 3 | 配置</a>)</p><ul><li><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</p></li><li><p>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。【了解即可】</p></li></ul><h3 id="4-6-3-对象工厂"><a href="#4-6-3-对象工厂" class="headerlink" title="4.6.3 对象工厂"></a>4.6.3 对象工厂</h3><p>[官方文档](<a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">mybatis – MyBatis 3 | 配置</a>)</p><ul><li><p>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。</p></li><li><p>默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过有参构造方法来实例化。</p></li><li><p>如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。【了解即可】</p></li></ul><h2 id="4-7-生命周期和作用域"><a href="#4-7-生命周期和作用域" class="headerlink" title="4.7 生命周期和作用域"></a>4.7 生命周期和作用域</h2><p><strong>作用域（Scope）和生命周期</strong></p><p>理解我们目前已经讨论过的不同作用域和生命周期类是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p>我们可以先画一个流程图，分析一下<strong>Mybatis的执行过程</strong>！</p><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220606201346911.png" alt="image-20220606201346911"></p><p><strong>作用域理解</strong></p><p><strong>SqlSessionFactoryBuilder</strong></p><blockquote><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p></blockquote><ul><li>一旦创建了SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory</strong></p><blockquote><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p></blockquote><ul><li>说白了就是可以想象为：数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或者重新创建另一个实例</strong></li><li>因此SqlSessionFactory的最佳作用域是应用作用域</li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式</li></ul><p><strong>SqlSession</strong></p><blockquote><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。 下面的示例就是一个确保 SqlSession 关闭的标准模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession()) &#123;<br>  <span class="hljs-comment">// 你的应用逻辑代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在所有代码中都遵循这种使用模式，可以保证所有数据库资源都能被正确地关闭。</p></blockquote><ul><li>连接到连接池的一个请求</li><li>SqlSession的实例不是线程安全的，因此是不能被共享的，所以 SqlSession 的最佳的作用域是请求或方法作用域</li><li>用完之后需要赶紧关闭，否则资源被占用</li></ul><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220606201920246.png" alt="image-20220606201920246"></p><h1 id="5-ResultMap"><a href="#5-ResultMap" class="headerlink" title="5. ResultMap"></a>5. ResultMap</h1><p><strong>要解决的问题：属性名和字段名不一致</strong></p><p>环境：新建一个项目，将之前的项目拷贝过来</p><h2 id="5-1-查询为null问题"><a href="#5-1-查询为null问题" class="headerlink" title="5.1 查询为null问题"></a>5.1 查询为null问题</h2><ol><li><p>查看之前的数据库的字段名</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220801161834.png" alt="QQ截图20220801161834"></p></li><li><p>Java中的实体类设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <span class="hljs-comment">//id</span><br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br><span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//密码和数据库不一样！</span><br>    <br>    <span class="hljs-comment">//构造</span><br><span class="hljs-comment">//set/get</span><br><span class="hljs-comment">//toString()</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户</span><br>User <span class="hljs-title function_">selectUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select * from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectUserById</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();  <span class="hljs-comment">//获取SqlSession连接</span><br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.selectUserById( <span class="hljs-number">1</span> );<br>System.out.println(user);<br>session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>结果:</strong></p><ul><li><p>User{id=1, name=’admin’, password=’null’}</p></li><li><p>查询出来发现 password 为空. 说明出现了问题！</p></li></ul><p><strong>分析：</strong></p><ul><li><p>select * from user where id = #{id} 可以看做 select id,name,pwd from user where id = #{id}</p></li><li><p>mybatis会根据这些查询的列名(会将列名转化为小写，数据库不区分大小写) ，去对应的实体类中查找相应列名的set方法设值 , 由于找不到setPwd() , 所以password返回null ; 【自动映射】</p></li></ul><h2 id="5-2-解决方案"><a href="#5-2-解决方案" class="headerlink" title="5.2 解决方案"></a>5.2 解决方案</h2><p>方案一：为列名指定别名 , 别名和java实体类的属性名一致.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select id , name , pwd as password from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方案二：使用结果集映射-&gt;ResultMap 【推荐】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结果集映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- id为主键 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>select id , name , pwd from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-3-ResultMap"><a href="#5-3-ResultMap" class="headerlink" title="5.3 ResultMap"></a>5.3 ResultMap</h2><h3 id="5-3-1-自动映射"><a href="#5-3-1-自动映射" class="headerlink" title="5.3.1 自动映射"></a>5.3.1 自动映射</h3><ul><li><p>resultMap 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC ResultSets 数据提取代码中解放出来。</p></li><li><p>实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 resultMap 能够代替实现同等功能的长达数千行的代码。</p></li><li><p>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</p></li></ul><p>你已经见过简单映射语句的示例了，但并没有显式指定 resultMap 。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select id , name , pwd<br>from user<br>where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述语句只是简单地将所有的列映射到 HashMap 的键上，这由 resultType 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。你的程序更可能会使用 JavaBean 或POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。</p><p>ResultMap 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</p><h3 id="5-3-2-手动映射"><a href="#5-3-2-手动映射" class="headerlink" title="5.3.2 手动映射"></a>5.3.2 手动映射</h3><ol><li><p>返回值类型为resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>select id , name , pwd from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写resultMap，实现手动映射！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- id为主键 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>如果世界总是这么简单就好了。但是肯定不是的，数据库中，存在一对多，多对一的情况，我们之后会使用到一些高级的结果集映射，association，collection这些</p><h1 id="6-日志工厂"><a href="#6-日志工厂" class="headerlink" title="6. 日志工厂"></a>6. 日志工厂</h1><h2 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h2><p>思考：我们在测试SQL的时候，要是能够在控制台输出 SQL 的话，是不是就能够有更快的排错效率？</p><p>如果一个 数据库相关的操作出现了问题，我们可以根据输出的SQL语句快速排查问题。</p><p>对于以往的开发过程，我们会经常使用到debug模式来调节，跟踪我们的代码执行过程。但是现在使用Mybatis是基于接口，配置文件的源代码执行过程。因此，我们必须选择日志工具来作为我们开发，调节程序的工具。</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220801165830.png" alt="QQ截图20220801165830"></p><p>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：</p><ul><li>SLF4J</li><li>LOG4J（3.5.9 起废弃）</li><li>LOG4J2</li><li>JDK_LOGGING</li><li> COMMONS_LOGGING</li><li>STDOUT_LOGGING</li><li>NO_LOGGING</li></ul><p>具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。它会使用最先找到的（按上文列举的顺序查找）。 如果一个都未找到，日志功能就会被禁用。</p><p><strong>标准日志实现</strong></p><p>指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。</p><p><strong>在核心配置文件mybatis-config.xml中配置日志：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--标准的日志工厂实现--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>控制台输出：</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220801170730.png" alt="QQ截图20220801170730"></p><p>测试，可以看到控制台有大量的输出！我们可以通过这些输出来判断程序到底哪里出了Bug</p><h2 id="6-2-Log4j"><a href="#6-2-Log4j" class="headerlink" title="6.2 Log4j"></a>6.2 Log4j</h2><p><strong>简介：</strong></p><blockquote><p>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件，甚至是套接口服务器、<a href="https://baike.baidu.com/item/NT/3443842">NT</a>的事件记录器、<a href="https://baike.baidu.com/item/UNIX">UNIX</a> <a href="https://baike.baidu.com/item/Syslog">Syslog</a><a href="https://baike.baidu.com/item/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/966835">守护进程</a>等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</p></blockquote><p><strong>使用步骤：</strong></p><ol><li><p>导入log4j的包（pom.xml文件中导入依赖）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/log4j/log4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置文件编写（resources目录下创建 log4j.properties 文件）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/study.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure></li><li><p>setting设置日志实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在程序中使用Log4j进行输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意导包：org.apache.log4j.Logger</span><br><span class="hljs-keyword">import</span> org.apache.log4j.Logger<br><br><span class="hljs-comment">//日志对象，参数为当前日志的class</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(UserMapperTest.class);<br><br><span class="hljs-comment">//log4j测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span> &#123;<br>logger.info(<span class="hljs-string">&quot;info：进入selectUser方法&quot;</span>);<br>logger.debug(<span class="hljs-string">&quot;debug：进入selectUser方法&quot;</span>);<br>logger.error(<span class="hljs-string">&quot;error: 进入selectUser方法&quot;</span>);<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>List&lt;User&gt; users = mapper.selectUser();<br><span class="hljs-keyword">for</span> (User user: users)&#123;<br>System.out.println(user);<br>&#125;<br>session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>控制台输出</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220802161115.png" alt="QQ截图20220802161115"></p><p>日志文件 study.log 生成</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220802161012.png" alt="QQ截图20220802161012"></p></li></ol><h1 id="7-分页的实现"><a href="#7-分页的实现" class="headerlink" title="7. 分页的实现"></a>7. 分页的实现</h1><p><strong>思考：为什么需要分页？</strong></p><p>在学习mybatis等持久层框架的时候，会经常对数据进行增删改查操作，使用最多的是对数据库进行查询操作，如果查询大量数据的时候，我们往往使用分页进行查询，也就是每次处理小部分数据，这样对数据库压力就在可控范围内。</p><h2 id="7-1-limit实现分页"><a href="#7-1-limit实现分页" class="headerlink" title="7.1 limit实现分页"></a>7.1 limit实现分页</h2><p><strong>使用Limit实现分页</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#语法<br>SELECT * FROM table LIMIT stratIndex，pageSize<br><br>SELECT * FROM table LIMIT 5 , 10 ; // 检索记录行 6 - 15<br><br>#为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 - 1 ：<br>SELECT * FROM table LIMIT 95 ,- 1 ; // 检索记录行 96 -last.<br><br>#如果只给定一个参数，它表示返回最大的记录行数目：<br>SELECT * FROM table LIMIT 5 ; //检索前 5 个记录行<br><br>#换句话说，LIMIT n 等价于 LIMIT 0 ,n<br></code></pre></td></tr></table></figure><p><strong>实现步骤：</strong></p><ol><li><p>修改Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Mapper接口，参数为map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//选择全部用户实现分页</span><br>List&lt;User&gt; <span class="hljs-title function_">selectUser</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>在测试类中传入参数测试</p><ul><li>推断：起始位置 = （当前页面 - 1 ） * 页面大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询 , 两个参数startIndex , pageSize</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">currentPage</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;  <span class="hljs-comment">//第几页</span><br><span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ;  <span class="hljs-comment">//每页显示几个</span><br>Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Integer&gt;();<br>map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,(currentPage- <span class="hljs-number">1</span> )*pageSize);<br>map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,pageSize);<br>    <br>    List&lt;User&gt; users = mapper.selectUser(map);<br>    <br>    <span class="hljs-keyword">for</span> (User user: users)&#123;<br>System.out.println(user);<br>&#125;<br>    <br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-2-RowBounds分页"><a href="#7-2-RowBounds分页" class="headerlink" title="7.2 RowBounds分页"></a>7.2 RowBounds分页</h2><p>我们除了使用Limit在SQL层面实现分页，也可以使用RowBounds在Java代码层面实现分页，当然此种方式作为了解即可。</p><p><strong>实现步骤：</strong></p><ol><li><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//选择全部用户RowBounds实现分页</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByRowBounds</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select * from user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试类</p><p>在这里，我们需要使用RowBounds类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserByRowBounds</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <br>    <span class="hljs-comment">//RowBounds实现</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">currentPage</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ;  <span class="hljs-comment">//第几页</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ;  <span class="hljs-comment">//每页显示几个</span><br>    <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowBounds</span>((currentPage-<span class="hljs-number">1</span> )*pageSize,pageSize);<br><br>    <span class="hljs-comment">//通过Java代码层实现分页</span><br>    List&lt;User&gt; users session.selectList(<span class="hljs-string">&quot;ssm.study.mapper.UserMapper.getUserByRowBounds&quot;</span>,<br><span class="hljs-literal">null</span>, rowBounds);<br><br>    <span class="hljs-keyword">for</span> (User user: users)&#123;<br>        System.out.println(user);<br>    &#125;<br><br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-3-PageHelper（了解）"><a href="#7-3-PageHelper（了解）" class="headerlink" title="7.3 PageHelper（了解）"></a>7.3 PageHelper（了解）</h2><p>官方文档：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220802164352.png" alt="QQ截图20220802164352"></p><h1 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8. 使用注解开发"></a>8. 使用注解开发</h1><h2 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h2><ul><li><p>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程</p></li><li><p><strong>根本原因 : 解耦 , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准, 使得开发变得容易 , 规范性更好</strong></p></li><li><p>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了</p></li><li><p>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p></li></ul><p><strong>关于接口的理解</strong></p><ul><li><p>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。</p></li><li><p>接口的本身反映了系统设计人员对系统的抽象理解。</p></li><li><p>接口应有两类：</p><ul><li><p>第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)</p></li><li><p>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）</p></li></ul></li><li><p>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p></li></ul><p><strong>三个面向区别</strong></p><ul><li><p>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法.</p></li><li><p>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现.</p></li><li><p>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p></li></ul><h2 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220802170945.png" alt="QQ截图20220802170945"></p><ul><li><p><strong>mybatis最初配置信息是基于 XML ,映射语句(SQL)也是定义在 XML 中的。而到MyBatis 3提供了新的基于注解的配置。不幸的是，Java 注解的的表达力和灵活性十分有限。最强大的 MyBatis 映射并不能用注解来构建</strong></p></li><li><p>使用注解开发，<strong>本质：反射机制实现  底层：动态代理</strong></p></li><li><p>sql 类型主要分成 :</p><ul><li><p>@select ()</p></li><li><p>@update ()</p></li><li><p>@Insert ()</p></li><li><p>@delete ()</p></li></ul></li></ul><p><strong>Note：</strong>利用注解开发就不需要mapper.xml映射文件了</p><ol><li><p>在接口中添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询全部用户</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在mybatis的核心配置文件中注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用class绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.dao.UserMapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <span class="hljs-comment">//本质上利用了jvm的动态代理机制</span><br>    <span class="hljs-comment">//底层主要应用反射</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    List&lt;User&gt; users = mapper.getUsers();<br>    <span class="hljs-keyword">for</span>(User user : users)&#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>利用Debug查看本质</p></li></ol><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220606205608273.png" alt="image-20220606205608273"></p><ol start="5"><li><p>本质上利用了jvm的动态代理机制</p><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220606205657776.png" alt="image-20220606205657776"></p></li><li><p><strong>Mybatis详细的执行流程</strong></p></li></ol><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220606205813597.png" alt="image-20220606205813597"></p><h2 id="8-3-注解增删改"><a href="#8-3-注解增删改" class="headerlink" title="8.3 注解增删改"></a>8.3 注解增删改</h2><p>改造MybatisUtils工具类的getSession( ) 方法，重载实现。我们可以在工具类创建的时候实现自动提交事物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取SqlSession连接</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSession</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> getSession(<span class="hljs-literal">true</span>); <span class="hljs-comment">//事务自动提交</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note：</strong>确保实体类和数据库字段对应</p><p><strong>查询：</strong></p><ol><li><p>编写接口方法注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户</span><br><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>User <span class="hljs-title function_">selectUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectUserById</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.selectUserById( <span class="hljs-number">1</span> );<br>System.out.println(user);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>新增：</strong></p><ol><li><p>编写接口方法注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加一个用户</span><br><span class="hljs-meta">@Insert(&quot;insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>( <span class="hljs-number">4</span> , <span class="hljs-string">&quot;user3&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>mapper.addUser(user);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>修改：</strong></p><ol><li><p>编写接口方法注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改一个用户</span><br><span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>( <span class="hljs-number">4</span> , <span class="hljs-string">&quot;user3&quot;</span>, <span class="hljs-string">&quot;123456789&quot;</span>);<br>mapper.updateUser(user);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>删除：</strong></p><ol><li><p>编写接口方法注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id删除用</span><br><span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span><span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>mapper.deleteUser( <span class="hljs-number">4</span> );<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>Note：</strong>增删改一定记得对事务的处理</p><h2 id="8-4-关于-Param"><a href="#8-4-关于-Param" class="headerlink" title="8.4 关于@Param"></a>8.4 关于@Param</h2><p>@Param注解用于给方法参数起一个名字。以下是总结的使用原则：</p><ul><li><p>在方法只接受一个参数的情况下，可以不使用@Param。</p></li><li><p>在方法接受多个参数的情况下，建议一定要使用@Param注解给参数命名。</p></li><li><p>如果参数是 JavaBean ， 则不能使用@Param。</p></li><li><p>不使用@Param注解时，参数只能有一个，并且是Javabean。</p></li></ul><h2 id="8-5-与-的区别"><a href="#8-5-与-的区别" class="headerlink" title="8.5 #与$的区别"></a>8.5 #与$的区别</h2><p>#更加安全，可以防止sql注入</p><ul><li><p>#{} 的作用主要是替换预编译语句(PrepareStatement)中的占位符? 【推荐使用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">INSERT INTO <span class="hljs-title function_">user</span> <span class="hljs-params">(name)</span> VALUES (#&#123;name&#125;);<br>INSERT INTO <span class="hljs-title function_">user</span> <span class="hljs-params">(name)</span> VALUES (?);<br></code></pre></td></tr></table></figure></li><li><p>${} 的作用是直接进行字符串替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">INSERT INTO <span class="hljs-title function_">user</span> <span class="hljs-params">(name)</span> VALUES (<span class="hljs-string">&#x27;$&#123;name&#125;&#x27;</span>);<br>INSERT INTO <span class="hljs-title function_">user</span> <span class="hljs-params">(name)</span> VALUES (<span class="hljs-string">&#x27;kuangshen&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="9-多对一的处理"><a href="#9-多对一的处理" class="headerlink" title="9. 多对一的处理"></a>9. 多对一的处理</h1><p>多对一的理解：</p><ul><li><p>多个学生对应一个老师</p></li><li><p>如果对于学生这边，就是一个多对一的现象，即从学生这边关联一个老师！</p></li></ul><h2 id="9-1-数据库设计"><a href="#9-1-数据库设计" class="headerlink" title="9.1 数据库设计"></a>9.1 数据库设计</h2><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220606211459972.png" alt="image-20220606211459972"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `teacher` (<br>`id` INT( 10 ) NOT NULL,<br>`name` VARCHAR( 30 ) DEFAULT NULL,<br>PRIMARY KEY (`id`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8<br><br>INSERT INTO teacher(`id`, `name`) VALUES ( 1 , &#x27;秦老师&#x27;);<br><br>CREATE TABLE `student` (<br>`id` INT( 10 ) NOT NULL,<br>`name` VARCHAR( 30 ) DEFAULT NULL,<br>`tid` INT( 10 ) DEFAULT NULL,<br>PRIMARY KEY (`id`),<br>KEY `fktid` (`tid`),<br>CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCES `teacher` (`id`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8<br><br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;1&#x27;, &#x27;小明&#x27;, &#x27;1&#x27;);<br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;2&#x27;, &#x27;小红&#x27;, &#x27;1&#x27;);<br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;3&#x27;, &#x27;小张&#x27;, &#x27;1&#x27;);<br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;4&#x27;, &#x27;小李&#x27;, &#x27;1&#x27;);<br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;5&#x27;, &#x27;小王&#x27;, &#x27;1&#x27;);<br></code></pre></td></tr></table></figure><h2 id="9-2-搭建测试环境"><a href="#9-2-搭建测试环境" class="headerlink" title="9.2 搭建测试环境"></a>9.2 搭建测试环境</h2><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220817101143.png" alt="QQ截图20220817101143"></p><ol><li><p>新建实体类Teacher，Student</p><p>Teacher.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Student.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//学生关联一个老师</span><br>    <span class="hljs-keyword">private</span> Teacher teacher;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, Teacher teacher)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.teacher = teacher;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Teacher <span class="hljs-title function_">getTeacher</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> teacher;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacher</span><span class="hljs-params">(Teacher teacher)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacher = teacher;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, teacher=&quot;</span> + teacher +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立Mapper接口</p><p>StudentMapper.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentMapper</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>TeacherMapper.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.dao;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><span class="hljs-keyword">import</span> ssm.study.pojo.Teacher;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TeacherMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from Teacher where id = #&#123;tid&#125;&quot;)</span><br>    Teacher <span class="hljs-title function_">getTeacher</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立Mapper.xml文件</p><p>TeacherMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;ssm.study.dao.TeacherMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;ssm.study.dao.StudentMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在核心配置文件中绑定注册我们的Mapper接口或者文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.dao.StudentMapper&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ssm.study.dao.TeacherMapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ssm.study.dao;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> ssm.study.pojo.Teacher;<br><span class="hljs-keyword">import</span> ssm.study.utils.MybatisUtils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherMapperTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTeacher</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>        <span class="hljs-type">TeacherMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TeacherMapper.class);<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> mapper.getTeacher(<span class="hljs-number">1</span>);<br>        System.out.println(teacher);<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="9-3-按查询嵌套处理"><a href="#9-3-按查询嵌套处理" class="headerlink" title="9.3 按查询嵌套处理"></a>9.3 按查询嵌套处理</h2><blockquote><p>问题：查询所有的学生信息，以及对应的老师的信息（连表查询）</p><p>方法1：按照查询嵌套处理</p><p>方法2：按照结果嵌套处理</p></blockquote><ol><li><p>给StudentMapper接口增加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取所有学生及对应老师的信息</span><br><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;ssm.study.mapper.StudentMapper&quot;</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">需求：获取所有学生及对应老师的信息</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">1. 获取所有学生的信息</span><br><span class="hljs-comment">2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span><br><span class="hljs-comment">3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span><br><span class="hljs-comment">1. 做一个结果集映射：StudentTeacher</span><br><span class="hljs-comment">2. StudentTeacher结果集的类型为 Student</span><br><span class="hljs-comment">3. 学生中老师的属性为teacher，对应数据库中为tid。多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span><br><span class="hljs-comment">4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查</span><br><span class="hljs-comment">询</span><br><span class="hljs-comment">--&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>select * from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span><span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">这里传递过来的id，只有一个属性的时候，下面可以写任何值</span><br><span class="hljs-comment">association中column多参数配置：column=&quot;&#123;key=value,key=value&#125;&quot;</span><br><span class="hljs-comment">其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span><br><span class="hljs-comment">--&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>select * from teacher where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Mybatis配置文件中注册Mapper</p></li><li><p>注意点说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;&#123;id=tid,name=tid&#125;&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">这里传递过来的id，只有一个属性的时候，下面可以写任何值</span><br><span class="hljs-comment">association中column多参数配置：</span><br><span class="hljs-comment">column=&quot;&#123;key=value,key=value&#125;&quot;</span><br><span class="hljs-comment">其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段</span><br><span class="hljs-comment">名。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>select * from teacher where id = #&#123;id&#125; and name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetStudents</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">StudentMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(StudentMapper.class);<br>    <br>    List&lt;Student&gt; students = mapper.getStudents();<br>    <br>    <span class="hljs-keyword">for</span> (Student student : students)&#123;<br>System.out.println(<br><span class="hljs-string">&quot;学生名:&quot;</span>+ student.getName()+<span class="hljs-string">&quot;\t老师:&quot;</span>+student.getTeacher().getName());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="9-4-按结果嵌套处理"><a href="#9-4-按结果嵌套处理" class="headerlink" title="9.4 按结果嵌套处理"></a>9.4 按结果嵌套处理</h2><p>除了上面这种方式，还有其他思路吗？</p><p>我们还可以按照结果进行嵌套处理；</p><ol><li><p>接口方法编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">getStudents2</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">按查询结果嵌套处理</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">1. 直接查询出结果，进行结果集的映射</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> &gt;</span><br>select s.id sid, s.name sname , t.name tname<br>from student s,teacher t<br>where s.tid = t.id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Mybatis配置文件中注册Mapper</p></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetStudents2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">StudentMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(StudentMapper.class);<br>    <br>    List&lt;Student&gt; students = mapper.getStudents2();<br>    <br>    <span class="hljs-keyword">for</span> (Student student : students)&#123;<br>System.out.println(<br><span class="hljs-string">&quot;学生名:&quot;</span>+ student.getName()+<span class="hljs-string">&quot;\t老师:&quot;</span>+student.getTeacher().getName());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="9-5-小结"><a href="#9-5-小结" class="headerlink" title="9.5 小结"></a>9.5 小结</h2><ul><li><p>按照查询进行嵌套处理就像SQL中的子查询</p></li><li><p>按照结果进行嵌套处理就像SQL中的联表查询</p></li></ul><h1 id="10-一对多的处理"><a href="#10-一对多的处理" class="headerlink" title="10. 一对多的处理"></a>10. 一对多的处理</h1><p>一对多的理解：</p><ul><li><p>一个老师拥有多个学生</p></li><li><p>如果对于老师这边，就是一个一对多的现象，即从一个老师下面拥有一群学生（集合）！</p></li></ul><h2 id="10-1-实体类编写"><a href="#10-1-实体类编写" class="headerlink" title="10.1 实体类编写"></a>10.1 实体类编写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tid;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">//一个老师多个学生</span><br><span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br>&#125;<br></code></pre></td></tr></table></figure><p>….. 和之前一样，搭建测试的环境！</p><h2 id="10-2-按结果嵌套处理"><a href="#10-2-按结果嵌套处理" class="headerlink" title="10.2 按结果嵌套处理"></a>10.2 按结果嵌套处理</h2><ol><li><p>TeacherMapper接口编写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取指定老师，及老师下的所有学生</span><br><span class="hljs-keyword">public</span> Teacher <span class="hljs-title function_">getTeacher</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写接口对应的Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">思路:</span><br><span class="hljs-comment">1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span><br><span class="hljs-comment">2. 对查询出来的操作做结果集映射</span><br><span class="hljs-comment">1. 集合的话，使用collection！</span><br><span class="hljs-comment">JavaType和ofType都是用来指定对象类型的</span><br><span class="hljs-comment">JavaType是用来指定pojo中属性的类型</span><br><span class="hljs-comment">ofType指定的是映射到list集合属性中pojo的类型。</span><br><span class="hljs-comment">--&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>select s.id sid, s.name sname , t.name tname, t.id tid<br>from student s,teacher t<br>where s.tid = t.id and t.id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将Mapper文件注册到MyBatis-config文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/TeacherMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetTeacher</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">TeacherMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(TeacherMapper.class);<br><span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> mapper.getTeacher( <span class="hljs-number">1</span> );<br>System.out.println(teacher.getName());<br>System.out.println(teacher.getStudents());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="10-3-按查询嵌套处理"><a href="#10-3-按查询嵌套处理" class="headerlink" title="10.3 按查询嵌套处理"></a>10.3 按查询嵌套处理</h2><ol><li><p>TeacherMapper接口编写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Teacher <span class="hljs-title function_">getTeacher2</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写接口对应的Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>select * from teacher where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>select * from student where tid = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将Mapper文件注册到MyBatis-config文件中</p></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetTeacher2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">TeacherMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(TeacherMapper.class);<br><span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> mapper.getTeacher2( <span class="hljs-number">1</span> );<br>System.out.println(teacher.getName());<br>System.out.println(teacher.getStudents());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="10-4-小结"><a href="#10-4-小结" class="headerlink" title="10.4 小结"></a>10.4 小结</h2><ol><li><p>关联-association</p></li><li><p>集合-collection</p></li><li><p>所以association是用于一对一和多对一，而collection是用于一对多的关系</p></li><li><p>JavaType和ofType都是用来指定对象类型的</p><ul><li><p>JavaType是用来指定pojo中属性的类型</p></li><li><p>ofType指定的是映射到list集合属性中pojo的类型。</p></li></ul></li></ol><p><strong>注意说明：</strong></p><ol><li><p>保证SQL的可读性，尽量通俗易懂</p></li><li><p>根据实际要求，尽量编写性能更高的SQL语句</p></li><li><p>注意属性名和字段不一致的问题</p></li><li><p>注意一对多和多对一 中：字段和属性对应的问题</p></li><li><p>尽量使用Log4j，通过日志来查看自己的错误</p></li></ol><h1 id="11-动态SQL"><a href="#11-动态SQL" class="headerlink" title="11. 动态SQL"></a>11. 动态SQL</h1><p><strong>官方文档：<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">https://mybatis.org/mybatis-3/zh/dynamic-sql.html</a></strong></p><h2 id="11-1-介绍"><a href="#11-1-介绍" class="headerlink" title="11.1 介绍"></a>11.1 介绍</h2><p>什么是动态SQL： <strong>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.</strong></p><blockquote><p>官网描述：</p><p>​        MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。<br>​        虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。<br>​        动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul></blockquote><p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p><p>那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise,trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p><h2 id="11-2-搭建环境"><a href="#11-2-搭建环境" class="headerlink" title="11.2 搭建环境"></a>11.2 搭建环境</h2><p><strong>新建一个数据库表：blog</strong></p><p>字段：id，title，author，create_time，views</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `blog` (<br>`id` varchar( 50 ) NOT NULL COMMENT &#x27;博客id&#x27;,<br>`title` varchar( 100 ) NOT NULL COMMENT &#x27;博客标题&#x27;,<br>`author` varchar( 30 ) NOT NULL COMMENT &#x27;博客作者&#x27;,<br>`create_time` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,<br>`views` int( 30 ) NOT NULL COMMENT &#x27;浏览量&#x27;<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br></code></pre></td></tr></table></figure><ol><li><p>创建Mybatis基础工程</p></li><li><p>IDutil工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IDUtil</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">genId</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实体类编写 【注意set方法作用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String id;<br><span class="hljs-keyword">private</span> String title;<br><span class="hljs-keyword">private</span> String author;<br><span class="hljs-keyword">private</span> Date createTime;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> views;<br><span class="hljs-comment">//set，get....</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Mapper接口及xml文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BlogMapper</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.BlogMapper&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span> <br></code></pre></td></tr></table></figure></li><li><p>mybatis核心配置文件，下划线驼峰自动转换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!--注册Mapper.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/BlogMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>插入初始数据</p><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新增一个博客</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addBlog</span><span class="hljs-params">(Blog blog)</span>;<br></code></pre></td></tr></table></figure><p>sql配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>insert into blog (id, title, author, create_time, views)<br>values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>初始化博客方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInitBlog</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(BlogMapper.class);<br>    <br>    <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blog</span>();<br>blog.setId(IDUtil.genId());<br>blog.setTitle(<span class="hljs-string">&quot;Mybatis如此简单&quot;</span>);<br>blog.setAuthor(<span class="hljs-string">&quot;狂神说&quot;</span>);<br>blog.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>blog.setViews( <span class="hljs-number">9999</span> );<br>    <br>    mapper.addBlog(blog);<br>    <br>    blog.setId(IDUtil.genId());<br>blog.setTitle(<span class="hljs-string">&quot;Java如此简单&quot;</span>);<br>mapper.addBlog(blog);<br>    <br>    blog.setId(IDUtil.genId());<br>blog.setTitle(<span class="hljs-string">&quot;Spring如此简单&quot;</span>);<br>mapper.addBlog(blog);<br>    <br>    blog.setId(IDUtil.genId());<br>    blog.setTitle(<span class="hljs-string">&quot;微服务如此简单&quot;</span>);<br>mapper.addBlog(blog);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="11-3-if-语句"><a href="#11-3-if-语句" class="headerlink" title="11.3 if 语句"></a>11.3 if 语句</h2><p><strong>需求：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</strong></p><ol><li><p>编写接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求 1</span><br>List&lt;Blog&gt; <span class="hljs-title function_">queryBlogIf</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--需求1：</span><br><span class="hljs-comment">根据作者名字和博客名字来查询博客！</span><br><span class="hljs-comment">如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span><br><span class="hljs-comment">select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIf&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>select * from blog where<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>title = #&#123;title&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>and author = #&#123;author&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryBlogIf</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(BlogMapper.class);<br>    <br>    HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;Mybatis如此简单&quot;</span>);<br>map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;狂神说&quot;</span>);<br>List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);<br>    <br>    System.out.println(blogs);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>这样写我们可以看到，如果 author 等于 null，那么查询语句为 select * from user where title=#{title},但是如果title为空呢？那么查询语句为 select * from user where and author=#{author}，这是错误的SQL 语句，如何解决呢？请看下面的 where 语句！</p><h2 id="11-4-Where"><a href="#11-4-Where" class="headerlink" title="11.4 Where"></a>11.4 Where</h2><p>修改上面的SQL语句；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIf&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>select * from blog<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>title = #&#123;title&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>and author = #&#123;author&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p><h2 id="11-5-Set"><a href="#11-5-Set" class="headerlink" title="11.5 Set"></a>11.5 Set</h2><p>同理，上面的对于查询 SQL 语句包含 where 关键字，如果在进行更新操作的时候，含有 set 关键词，我们怎么处理呢？</p><ol><li><p>编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">updateBlog</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>sql配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注意set是用的逗号隔开--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>update blog<br><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>title = #&#123;title&#125;,<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>author = #&#123;author&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateBlog</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(BlogMapper.class);<br>    <br>    HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;动态SQL&quot;</span>);<br>map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;秦疆&quot;</span>);<br>map.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;9d6a763f5e1347cebda43e2a32687a77&quot;</span>);<br>    <br>    mapper.updateBlog(map);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="11-6-choose语句"><a href="#11-6-choose语句" class="headerlink" title="11.6 choose语句"></a>11.6 choose语句</h2><p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose标签可以解决此类问题，类似于 Java 的 switch 语句</p><ol><li><p>编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Blog&gt; <span class="hljs-title function_">queryBlogChoose</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>sql配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>select * from blog<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>title = #&#123;title&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>and author = #&#123;author&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>and views = #&#123;views&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryBlogChoose</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(BlogMapper.class);<br>    <br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;Java如此简单&quot;</span>);<br>map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;狂神说&quot;</span>);<br>map.put(<span class="hljs-string">&quot;views&quot;</span>, <span class="hljs-number">9999</span> );<br>List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);<br>    <br>    System.out.println(blogs);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="11-7-SQL片段"><a href="#11-7-SQL片段" class="headerlink" title="11.7 SQL片段"></a>11.7 SQL片段</h2><p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</p><p><strong>提取SQL片段：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>title = #&#123;title&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>and author = #&#123;author&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>引用SQL片段：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIf&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>select * from blog<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：①、最好基于 单表来定义 sql 片段，提高片段的可重用性</p><p>​            ②、在 sql 片段中不要包括 where</p><h2 id="11-8-Foreach"><a href="#11-8-Foreach" class="headerlink" title="11.8 Foreach"></a>11.8 Foreach</h2><p>将数据库中前三个数据的id修改为1,2,3；</p><p>需求：我们需要查询 blog 表中 id 分别为1,2,3的博客信息</p><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> List&lt;Blog&gt; <span class="hljs-title function_">queryBlogForeach</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>select * from blog<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">collection:指定输入对象中的集合属性</span><br><span class="hljs-comment">item:每次遍历生成的对象</span><br><span class="hljs-comment">open:开始遍历时的拼接字符串</span><br><span class="hljs-comment">close:结束时拼接的字符串</span><br><span class="hljs-comment">separator:遍历对象之间需要拼接的字符串</span><br><span class="hljs-comment">select * from blog where 1=1 and (id=1 or id=2 or id=3)</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryBlogForeach</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(BlogMapper.class);<br>    <br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>List&lt;Integer&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>ids.add( <span class="hljs-number">1</span> );<br>ids.add( <span class="hljs-number">2</span> );<br>ids.add( <span class="hljs-number">3</span> );<br>map.put(<span class="hljs-string">&quot;ids&quot;</span>,ids);<br>    <br>    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);<br>    <br>    System.out.println(blogs);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>小结：其实动态 sql 语句的编写往往就是一个拼接的问题，为了保证拼接准确，我们最好首先要写原生的 sql 语句出来，然后在通过 mybatis 动态sql 对照着改，防止出错。多在实践中使用才是熟练掌握它的技巧</p><h1 id="12-缓存"><a href="#12-缓存" class="headerlink" title="12. 缓存"></a>12. 缓存</h1><h2 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h2><ol><li><p>什么是缓存 [ Cache ]？</p><ul><li><p>存在内存中的临时数据。</p></li><li><p>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p></li></ul></li><li><p>为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul></li><li><p>什么样的数据能使用缓存？</p><ul><li>经常查询并且不经常改变的数据。</li></ul></li></ol><h2 id="12-2-Mybatis缓存"><a href="#12-2-Mybatis缓存" class="headerlink" title="12.2 Mybatis缓存"></a>12.2 Mybatis缓存</h2><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存： 一级缓存 和 二级缓存</p><ul><li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p></li></ul></li></ul><h2 id="12-3-一级缓存"><a href="#12-3-一级缓存" class="headerlink" title="12.3 一级缓存"></a>12.3 一级缓存</h2><ul><li><p>一级缓存也叫本地缓存：</p><ul><li><p>与数据库同一次会话期间查询到的数据会放在本地缓存中。</p></li><li><p>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</p></li></ul></li></ul><h3 id="12-3-1-初体验测试"><a href="#12-3-1-初体验测试" class="headerlink" title="12.3.1 初体验测试"></a>12.3.1 初体验测试</h3><ol><li><p>在mybatis中加入日志，方便测试结果</p></li><li><p>编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户</span><br>User <span class="hljs-title function_">queryUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>接口对应的Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select * from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryUserById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user);<br><span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user2);<br>System.out.println(user==user2);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>结果分析</p><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220606221215646.png" alt="image-20220606221215646"></p></li></ol><h3 id="12-3-2-一级缓存失效的四种情况"><a href="#12-3-2-一级缓存失效的四种情况" class="headerlink" title="12.3.2 一级缓存失效的四种情况"></a>12.3.2 一级缓存失效的四种情况</h3><ul><li><p>一级缓存是SqlSession级别的缓存，是一直开启的，我们关闭不了它；</p></li><li><p>一级缓存失效情况：没有使用到当前的一级缓存，效果就是，还需要再向数据库中发起一次查询请求！</p></li></ul><ol><li><p>sqlSession不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryUserById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session2</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> session2.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user);<br><span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> mapper2.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user2);<br>System.out.println(user==user2);<br>    <br>    session.close();<br>session2.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>观察结果：发现发送了两条SQL语句！</p><p>结论： <strong>每个sqlSession中的缓存相互独立</strong></p></li><li><p>sqlSession相同，查询条件不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryUserById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user);<br><span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> mapper2.queryUserById( <span class="hljs-number">2</span> );<br>System.out.println(user2);<br>System.out.println(user==user2);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>观察结果：发现发送了两条SQL语句！很正常的理解</p><p>结论： <strong>当前缓存中，不存在这个数据</strong></p></li><li><p>sqlSession相同，两次查询之间执行了增删改操作！</p><ul><li><p>增加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改用户</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写SQL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>update user set name = #&#123;name&#125; where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryUserById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user);<br>    <br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;kuangshen&quot;</span>);<br>map.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">4</span> );<br>mapper.updateUser(map);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user2);<br>    <br>    System.out.println(user==user2);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>观察结果：查询在中间执行了增删改操作后，重新执行了</p><p>结论： <strong>因为增删改操作可能会对当前数据产生影响</strong></p></li></ul></li><li><p>sqlSession相同，手动清除一级缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryUserById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user);<br>    <br>    session.clearCache();<span class="hljs-comment">//手动清除缓存</span><br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user2);<br>    <br>    System.out.println(user==user2);<br>    <br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>一级缓存就是一个map</p><h2 id="12-4-二级缓存"><a href="#12-4-二级缓存" class="headerlink" title="12.4 二级缓存"></a>12.4 二级缓存</h2><ul><li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</p></li><li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p></li><li><p>工作机制</p><ul><li><p>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</p></li><li><p>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</p></li><li><p>新的会话查询信息，就可以从二级缓存中获取内容；</p></li><li><p>不同的mapper查出的数据会放在自己对应的缓存（map）中；</p></li></ul></li></ul><h3 id="12-4-1-使用步骤"><a href="#12-4-1-使用步骤" class="headerlink" title="12.4.1 使用步骤"></a>12.4.1 使用步骤</h3><p><strong>官方文档：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache</a></strong></p><ol><li><p>开启全局缓存 【mybatis-config.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>去每个mapper.xml中配置使用二级缓存，这个配置非常简单；【xxxMapper.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br><br>官方示例=====&gt;查看官方文档<br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag"><span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的<br>512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者<br>产生冲突。<br></code></pre></td></tr></table></figure></li><li><p>代码测试</p><ul><li><p>所有的实体类先实现序列化接口</p></li><li><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryUserById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session2</span> <span class="hljs-operator">=</span> MybatisUtils.getSession();<br>    <br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> session2.getMapper(UserMapper.class);<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user);<br>session.close();<br>    <br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> mapper2.queryUserById( <span class="hljs-number">1</span> );<br>System.out.println(user2);<br>System.out.println(user==user2);<br>    <br>    session2.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="12-4-2-结论"><a href="#12-4-2-结论" class="headerlink" title="12.4.2 结论"></a>12.4.2 结论</h3><ul><li><p>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</p></li><li><p>查出的数据都会被默认先放在一级缓存中</p></li><li><p>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</p></li></ul><h2 id="12-5-缓存原理"><a href="#12-5-缓存原理" class="headerlink" title="12.5 缓存原理"></a>12.5 缓存原理</h2><p><img src="https://img.yiqiangshiyia.cn/blog/image-20220606222550369.png" alt="image-20220606222550369"></p><h2 id="12-6-EhCache"><a href="#12-6-EhCache" class="headerlink" title="12.6 EhCache"></a>12.6 EhCache</h2><p>第三方缓存实现–EhCache: 查看百度百科</p><ul><li><p>官方文档：<a href="http://mybatis.org/ehcache-cache/">http://mybatis.org/ehcache-cache/</a></p></li><li><p>Ehcache是一种广泛使用的java分布式缓存，用于通用缓存；</p></li><li><p>要在应用程序中使用Ehcache，需要引入依赖的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-</span><br><span class="hljs-comment">ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在mapper.xml中使用对应的缓存即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span> = <span class="hljs-string">“org.acme.FooMapper”</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span> = <span class="hljs-string">“org.mybatis.caches.ehcache.EhcacheCache”</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写ehcache.xml文件，如果在 加载时 未找到 /ehcache.xml 资源或出现问题，则将使用默认配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="hljs-comment">user.home – 用户主目录</span><br><span class="hljs-comment">user.dir – 用户当前工作目录</span><br><span class="hljs-comment">java.io.tmpdir – 默认临时文件路径</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag"><span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;259200&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cloud_user&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;5000&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">name:缓存名称。</span><br><span class="hljs-comment">maxElementsInMemory:缓存最大数目</span><br><span class="hljs-comment">maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="hljs-comment">eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="hljs-comment">overflowToDisk:是否保存到磁盘，当系统当机时</span><br><span class="hljs-comment">timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当</span><br><span class="hljs-comment">eternal=false对象不是永久有效时使用，可选属性，默认值是 0 ，也就是可闲置时间无穷大。</span><br><span class="hljs-comment">timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span><br><span class="hljs-comment">diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span><br><span class="hljs-comment">diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="hljs-comment">diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是 120 秒。</span><br><span class="hljs-comment">memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="hljs-comment">clearOnFlush：内存数量最大时是否清除。</span><br><span class="hljs-comment">memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。FIFO，first in first out，这个是大家最熟的，先进先出。LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="hljs-comment">--&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夜爬泰山Vlog</title>
    <link href="/2022/06/05/%E5%A4%9C%E7%88%AC%E6%B3%B0%E5%B1%B1Vlog/"/>
    <url>/2022/06/05/%E5%A4%9C%E7%88%AC%E6%B3%B0%E5%B1%B1Vlog/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4a67bf616dfd68f3c3a14942c14baa07bb55c273befde0ac64fa513bc98e9f28"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2022六月刷题日记</title>
    <link href="/2022/06/01/LeetCode%202022%E5%85%AD%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/06/01/LeetCode%202022%E5%85%AD%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="LC-473-火柴拼正方形"><a href="#LC-473-火柴拼正方形" class="headerlink" title="LC 473.火柴拼正方形"></a>LC 473.火柴拼正方形</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>你将得到一个整数数组 matchsticks ，其中 matchsticks[i] 是第 i 个火柴棒的长度。你要用 所有的火柴棍 拼成一个正方形。你 不能折断 任何一根火柴棒，但你可以把它们连在一起，而且每根火柴棒必须 使用一次 。</p><p>如果你能使这个正方形，则返回 true ，否则返回 false 。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>LC刷了一百多道题第一次做回溯算法的题，当然要好好研究一下了🧐</p><p>从大到小sort排序函数：sort(matchsticks.rbegin(),matchsticks.rend());  //从大到小排序</p></blockquote><p><strong>回溯算法</strong></p><p>回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p><p>bilibili回溯算法笔记总结</p><ul><li>回溯算法和递归算法相辅相成，有递归就会有回溯，一般递归下面就是回溯</li><li>回溯算法是一种纯暴力搜索算法，时间复杂度一般比较高，可以通过剪枝等优化算法</li><li>回溯算法虽然是一种纯暴力搜索算法，但是可以解决多层for循环嵌套无法解决的问题</li><li>回溯算法使用题目类型：组合问题、切割问题、子集问题、排列问题、棋盘问题（N皇后问题、解数独问题）</li><li>回溯都可以抽象成树形结构，递归都有终止条件</li><li>回溯一般参数比较多</li></ul><p>待续……</p><p><strong>方法1：回溯法</strong></p><p>将正方形的四条边看做是四个高为1/4火柴总周长的桶，回溯的找出将火柴全部放入桶中，并且将四个桶都装满的方法就可以了，利用回溯搜索，递归的将所有火柴放入桶中</p><p>暴力回溯搜索法超时</p><p>需要对回溯搜索进行剪枝优化</p><p>算法优化 </p><ul><li>将火柴数量小于4 火柴总长度无法被4整除的情况排除掉</li><li>重要优化：将火柴按照从长到短的顺序排序</li></ul><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">makesquare</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; matchsticks)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = matchsticks.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">4</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            sum = sum+matchsticks[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(sum % <span class="hljs-number">4</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">sort</span>(matchsticks.<span class="hljs-built_in">rbegin</span>(),matchsticks.<span class="hljs-built_in">rend</span>());  <span class="hljs-comment">//从大到小排序</span><br>        <span class="hljs-type">int</span> bucket[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//设置桶的数组</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">0</span>,matchsticks,sum/<span class="hljs-number">4</span>,bucket);  <span class="hljs-comment">//回溯的尝试火柴的放置</span><br>    &#125;<br>    <span class="hljs-comment">//i代表正在放置的火柴下标，nums存储火柴的长度</span><br>    <span class="hljs-comment">//edge为计算好的正方形边长，bucket存储四个桶的高度</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> i,vector&lt;<span class="hljs-type">int</span>&gt;&amp; matchsticks,<span class="hljs-type">int</span> edge,<span class="hljs-type">int</span> bucket[<span class="hljs-number">4</span>])</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(i &gt;= matchsticks.<span class="hljs-built_in">size</span>())&#123;  <span class="hljs-comment">//递归终止条件 全部的火柴都放到了桶中</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">//成功的拼成了正方形 返回true</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">4</span>; j++)&#123;  <span class="hljs-comment">//遍历四个桶</span><br>            <span class="hljs-keyword">if</span>(bucket[j]+matchsticks[i] &gt; edge)&#123;  <span class="hljs-comment">//这根火柴无法放入第j个桶中</span><br>                <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//尝试下一个桶</span><br>            &#125;<br>            bucket[j] = bucket[j]+matchsticks[i];  <span class="hljs-comment">//nums[i]放入桶j</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">backtrack</span>(i+<span class="hljs-number">1</span>,matchsticks,edge,bucket))&#123;  <span class="hljs-comment">//递归的放置下一根火柴</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">//下一根火柴放置成功则直接返回true</span><br>            &#125;<br>            bucket[j] = bucket[j]-matchsticks[i];  <span class="hljs-comment">//将nums[i]从桶j中拿出</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">//nums[i]无法放入任何一个桶 函数返回false</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>bilibili视频讲解：<a href="https://www.bilibili.com/video/BV1D5411j7UE?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1D5411j7UE?spm_id_from=333.337.search-card.all.click</a></p><p><strong>方法2：状态压缩+动态规划</strong></p><p>好像很难的样子 应该不是我目前能理解的 先搞懂比较基础的回溯算法吧</p><h2 id="LC-450-删除二叉搜索树中的节点"><a href="#LC-450-删除二叉搜索树中的节点" class="headerlink" title="LC 450.删除二叉搜索树中的节点"></a>LC 450.删除二叉搜索树中的节点</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><ol><li>首先找到需要删除的节点；</li><li>如果找到了，删除它。</li></ol><p><img src="https://img.yiqiangshiyia.cn/blog/del_node_1.jpg" alt="del_node_1"></p><blockquote><p>输入：root = [5,3,6,2,4,null,7], key = 3<br>输出：[5,4,6,2,null,null,7]<br>解释：给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。<br>一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。<br>另一个正确答案是 [5,2,6,null,4,null,7]。</p></blockquote><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><blockquote><p>二叉搜索树有以下性质：</p><ul><li>左子树的所有节点（如果有）的值均小于当前节点的值</li><li>右子树的所有节点（如果有）的值均大于当前节点的值</li><li>左子树和右子树均为二叉搜索树</li><li>二叉搜索树的中序遍历有序</li></ul><p>二叉搜索树的题目往往可以用递归来解决，本题 LC难度：中等，核心思想：分类讨论删除不同位置处的节点如何保持二叉树的性质</p></blockquote><p>核心思想：分类讨论删除不同位置处的节点如何保持二叉树的性质，思路很简单，两张图就能明白了</p><p>删除节点后，若删除节点的左右子树均不为空，则要保持二叉搜索树的性质有两种答案</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220607205952.png" alt="方式1"></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220607202437.png" alt="方式2"></p><p><strong>方法1：递归</strong></p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">deleteNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-keyword">if</span>(root-&gt;val &gt; key)&#123;<br>            root-&gt;left = <span class="hljs-built_in">deleteNode</span>(root-&gt;left,key);<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root-&gt;val &lt; key)&#123;<br>            root-&gt;right = <span class="hljs-built_in">deleteNode</span>(root-&gt;right,key);<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root-&gt;val == key)&#123;<br>            <span class="hljs-keyword">if</span>(root-&gt;left == <span class="hljs-literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(root-&gt;left == <span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">return</span> root-&gt;right;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(root-&gt;right == <span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">return</span> root-&gt;left;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(root-&gt;left &amp;&amp; root-&gt;right)&#123;<br>                TreeNode* node = root-&gt;right;<br>                <span class="hljs-keyword">while</span>(node-&gt;left)&#123;<br>                    node = node-&gt;left;<br>                &#125;<br>                root-&gt;right = <span class="hljs-built_in">deleteNode</span>(root-&gt;right,node-&gt;val);<br>                node-&gt;left = root-&gt;left;<br>                node-&gt;right = root-&gt;right;<br>                <span class="hljs-keyword">return</span> node;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2：迭代</strong></p><blockquote><p>迭代法我没看懂在干什么😅</p></blockquote><p>官解思路：方法一的递归深度最多为 n，而大部分是由寻找值为 key 的节点贡献的，而寻找节点这一部分可以用迭代来优化。寻找并删除 successor 时，也可以用一个变量保存它的父节点，从而可以节省一步递归操作。</p><p>官解AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">deleteNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> key)</span> </span>&#123;<br>        TreeNode *cur = root, *curParent = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">while</span> (cur &amp;&amp; cur-&gt;val != key) &#123;<br>            curParent = cur;<br>            <span class="hljs-keyword">if</span> (cur-&gt;val &gt; key) &#123;<br>                cur = cur-&gt;left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur = cur-&gt;right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!cur) &#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!cur-&gt;left &amp;&amp; !cur-&gt;right) &#123;<br>            cur = <span class="hljs-literal">nullptr</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!cur-&gt;right) &#123;<br>            cur = cur-&gt;left;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!cur-&gt;left) &#123;<br>            cur = cur-&gt;right;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            TreeNode *successor = cur-&gt;right, *successorParent = cur;<br>            <span class="hljs-keyword">while</span> (successor-&gt;left) &#123;<br>                successorParent = successor;<br>                successor = successor-&gt;left;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (successorParent-&gt;val == cur-&gt;val) &#123;<br>                successorParent-&gt;right = successor-&gt;right;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                successorParent-&gt;left = successor-&gt;right;<br>            &#125;<br>            successor-&gt;right = cur-&gt;right;<br>            successor-&gt;left = cur-&gt;left;<br>            cur = successor;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!curParent) &#123;<br>            <span class="hljs-keyword">return</span> cur;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (curParent-&gt;left &amp;&amp; curParent-&gt;left-&gt;val == key) &#123;<br>                curParent-&gt;left = cur;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                curParent-&gt;right = cur;<br>            &#125;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="剑指OfferII-091-粉刷房子"><a href="#剑指OfferII-091-粉刷房子" class="headerlink" title="剑指OfferII 091.粉刷房子"></a>剑指OfferII 091.粉刷房子</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。</p><p>当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的正整数矩阵 costs 来表示的。</p><p>例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。</p><p>请计算出粉刷完所有房子最少的花费成本。</p><p>示例 1：</p><blockquote><p>输入: costs = [[17,2,17],[16,16,5],[14,3,19]]<br>输出: 10<br>解释: 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。<br>  最少花费: 2 + 5 + 3 = 10。</p></blockquote><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>很经典的一道动态规划题目</p><p><strong>方法1：动态规划</strong></p><p>每个房子可以被粉刷成三种颜色中的一种，需要计算在满足相邻房子的颜色不同的情况下粉刷所有房子的最小花费成本。由于当已知粉刷前 i 个房子的最小花费成本时，根据粉刷第 i + 1 号房子的花费成本可以计算粉刷前 i+1 个房子的最小花费成本，因此可以使用动态规划计算最小花费成本。</p><p>由于每个房子可以被粉刷成三种颜色中的一种，因此需要分别考虑粉刷成三种颜色时的最小花费成本。</p><p>用 dp[i][j] 表示粉刷第 0 号房子到第 i 号房子且第 i 号房子被粉刷成第 j 种颜色时的最小花费成本。由于一共有 n 个房子和 3 种颜色，因此 0≤i&lt;n，0≤j&lt;3。</p><p><strong>边界条件是：对于任意 0≤j&lt;3，dp[0][j]=costs[0][j]。</strong></p><p><strong>状态转移方程：</strong></p><p>dp[i][0] = min(dp[i-1][1],dp[i-1][2]) + costs[i][0]</p><p>dp[i][1] = min(dp[i-1][0],dp[i-1][2]) + costs[i][1]</p><p>dp[i][2] = min(dp[i-1][0],dp[i-1][1]) + costs[i][2]</p><p><strong>合并后的状态转移方程：</strong></p><p>dp[i][j] = min(dp[i-1][(j+1)%3],dp[i-1][(j+2)%3]) + costs[i][j];</p><p>dp[n−1] 中的最小值即为粉刷所有房子的最小花费成本。</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCost</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; costs)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = costs.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> dp[n][<span class="hljs-number">3</span>];<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = costs[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = costs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = costs[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">3</span>; j++)&#123;<br>                dp[i][j] = <span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][(j+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>],dp[i<span class="hljs-number">-1</span>][(j+<span class="hljs-number">2</span>)%<span class="hljs-number">3</span>]) + costs[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]),dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>二叉树</tag>
      
      <tag>二叉搜索树</tag>
      
      <tag>回溯</tag>
      
      <tag>剑指OfferII</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟彻底搞懂动态规划算法</title>
    <link href="/2022/05/26/10%E5%88%86%E9%92%9F%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/"/>
    <url>/2022/05/26/10%E5%88%86%E9%92%9F%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><blockquote><p>今天无意中在Bilibili上看到了一个up主讲动态规划算法的视频，动态规划的算法的题一般都比较难理解做的也比较少，所以就看了一下这个视频，看完之后讲的也太妙了吧！深入浅出了属于是，让我更好的理解了动态规划算法，我直接投币+三连好吧😂。视频中举了一个比较经典的动态规划问题，最长子序列问题，也就是LC上的第300题：<a href="https://leetcode.cn/problems/longest-increasing-subsequence/">最长递增子序列</a>，LC难度为中等，学到了很多东西记录一下题解吧。</p></blockquote><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220526165818.png" alt="QQ截图20220526165818"></p><p>附上链接：<a href="https://www.bilibili.com/video/BV1AB4y1w7eT/?spm_id_from=333.788.recommend_more_video.1">https://www.bilibili.com/video/BV1AB4y1w7eT/?spm_id_from=333.788.recommend_more_video.1</a></p><h2 id="LeetCode-300：最长递增子序列"><a href="#LeetCode-300：最长递增子序列" class="headerlink" title="LeetCode 300：最长递增子序列"></a>LeetCode 300：最长递增子序列</h2><h3 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h3><p>动态规划正是通过避免了重复节点的计算，来加速整个计算的过程</p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>方法1：穷举法/暴力搜索</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220526193003.png" alt="QQ截图20220526193003"></p><p>这个算法虽然可以算出答案，但是最大的问题在于时间复杂度，指数级别的算法，最慢的算法之一。之所以时间复杂度高代码超时是因为在递归的时候存在大量重复计算，因此时间复杂度特别高。</p><p>超时代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">L</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; nums,<span class="hljs-type">int</span> i)</span>  <span class="hljs-comment">//定义L函数，表示从nums的第i个数开始遍历的最长递增子序列</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(i == nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> maxlen = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;nums.<span class="hljs-built_in">size</span>(); j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[j] &gt; nums[i])<br>            &#123;<br>                maxlen = <span class="hljs-built_in">max</span>(maxlen,<span class="hljs-built_in">L</span>(nums,j)+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxlen;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            ans = <span class="hljs-built_in">max</span>(ans,<span class="hljs-built_in">L</span>(nums,i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2：记忆化搜索/剪枝</strong></p><p>为了避免重复计算，我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不再需要重复计算了，直接将之前的结果返回。</p><p>对暴力求解的代码进行改进，用哈希表保存计算过的节点，但是我也不知道为什么改进之后代码还是超时🤣</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">L</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; nums,<span class="hljs-type">int</span> i)</span>  <span class="hljs-comment">//定义L函数，表示从nums的第i个数开始遍历的最长递增子序列</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">count</span>(i))<br>        &#123;<br>            <span class="hljs-keyword">return</span> mp[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i == nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> maxlen = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;nums.<span class="hljs-built_in">size</span>(); j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[j] &gt; nums[i])<br>            &#123;<br>                maxlen = <span class="hljs-built_in">max</span>(maxlen,<span class="hljs-built_in">L</span>(nums,j)+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        mp[i] = maxlen;<br>        <span class="hljs-keyword">return</span> maxlen;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            ans = <span class="hljs-built_in">max</span>(ans,<span class="hljs-built_in">L</span>(nums,i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>动态规划正是通过避免了重复节点的计算，来加速整个计算的过程，由于用到了字典/哈希表保存了计算的中间结果，因此我们也称之为记忆化搜索，因此动态规划是空间换时间的一种算法，动态规划也可以叫带备忘录的递归或者递归树的剪枝。</p><p><strong>LC官方题解的递归算法</strong></p><p>待续……</p><p><strong>方法3：改写成迭代形式</strong></p><p>有了递归的算法还可以将其改写成非递归的算法或者迭代，改写成迭代可以更加直观的分析算法的时间复杂度并且避免了递归时的函数调用开销。</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220526202358.png" alt="QQ截图20220526202358"></p><p>从公式中可以发现，我们只要从后往前依次计算就可以把答案推算出来，迭代的方法很像数学归纳法，根据列出的式子实现迭代算法。</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(n,<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;n; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[j] &gt; nums[i])<br>                &#123;<br>                    ans[i] = <span class="hljs-built_in">max</span>(ans[i],ans[j]+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> max_ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;ans.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            max_ans = <span class="hljs-built_in">max</span>(max_ans,ans[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> max_ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表归纳总结</title>
    <link href="/2022/05/22/%E9%93%BE%E8%A1%A8%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    <url>/2022/05/22/%E9%93%BE%E8%A1%A8%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h3><p> 链表是一种物理存储结构上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p><p><img src="https://img.yiqiangshiyia.cn/blog/1774269-20191111002101989-1257105196.jpg" alt="img"></p><h3 id="链表的优缺点"><a href="#链表的优缺点" class="headerlink" title="链表的优缺点"></a>链表的优缺点</h3><p>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p><p>链表是一种插入和删除都比较快的数据结构，缺点是查找比较慢。除非需要频繁的通过下标来随机访问数据，否则在很多使用数组的地方都可以用链表代替。</p><h2 id="LC-206-反转链表"><a href="#LC-206-反转链表" class="headerlink" title="LC 206.反转链表"></a>LC 206.反转链表</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。  </p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* pre = <span class="hljs-literal">nullptr</span>;  <span class="hljs-comment">//定义一个当前节点的前一个节点 初始化为空</span><br>        ListNode* cur = head;  <span class="hljs-comment">//定义一个当前节点 初始化为头结点</span><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">nullptr</span>)  <span class="hljs-comment">//当前节点不为空</span><br>        &#123;<br>            ListNode* tmp = cur-&gt;next;  <span class="hljs-comment">//定义一个tmp结点 用于保存当前节点的后序节点</span><br>            cur-&gt;next = pre;  <span class="hljs-comment">//反转链表 让cur节点指向pre节点</span><br>            pre = cur;  <span class="hljs-comment">//前序节点后移一位</span><br>            cur = tmp;  <span class="hljs-comment">//当前节点后移一位</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;  <span class="hljs-comment">//返回新链表指向的头结点</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>B站反转链表讲解：<a href="https://www.bilibili.com/video/BV1KZ4y157Up/?spm_id_from=333.788">https://www.bilibili.com/video/BV1KZ4y157Up/?spm_id_from=333.788</a></p><p> </p><h2 id="LC-21-合并两个有序链表"><a href="#LC-21-合并两个有序链表" class="headerlink" title="LC 21.合并两个有序链表"></a>LC 21.合并两个有序链表</h2><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>只会迭代法 递归法有点复杂  </p><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  </p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* preHead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);  <span class="hljs-comment">//定义哨兵节点preHead</span><br>        ListNode* prev = preHead;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">nullptr</span> &amp;&amp; l2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;<br>                prev-&gt;next = l1;<br>                l1 = l1-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev-&gt;next = l2;<br>                l2 = l2-&gt;next;<br>            &#125;<br>            prev = prev-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span><br>        prev-&gt;next = l1 == <span class="hljs-literal">nullptr</span> ? l2 : l1;<br>        <span class="hljs-keyword">return</span> preHead-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>LeetCode题解合并两个有序链表动画演示非常nice！ </p><p>LeetCode题解：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/he-bing-liang-ge-you-xu-lian-biao-by-leetcode-solu/">https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/he-bing-liang-ge-you-xu-lian-biao-by-leetcode-solu/</a>  </p><h2 id="LC-203-移除链表元素"><a href="#LC-203-移除链表元素" class="headerlink" title="LC 203.移除链表元素"></a>LC 203.移除链表元素</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val  的节点,并返回新的头结点。  </p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p><strong>方法1：迭代法</strong> </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeElements</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-comment">//由于链表头结点Head可能需要被删除 创建哑结点preHead 令pre-&gt;next = head</span><br>        ListNode* preHead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        ListNode* tmp = preHead;  <span class="hljs-comment">//定义当前节点 初始化为preHead</span><br>        <span class="hljs-keyword">while</span>(tmp-&gt;next != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(tmp-&gt;next-&gt;val == val)<br>            &#123;<br>                tmp-&gt;next = tmp-&gt;next-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                tmp = tmp-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> preHead-&gt;next;  <span class="hljs-comment">//返回删除操作后的头结点</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-82-删除排序链表中的重复元素-II"><a href="#LC-82-删除排序链表中的重复元素-II" class="headerlink" title="LC 82.删除排序链表中的重复元素 II"></a>LC 82.删除排序链表中的重复元素 II</h2><h3 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h3><p>经典面试题，力扣难度：中等</p><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);  <span class="hljs-comment">//定义哑结点，因为头结点可能会被删除</span><br>        ListNode* cur = dummy;<br>        <span class="hljs-keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next)&#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val)&#123;<br>                <span class="hljs-type">int</span> x = cur-&gt;next-&gt;val;<br>                <span class="hljs-keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val == x)&#123;<br>                    cur-&gt;next = cur-&gt;next-&gt;next;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur = cur-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-2-两数相加"><a href="#LC-2-两数相加" class="headerlink" title="LC 2.两数相加"></a>LC 2.两数相加</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><img src="https://img.yiqiangshiyia.cn/blog/addtwonumber1.jpg" alt="img"></p><blockquote><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.</p></blockquote><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>力扣难度：中等 题目大致思路：模拟链表 注意进位即可</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);  <span class="hljs-comment">//定义链表头结点</span><br>        ListNode* cur = head;  <span class="hljs-comment">//定义节点cur指向链表头结点head</span><br>        <span class="hljs-type">int</span> add = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-literal">nullptr</span> || l2 != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> n1 = l1 ? l1-&gt;val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> n2 = l2 ? l2-&gt;val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> sum = n1+n2+add;<br>            cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum%<span class="hljs-number">10</span>);<br>            cur = cur-&gt;next;<br>            add = sum/<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span>(l1)  l1 = l1-&gt;next;<br>            <span class="hljs-keyword">if</span>(l2)  l2 = l2-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(add &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(add);<br>        &#125;<br>        <span class="hljs-keyword">return</span> head-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-142-环形链表"><a href="#LC-142-环形链表" class="headerlink" title="LC 142.环形链表"></a>LC 142.环形链表</h2><h3 id="Note-2"><a href="#Note-2" class="headerlink" title="Note"></a>Note</h3><p>解决环形链表问题的两种方法：</p><ul><li>哈希表</li><li>快慢指针</li></ul><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">https://leetcode.cn/problems/linked-list-cycle-ii/</a></p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p><strong>方法1：哈希表</strong></p><p>一个非常直观的思路是：我们遍历链表中的每个节点，并将它记录下来；一旦遇到了此前遍历过的节点，就可以判定链表中存在环。借助哈希表可以很方便地实现。</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        unordered_set&lt;ListNode*&gt; seen;<br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(seen.<span class="hljs-built_in">count</span>(head))<br>            &#123;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            seen.<span class="hljs-built_in">insert</span>(head);<br>            head = head-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2：快慢指针</strong></p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode-solution/">https://leetcode.cn/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode-solution/</a></p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode *slow = head, *fast = head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">nullptr</span>) &#123;<br>            slow = slow-&gt;next;<br>            <span class="hljs-keyword">if</span> (fast-&gt;next == <span class="hljs-literal">nullptr</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>            &#125;<br>            fast = fast-&gt;next-&gt;next;<br>            <span class="hljs-keyword">if</span> (fast == slow) &#123;<br>                ListNode *ptr = head;<br>                <span class="hljs-keyword">while</span> (ptr != slow) &#123;<br>                    ptr = ptr-&gt;next;<br>                    slow = slow-&gt;next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> ptr;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树问题有关的深度优先搜索</title>
    <link href="/2022/05/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%97%AE%E9%A2%98%E6%9C%89%E5%85%B3%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2022/05/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%97%AE%E9%A2%98%E6%9C%89%E5%85%B3%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉树问题有关的深度优先搜索"><a href="#二叉树问题有关的深度优先搜索" class="headerlink" title="二叉树问题有关的深度优先搜索"></a>二叉树问题有关的深度优先搜索</h2><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>跟着Bilibili上别人总结的一些算法刷题模板和思路总结来刷题效率要高很多！Bilibili上有很多优质的算法视频同一类型的题目都放在一起讲，总结的也非常nice！🧐</p><h3 id="算法应用场景"><a href="#算法应用场景" class="headerlink" title="算法应用场景"></a>算法应用场景</h3><blockquote><p>深度优先搜索算法（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次.</p></blockquote><ul><li>二叉树有关的问题</li><li>需要从根节点遍历到末尾叶子节点</li></ul><p>常见题型</p><p>满足（最大，最小，某种要求）的深度、路径、节点和……</p><h3 id="DFS思路"><a href="#DFS思路" class="headerlink" title="DFS思路"></a>DFS思路</h3><ol><li><p><strong>创建结果存储变量，初始化当前结果</strong></p></li><li><p><strong>设计递归函数</strong></p><p>函数执行过程：</p><ul><li>若到达结尾，则返回</li><li>若未到达结尾，则更新当前结果</li><li>若到达末尾叶子节点，进行最优结果更新</li><li>分别对当前节点的左/右叶子节点调用递归函数</li></ul></li><li><p><strong>开始调用递归函数</strong></p></li></ol><p>DFS代码模板（JS版）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dfsTemplate</span>(<span class="hljs-params">root</span>) &#123;<br>    <span class="hljs-comment">//存储最终结果</span><br>    <span class="hljs-keyword">let</span> res;<br>    <span class="hljs-comment">//初始化当前结果</span><br>    <span class="hljs-keyword">let</span> start;<br>    <span class="hljs-comment">//构造递归函数dfs,通常参数为当前节点和当前结果</span><br>    <span class="hljs-keyword">let</span> dfs = <span class="hljs-keyword">function</span> (<span class="hljs-params">node, currentResult</span>) &#123;<br>        <span class="hljs-comment">//终止条件返回判断</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//更新当前结果currentResult</span><br><br>        <span class="hljs-comment">//若到达末尾叶子结点，进行最优结果更新</span><br>        <span class="hljs-keyword">if</span> (node.<span class="hljs-property">left</span> == <span class="hljs-literal">null</span> &amp;&amp; node.<span class="hljs-property">right</span> == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//update res</span><br>        &#125;<br>        <span class="hljs-comment">//左右子树递归</span><br>        <span class="hljs-title function_">dfs</span>(node.<span class="hljs-property">left</span>, currentResult);<br>        <span class="hljs-title function_">dfs</span>(node.<span class="hljs-property">right</span>, currentResult);<br>    &#125;<br>    <span class="hljs-title function_">dfs</span>(root, start);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关题目：</p><ul><li>LeetCode 104：二叉树的最大深度</li><li>LeetCode 111：二叉树的最小深度</li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-JDBC</title>
    <link href="/2022/05/16/Java-JDBC/"/>
    <url>/2022/05/16/Java-JDBC/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC与MySQL数据库"><a href="#JDBC与MySQL数据库" class="headerlink" title="JDBC与MySQL数据库"></a>JDBC与MySQL数据库</h1><h2 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1 | JDBC"></a>1 | JDBC</h2><h3 id="JDBC（Java-DataBase-Connectivity）"><a href="#JDBC（Java-DataBase-Connectivity）" class="headerlink" title="JDBC（Java DataBase Connectivity）"></a>JDBC（Java DataBase Connectivity）</h3><ul><li>是用于执行SQL语句的Java应用程序接口，由一组用Java语言编写的类与接口 组成，是一种底层API</li><li>使开发人员可以用纯Java语言编写完整的数据库应用程序</li><li>用JDBC写的程序能够自动地将SQL语句传送给几乎任何一种数据库管理系统 （DBMS）</li><li>是一种规范，它让各数据库厂商为Java程序员提供标准的数据库访问类和接口 ，这样就使得独立于DBMS的Java应用开发工具和产品成为可能</li><li>隔离了Java与不同数据库之间的对话，使得程序员只须写一遍程序就可让它在任何数据库管理系统平台上运</li><li>使用已有的SQL标准，并支持其它数据库连接标准，如与ODBC之间的桥接</li></ul><p><strong>使用 JDBC可以进行如下的操作</strong> </p><ul><li>与一个数据库建立连接</li><li>向已连接的数据库发送SQL语句 </li><li>处理SQL语句返回的结果值</li></ul><h3 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h3><ul><li>是一组由Java语言编写的类和接口，包含在java.sql和javax.sql两个包中<ul><li>java.sql为核心包，这个包包含于J2SE中</li><li>javax.sql包扩展了JDBC API的功能，成为了J2EE的一个基本组成部分</li></ul></li><li>可分为两个层次<ul><li>面向底层的JDBC Driver API：主要是针对数据库厂商开发数据库底层驱动程序使用</li><li>面向程序员的JDBC API</li></ul></li></ul><p><img src="http://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220517130904.png" alt="应用程序通过JDBC API和底层的JDBC Driver API打交道"></p><h3 id="ODBC（-Open-Database-Connectivity-）"><a href="#ODBC（-Open-Database-Connectivity-）" class="headerlink" title="ODBC（ Open Database Connectivity ）"></a>ODBC（ Open Database Connectivity ）</h3><ul><li>由微软公司提出，用于在数据库管理系统(DBMS)中存取数据</li><li>是一套用C语言实现的访问数据库的API</li><li>通过ODBC API，应用程序可以存取保存在多种不同数据库管理系统（DBMS） 中的数据，而不论每个DBMS使用了何种数据存储格式和编程接口</li><li>对于没有提供JDBC驱动的数据库，从Java程序调用本地的C程序访问数据库会 带来一系列安全性、完整性、健壮性等方面的问题，因而通过JDBC-ODBC桥 来访问没有提供JDBC接口的数据库是一个常用的方案</li></ul><h2 id="2-JDBC-API中重要的接口和类"><a href="#2-JDBC-API中重要的接口和类" class="headerlink" title="2 | JDBC API中重要的接口和类"></a>2 | JDBC API中重要的接口和类</h2><table><thead><tr><th align="left">名称</th><th align="center">功能</th></tr></thead><tbody><tr><td align="left">DriverManager</td><td align="center">调入驱动程序</td></tr><tr><td align="left">Connection</td><td align="center">代表了对特定数据库的连接</td></tr><tr><td align="left">Statement</td><td align="center">基于Connection执行SQL语句</td></tr><tr><td align="left">PreparedStatement</td><td align="center">基于Connection执行带参数的SQL语句</td></tr><tr><td align="left">ResultSet</td><td align="center">保存查询语句得到的结果集</td></tr></tbody></table><h2 id="3-使用JDBC访问数据库的步骤"><a href="#3-使用JDBC访问数据库的步骤" class="headerlink" title="3 | 使用JDBC访问数据库的步骤"></a>3 | 使用JDBC访问数据库的步骤</h2><ul><li>设置环境，引入相应的JDBC类</li><li>选择合适的JDBC驱动程序并加载</li><li>分配一个Connection对象</li><li>分配一个Statement对象</li><li>用该Statement对象进行查询等操作</li><li>若查询则从返回的ResultSet对象中获取数据</li><li>关闭连接</li></ul><h2 id="4-通过JDBC-ODBC访问数据库"><a href="#4-通过JDBC-ODBC访问数据库" class="headerlink" title="4 | 通过JDBC-ODBC访问数据库"></a>4 | 通过JDBC-ODBC访问数据库</h2><ol><li><h3 id="设置环境，引入相应的JDBC类"><a href="#设置环境，引入相应的JDBC类" class="headerlink" title="设置环境，引入相应的JDBC类"></a><strong>设置环境，引入相应的JDBC类</strong></h3><p>在Java程序中引入相应的类和包。访问数据库使用的JDBC API在 java.sql包中，因此需要将该包引入程序。 import java.sql.*;</p></li><li><h3 id="选择DBMS驱动程序"><a href="#选择DBMS驱动程序" class="headerlink" title="选择DBMS驱动程序"></a><strong>选择DBMS驱动程序</strong></h3><ul><li><p>用Class.forName方法显式装载驱动程序</p><p>Class.forName(“com.mysql.cj.jdbc.Driver”);</p></li><li><p>执行后自动创建一个驱动器类的实例，并自动调用驱动器管理器DriverManager类中的RegisterDriver方法来注册它</p></li><li><p>需要注意的是，如果驱动器类有可能不存在，使用此方法就可能会抛出 ClassNotFoundException异常，因此需要捕获这个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="创建一个Connection对象连接到数据库"><a href="#创建一个Connection对象连接到数据库" class="headerlink" title="创建一个Connection对象连接到数据库"></a>创建一个Connection对象连接到数据库</h3><ul><li><p>Connection对象代表了与指定数据库的连接，可以调用 DriverManager.getConnection()方法创建，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,username,password);<br></code></pre></td></tr></table></figure></li><li><p>DriverManager类位于JDBC的管理层，作用于用户和驱动程序之间。它负责跟 踪在一个系统中所有可用的JDBC驱动程序，并在数据库和相应驱动程序之间 建立连接</p></li></ul></li><li><h3 id="创建一个Statement对象执行SQL语句"><a href="#创建一个Statement对象执行SQL语句" class="headerlink" title="创建一个Statement对象执行SQL语句"></a>创建一个Statement对象执行SQL语句</h3><p>建立数据库的连接后，就可以对数据库进行操作了，一般包括三个步骤：</p><ul><li>使用Connection对象创建Statement对象</li><li>使用Statement对象执行SQL命令</li><li>从上一步骤返回的ResultSet对象中提取执行结果</li></ul><p><strong>Connection类有3个方法可用来创建向数据库发送SQL语句的 Statement对象：</strong></p><ul><li>createStatement：创建向数据库发送SQL语句的Statement对象，用于简单的SQL语句 Statement stmt = conn.createStatement();</li><li>prepareStatement：创建向数据库发送SQL语句的PreparedStatement对象，用于带有一个或多个参数的SQL 语句。在SQL语句执行前，这些参数将被赋值</li><li>prepareCall：创建向数据库发送SQL语句的CallableStatement对象，用于调用数据库中的存储过程</li></ul></li><li><h3 id="使用Statement对象执行语句"><a href="#使用Statement对象执行语句" class="headerlink" title="使用Statement对象执行语句"></a>使用Statement对象执行语句</h3><p><strong>Statement 对象提供了三种执行 SQL 语句的方法，使用哪一个方法由 SQL 语 句所产生的内容决定</strong></p><ul><li><p>executeQuery：用于产生单个结果集的语句，例如 SELECT 语句 ResultSet rs = stmt.executeQuery(“select * from user”);</p></li><li><p>executeUpdate：用于执行 INSERT、UPDATE 或 DELETE 语句，以及 CREATE TABLE stmt.executeUpdate(“DELETE FROM Person WHERE Name=’李四’”);</p><p>返回值是一个整数，表示受影响的行数（即更新计数），比如修改了多少行、删除了多少行等。对 于 CREATE TABLE 等语句，因不涉及到行的操作，所以executeUpdate的返回值总为零</p></li><li><p>Execute：用于执行返回多个结果集（ResultSet 对象）、多个更新计数或二者组合的语句。例如执行某个已存 储过程或动态执行SQL，这时有可能出现多个结果的情</p></li></ul></li><li><h3 id="从返回的ResultSet对象中获取相应的数据"><a href="#从返回的ResultSet对象中获取相应的数据" class="headerlink" title="从返回的ResultSet对象中获取相应的数据"></a>从返回的ResultSet对象中获取相应的数据</h3><p>ResultSet中的内容类似二维表格，是以“流”的方式按行访问的</p><ul><li><p>使用next()方法访问行：ResultSet中有一个游标，指向当前访问的 行；方法next的功能是将游标下移一行。即：每次调用next方法后， 游标会自动下移一行。</p></li><li><p>使用get类型()方法访问列：使用相应类型的getXXX()方法可以从当 前行指定列中提取不同类型的数据。例如：提取文本类型数据时就 要用getString方法</p></li><li><p>允许使用列名或列序号作为方法的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> rs.getString(“name”);<span class="hljs-comment">//提取name列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-number">2</span>); <span class="hljs-comment">//提取第2列</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a><strong>关闭连接</strong></h3><p>数据库连接资源是宝贵的，应当在操作数据库后及时释放。</p><ul><li>stat.close(); //关闭语句</li><li>conn.close(); //关闭连接</li></ul></li></ol><p>通过JDBC-ODBC访问数据库实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*; <span class="hljs-comment">//①引入JDBC类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException,SQLException &#123;<br><span class="hljs-comment">//②加载驱动</span><br>Class.forName(<span class="hljs-string">&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;</span>); <br><span class="hljs-comment">//③创建连接</span><br>Connection conn=DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:odbc:StudentDB&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>); <br><span class="hljs-comment">//④创建Statment对象</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> conn.createStatement(); <br><span class="hljs-comment">//⑤执行SQL语句</span><br>stat.executeUpdate(<span class="hljs-string">&quot;insert into Students(id,name,age) values (&#x27;1&#x27;,&#x27;张三&#x27;,&#x27;16&#x27;)&quot;</span>);<br>stat.executeUpdate(<span class="hljs-string">&quot;insert into Students(id,name,age) values (&#x27;2&#x27;,&#x27;李四&#x27;,&#x27;16&#x27;)&quot;</span>);<br>stat.executeUpdate(<span class="hljs-string">&quot;insert into Students(id,name,age) values (&#x27;3&#x27;,&#x27;王五&#x27;,&#x27;16&#x27;)&quot;</span>);<br>stat.executeUpdate(<span class="hljs-string">&quot;DELETE FROM students WHERE name=&#x27;李四&#x27;&quot;</span>);<br>stat.executeUpdate(<span class="hljs-string">&quot;update students set age=&#x27;20&#x27; WHERE name=&#x27;王五&#x27;&quot;</span>);<br><span class="hljs-comment">//⑥SQL查询</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stat.executeQuery(<span class="hljs-string">&quot;select id,name from students order by id&quot;</span>);<br><span class="hljs-comment">//遍历ResultSet</span><br><span class="hljs-keyword">while</span> (rs.next())<br>&#123;<br>System.out.println(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>)+ <span class="hljs-string">&quot; &quot;</span> + rs.getString(<span class="hljs-number">2</span>));<br>&#125;<br><span class="hljs-comment">//⑦关闭连接</span><br>stat.close();<br>conn.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-用纯JDBC驱动程序访问数据库"><a href="#5-用纯JDBC驱动程序访问数据库" class="headerlink" title="5 | 用纯JDBC驱动程序访问数据库"></a>5 | 用纯JDBC驱动程序访问数据库</h2><ol><li><h3 id="引入JDBC类"><a href="#引入JDBC类" class="headerlink" title="引入JDBC类"></a>引入JDBC类</h3><p>在Java程序中引入相应的类和包。访问数据库使用的JDBC API在 java.sql包中，因此需要将该包引入程序。 import java.sql.*;</p></li><li><h3 id="加载DBMS驱动程序"><a href="#加载DBMS驱动程序" class="headerlink" title="加载DBMS驱动程序"></a>加载DBMS驱动程序</h3><ul><li><p>到数据库官网下载对应版本的数据库驱动程序包。</p></li><li><p>用Class.forName方法显式装载驱动程序</p><p>比如，Class.forName(“com.mysql.cj.jdbc.Driver”); </p><p>Class.forName(“oracle.jdbc.driver.OracleDriver”);</p></li></ul></li><li><h3 id="创建一个Connection对象连接到数据库-1"><a href="#创建一个Connection对象连接到数据库-1" class="headerlink" title="创建一个Connection对象连接到数据库"></a>创建一个Connection对象连接到数据库</h3><p>调用DriverManager.getConnection()方法创建Connection对象</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(“jdbc:mysql:<span class="hljs-comment">//localhost:3306/</span><br>mydata?user=root&amp;password=<span class="hljs-number">123</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC”);<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection<br>(<span class="hljs-string">&quot;jdbc:oracle:thin:@192.168.1.102:1521:orcl&quot;</span>, <span class="hljs-string">&quot;spring&quot;</span>, <span class="hljs-string">&quot;spring&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><h3 id="创建一个Statement对象执行SQL语句-1"><a href="#创建一个Statement对象执行SQL语句-1" class="headerlink" title="创建一个Statement对象执行SQL语句"></a>创建一个Statement对象执行SQL语句</h3><p>建立数据库的连接后，就可以对数据库进行操作了，一般包括三个步骤：</p><ul><li>使用Connection对象创建Statement对象</li><li>使用Statement对象执行SQL命令</li><li>从上一步骤返回的ResultSet对象中提取执行结果</li></ul><p><strong>Connection类有3个方法可用来创建向数据库发送SQL语句的 Statement对象：</strong></p><ul><li>createStatement：创建向数据库发送SQL语句的Statement对象，用于简单的SQL语句 Statement stmt = conn.createStatement();</li><li>prepareStatement：创建向数据库发送SQL语句的PreparedStatement对象，用于带有一个或多个参数的SQL 语句。在SQL语句执行前，这些参数将被赋值</li><li>prepareCall：创建向数据库发送SQL语句的CallableStatement对象，用于调用数据库中的存储过程</li></ul></li><li><h3 id="使用Statement对象执行语句-1"><a href="#使用Statement对象执行语句-1" class="headerlink" title="使用Statement对象执行语句"></a>使用Statement对象执行语句</h3><p><strong>Statement 对象提供了三种执行 SQL 语句的方法，使用哪一个方法由 SQL 语 句所产生的内容决定</strong></p><ul><li><p>executeQuery：用于产生单个结果集的语句，例如 SELECT 语句 ResultSet rs = stmt.executeQuery(“select * from user”);</p></li><li><p>executeUpdate：用于执行 INSERT、UPDATE 或 DELETE 语句，以及 CREATE TABLE stmt.executeUpdate(“DELETE FROM Person WHERE Name=’李四’”);</p><p>返回值是一个整数，表示受影响的行数（即更新计数），比如修改了多少行、删除了多少行等。对 于 CREATE TABLE 等语句，因不涉及到行的操作，所以executeUpdate的返回值总为零</p></li><li><p>Execute：用于执行返回多个结果集（ResultSet 对象）、多个更新计数或二者组合的语句。例如执行某个已存 储过程或动态执行SQL，这时有可能出现多个结果的情</p></li></ul></li><li><h3 id="关闭连接-1"><a href="#关闭连接-1" class="headerlink" title="关闭连接"></a><strong>关闭连接</strong></h3><p>数据库连接资源是宝贵的，应当在操作数据库后及时释放。</p><ul><li>conn.close(); //关闭连接</li></ul></li></ol><p>用纯JDBC驱动程序访问MySQL8.0数据库实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseAccess</span> &#123;<br><span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConn</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mydata?</span><br><span class="hljs-string">user=root&amp;password=123&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;          <br>Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>conn = DriverManager.getConnection(url);<br>&#125; <br><span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> conn;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getStudentInfo</span><span class="hljs-params">(String sno)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> “select * from student where sno=?<span class="hljs-string">&quot;;</span><br><span class="hljs-string">try &#123;</span><br><span class="hljs-string">Connection conn = new DatabaseAccess().getConn();</span><br><span class="hljs-string">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="hljs-string">ps.setString(1, sno);</span><br><span class="hljs-string">ResultSet rs = ps.executeQuery();</span><br><span class="hljs-string">while( rs.next())</span><br><span class="hljs-string">System.out.println(rs.getString(“sno”) +rs.getString(“sname”);</span><br><span class="hljs-string">conn.close();</span><br><span class="hljs-string">&#125; </span><br><span class="hljs-string">catch (Exception e) &#123; </span><br><span class="hljs-string">e.printStackTrace(); </span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="6-使用预处理语句"><a href="#6-使用预处理语句" class="headerlink" title="6 | 使用预处理语句"></a>6 | 使用预处理语句</h2><ul><li>使用PreparedStatement类对象的prepareStatement(String sql)方 法对SQL语句进行预编译处理，生成该数据库底层的内部命令。</li><li>该用法支持带参数的SQL语句的执行，这给SQL语句的执行带来很大 的灵活性。</li><li>使用通配符?(英文的问号)，代替数据表字段的值。需要在SQL执行之 前设置通配符代表的具体值。</li><li>设置通配符?的值的常用方法：<ul><li>void setDate(int parameterIndex, Date x);</li><li>void setDouble(int parameterIndex, double x);</li><li>void setFloat(int parameterIndex, float x);</li><li>void setInt(int parameterIndex, int x);</li><li>void setLong(int parameterIndex, long x);</li><li>void setString(int parameterIndex, String x);</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ex7_9</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>String DBDriver=<span class="hljs-string">&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;</span>;<br>String connectionStr=<span class="hljs-string">&quot;jdbc:odbc:studentDB&quot;</span>;<br>Class.forName(DBDriver);<br>Connection con=DriverManager.getConnection(connectionStr,“admin<span class="hljs-string">&quot;,“admin&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; UPDATE person SET salary=? WHERE name=? &quot;</span>; <span class="hljs-comment">//设置了2个参数</span><br>PreparedStatement pstmt=con. prepareStatement(sql) ;<br>pstmt.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">5000</span>); <span class="hljs-comment">//为第1个参数赋值，根据参数类型的不同调用不同方法</span><br>pstmt.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;张三&quot;</span>) ; <span class="hljs-comment">//为第2个参数赋值</span><br>pstmt.executeUpdate() ; <span class="hljs-comment">//执行SQL语句</span><br>con.close(); <span class="hljs-comment">//关闭连接</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-事物"><a href="#7-事物" class="headerlink" title="7 | 事物"></a>7 | 事物</h2><ul><li><p>事务由一组SQL语句组成。事务处理指应用程序保证事务中的SQL语 句要么全部执行，要么一个都不执行。</p></li><li><p>JDBC事务处理步骤：</p><ul><li>用setAutoCommit(boolean b)方法关闭自动提交模式</li><li>用commit()方法处理事务</li><li>用rollback()方法处理事务回滚</li></ul></li><li><p>setAutoCommit(boolean b) 方法：</p><p>用Connection的对象调用该方法设置提交模式</p><ul><li>先关闭自动提交模式 ： conn.setAutoCommit(false);</li><li>然后获取Statement对象st： st=conn.createStatement();</li></ul></li><li><p>commit()方法处理事务</p><p>用Connection的对象调用该方法让事务中的全部SQL语句生效 </p><ul><li>conn.commit();</li></ul></li><li><p>rollback()方法进行事务回滚</p><p>用Connection的对象调用该方法撤销事务中已经成功执行的对数据库进行更新 操作的SQL语句，将数据恢复到commit()方法执行之前的状态。</p><ul><li>conn.rollback();</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Java实现简单的区块链</title>
    <link href="/2022/05/14/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <url>/2022/05/14/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>区块链是分布式数据存储、点对点传输、共识机制、加密算法等计算机技术的新型应用模式。所谓共识机制是区块链系统中实现不同节点之间建立信任、获取权益的数学算法 。</p></blockquote><h2 id="用Java创建区块链"><a href="#用Java创建区块链" class="headerlink" title="用Java创建区块链"></a>用Java创建区块链</h2><p>实现功能</p><ul><li>有很多区块组成用来存储数据</li><li>有数字签名让你的区块链链接在一起</li><li>需要挖矿的工作量证明新的区块</li><li>可以用来检查数据是否是有效的同时是未经篡改的</li></ul><h3 id="创建区块链"><a href="#创建区块链" class="headerlink" title="创建区块链"></a>创建区块链</h3><p>区块链就是一串或者是一系列区块的集合，类似于链表的概念，每个区块都指向于后面一个区块，然后顺序的连接在一起。在区块链中的每一个区块都存放了很多很有价值的信息，区块中内容主要包括三个部分：自己的数字签名，上一个区块的数字签名，还有一切需要加密的数据（这些数据在比特币中就相当于是交易的信息，它是加密货币的本质）。每个数字签名不但证明了自己是特有的一个区块，而且指向了前一个区块的来源，让所有的区块在链条中可以串起来，而数据就是一些特定的信息，可以按照业务逻辑来保存业务数据。</p><p><img src="https://raw.githubusercontent.com/longfeizheng/longfeizheng.github.io/master/images/qukuai/qukuai01.png" alt="区块链示意图"></p><p>这里的hash指的就是数字签名</p><p>所以每一个区块不仅包含前一个区块的hash值，同时包含自身的一个hash值，自身的hash值是通过之前的hash值和数据data通过hash计算出来的。如果前一个区块的数据一旦被篡改了，那么前一个区块的hash值也会同样发生变化（因为数据也被计算在内），这样也就导致了所有后续的区块中的hash值。所以计算和比对hash值会让我们检查到当前的区块链是否是有效的，也就避免了数据被恶意篡改的可能性，因为篡改数据就会改变hash值并破坏整个区块链。</p><p><strong>定义区块链的类快</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Block</span> &#123;<br><span class="hljs-keyword">public</span> String hash;  <span class="hljs-comment">//当前区块的hash</span><br><span class="hljs-keyword">public</span> String previousHash;  <span class="hljs-comment">//前一个区块的hash</span><br><span class="hljs-keyword">private</span> String data; <span class="hljs-comment">//当前区块的数据</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> timeStamp; <br><span class="hljs-comment">//区块构造</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Block</span><span class="hljs-params">(String data,String previousHash )</span> &#123;<br><span class="hljs-built_in">this</span>.data = data;<br><span class="hljs-built_in">this</span>.previousHash = previousHash;<br><span class="hljs-built_in">this</span>.timeStamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基本块包含String hash，它将保存我们的数字签名。变量previoushash保存前一个块的hash和String data来保存我们的块数据</p><h3 id="创建数字签名"><a href="#创建数字签名" class="headerlink" title="创建数字签名"></a>创建数字签名</h3><p>区块链存储数据的优点在于数据的加密性，Java方式可以实现的加密方式有很多，如BASE、MD、RSA、SHA等等。选用了SHA256这种加密方式，SHA（Secure Hash Algorithm）安全散列算法，因为这种算法的特点是数据的少量更改会在Hash值中产生不可预知的大量更改，hash值用作表示大量数据的固定大小的唯一值，而SHA256算法的hash值大小为256位。之所以选用SHA256是因为它的大小正合适，一方面产生重复hash值的可能性很小，另一方面在区块链实际应用过程中，有可能会产生大量的区块，而使得信息量很大，那么256位的大小就比较恰当了。</p><p>创建一个StringUtil方法来方便调用SHA256算法</p><blockquote><p>所有的输入调用此方法后均会生成一个独一无二的hash值（数字签名），而这个hash值在区块链中是非常重要的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtil</span> &#123;<br><span class="hljs-comment">//将Sha256应用于字符串并返回结果</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">applySha256</span><span class="hljs-params">(String input)</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">MessageDigest</span> <span class="hljs-variable">digest</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-256&quot;</span>);        <br><span class="hljs-comment">//将sha256应用到我们的输入</span><br><span class="hljs-type">byte</span>[] hash = digest.digest(input.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));        <br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">hexString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(); <span class="hljs-comment">// 这将包含哈希十六进制</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; hash.length; i++) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> Integer.toHexString(<span class="hljs-number">0xff</span> &amp; hash[i]);<br><span class="hljs-keyword">if</span>(hex.length() == <span class="hljs-number">1</span>) hexString.append(<span class="hljs-string">&#x27;0&#x27;</span>);<br>hexString.append(hex);<br>&#125;<br><span class="hljs-keyword">return</span> hexString.toString();<br>&#125;<br><span class="hljs-keyword">catch</span>(Exception e) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Block类中应用 方法 applySha256 方法，其主要的目的就是计算hash值，我们计算的hash值应该包括区块中所有我们不希望被恶意篡改的数据，在我们上面所列的Block类中就一定包括previousHash，data和timeStamp。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">calculateHash</span><span class="hljs-params">()</span> </span>&#123;<br>String calculatedhash = StringUtil.<span class="hljs-built_in">applySha256</span>( <br>previousHash +<br>Long.<span class="hljs-built_in">toString</span>(timeStamp) +<br>data <br>);<br><span class="hljs-keyword">return</span> calculatedhash;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后把这个方法加入到Block的构造函数中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Block</span><span class="hljs-params">(String data,String previousHash )</span> &#123;<br><span class="hljs-built_in">this</span>.data = data;<br><span class="hljs-built_in">this</span>.previousHash = previousHash;<br><span class="hljs-built_in">this</span>.timeStamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime();<br><span class="hljs-built_in">this</span>.hash = calculateHash(); <span class="hljs-comment">//确保我们在设置其他值之后执行此操作</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在主方法中让我们创建一些区块，并把其hash值打印出来。</p><p>第一个块称为创世纪区块，因为它是头区块，所以我们只需输入“0”作为前一个块的previous hash。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockChainTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Block</span> <span class="hljs-variable">genesisBlock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&quot;Hi im the first block&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Hash for block 1 : &quot;</span> + genesisBlock.hash);<br><br><span class="hljs-type">Block</span> <span class="hljs-variable">secondBlock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&quot;Yo im the second block&quot;</span>,genesisBlock.hash);<br>System.out.println(<span class="hljs-string">&quot;Hash for block 2 : &quot;</span> + secondBlock.hash);<br><br><span class="hljs-type">Block</span> <span class="hljs-variable">thirdBlock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&quot;Hey im the third block&quot;</span>,secondBlock.hash);<br>System.out.println(<span class="hljs-string">&quot;Hash for block 3 : &quot;</span> + thirdBlock.hash);<br><br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">打印结果值：</span><br><span class="hljs-comment">Hash for block 1: 3d7404e05d96d8060feac1c554db5e06fcf7de65d6926698172f8e63e1c349c0</span><br><span class="hljs-comment">Hash for block 2: afbab7ab1e6c643581378312a4f83a021d0c2a9aa278e9bab83ce8e6eab5c220</span><br><span class="hljs-comment">Hash for block 3: 236206ef1a6534d8e53daaa33b9b6895cdbfbbc3b31fa2a52920207840f44984</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>每一个区块都必须要有自己的数据签名即hash值，这个hash值依赖于自身的信息（data）和上一个区块的数字签名（previousHash），但这个还不是区块链，下面存储区块到数组中，引入gson包，目的是可以用json方式查看整个一条区块链结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> com.google.gson.GsonBuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoobChain</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Block&gt; blockchain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Block&gt;(); <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//add our blocks to the blockchain ArrayList:</span><br>blockchain.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&quot;Hi im the first block&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>));<br>blockchain.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&quot;Yo im the second block&quot;</span>,blockchain.get(blockchain.size()-<span class="hljs-number">1</span>).hash)); <br>blockchain.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&quot;Hey im the third block&quot;</span>,blockchain.get(blockchain.size()-<span class="hljs-number">1</span>).hash));<br><br><span class="hljs-type">String</span> <span class="hljs-variable">blockchainJson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>().setPrettyPrinting().create().toJson(blockchain);<br>System.out.println(blockchainJson);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这样的输出结构就是我们想要的区块链了</p><h3 id="检查区块链的完整性"><a href="#检查区块链的完整性" class="headerlink" title="检查区块链的完整性"></a>检查区块链的完整性</h3><p><strong>检测原因</strong></p><p>我们就在一个主函数中创建区块链中的区块，所以不存在被修改的可能性，但是区块链中的一个核心概念就是去中心化，每一个区块可能是在网络中的某一个节点中产生的，所以很有可能某个节点把自己节点中的数据修改了，那么根据上述的理论数据改变会导致整个区块链的破裂，也就是区块链就无效了。</p><p><strong>检测方法</strong></p><p>在主方法中增加一个isChainValid()方法，目的是循环区块链中的所有区块并且比较hash值，这个方法用来检查hash值是否是于计算出来的hash值相等，同时previousHash值是否和前一个区块的hash值相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title function_">isChainValid</span><span class="hljs-params">()</span> &#123;<br>Block currentBlock; <br>Block previousBlock;<br><br><span class="hljs-comment">//通过区块链循环检查哈希值</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i &lt; blockchain.size(); i++) &#123;<br>currentBlock = blockchain.get(i);<br>previousBlock = blockchain.get(i-<span class="hljs-number">1</span>);<br><span class="hljs-comment">//比较注册哈希和计算哈希</span><br><span class="hljs-keyword">if</span>(!currentBlock.hash.equals(currentBlock.calculateHash()) )&#123;<br>System.out.println(<span class="hljs-string">&quot;Current Hashes not equal&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//比较以前的散列和已注册的以前的散列</span><br><span class="hljs-keyword">if</span>(!previousBlock.hash.equals(currentBlock.previousHash) ) &#123;<br>System.out.println(<span class="hljs-string">&quot;Previous Hashes not equal&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>任何区块链中区块的改变都会导致这个函数返回false，也就证明了区块链无效了。</p><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><p>这里我们要求挖矿者做工作量证明，具体的方式是在区块中尝试不同的参数值直到它的hash值是从一系列的0开始的。让我们添加一个名为nonce的int类型以包含在我们的calculatehash（）方法中，以及需要的mineblock（）方法。</p><p><strong>挖矿结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">Trying to Mine block <span class="hljs-number">1.</span>.. <br>Block Mined!!! : 00000dc50c2b12ab2a8e73b61289098d9c360292920b66f80989fa8b9d1d0521<br>Trying to Mine block <span class="hljs-number">2.</span>.. <br>Block Mined!!! : 0000093a60840937825f338ff864c8b15106bdb8ea238b41aed80d75b2b51aa1<br>Trying to Mine block <span class="hljs-number">3.</span>.. <br>Block Mined!!! : 0000000b531c080dcdced198df76b9830dcf77cac4e237346f336f0383e0713a<br><br>Blockchain is Valid: <span class="hljs-literal">true</span><br>[<br>  &#123;<br>    <span class="hljs-string">&quot;hash&quot;</span>: <span class="hljs-string">&quot;00000dc50c2b12ab2a8e73b61289098d9c360292920b66f80989fa8b9d1d0521&quot;</span>,<br>    <span class="hljs-string">&quot;previousHash&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;first&quot;</span>,<br>    <span class="hljs-string">&quot;timeStamp&quot;</span>: <span class="hljs-number">1652526937377</span>,<br>    <span class="hljs-string">&quot;nonce&quot;</span>: <span class="hljs-number">824286</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;hash&quot;</span>: <span class="hljs-string">&quot;0000093a60840937825f338ff864c8b15106bdb8ea238b41aed80d75b2b51aa1&quot;</span>,<br>    <span class="hljs-string">&quot;previousHash&quot;</span>: <span class="hljs-string">&quot;00000dc50c2b12ab2a8e73b61289098d9c360292920b66f80989fa8b9d1d0521&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;second&quot;</span>,<br>    <span class="hljs-string">&quot;timeStamp&quot;</span>: <span class="hljs-number">1652526938380</span>,<br>    <span class="hljs-string">&quot;nonce&quot;</span>: <span class="hljs-number">1073541</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;hash&quot;</span>: <span class="hljs-string">&quot;0000000b531c080dcdced198df76b9830dcf77cac4e237346f336f0383e0713a&quot;</span>,<br>    <span class="hljs-string">&quot;previousHash&quot;</span>: <span class="hljs-string">&quot;0000093a60840937825f338ff864c8b15106bdb8ea238b41aed80d75b2b51aa1&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;third&quot;</span>,<br>    <span class="hljs-string">&quot;timeStamp&quot;</span>: <span class="hljs-number">1652526939678</span>,<br>    <span class="hljs-string">&quot;nonce&quot;</span>: <span class="hljs-number">1844033</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h2 id="用Java创建可交易的区块链"><a href="#用Java创建可交易的区块链" class="headerlink" title="用Java创建可交易的区块链"></a>用Java创建可交易的区块链</h2><p>实现功能</p><ul><li>创建一个简单的钱包</li><li>使用我们的区块链发送带签名的交易</li></ul><blockquote><p>创建一个基本的区块链后，但在区块链中存放的是一些无用的信息。用交易取代这些信息（我们的区块将能够保存多个交易），创建一个非常简单的加密货币,货币名字NoobCoin。</p><ul><li>导入 bounceycastle和GSON</li></ul></blockquote><h3 id="准备一个钱包"><a href="#准备一个钱包" class="headerlink" title="准备一个钱包"></a>准备一个钱包</h3><p>在加密货币中，在区块链作为交易时，货币所有权可以进行转移，每个参与者都有一个自己私有的地址来发送或者是收取货币。钱包可以存储这些地址。因此钱包就是可以在区块链上进行新交易的软件。类似于微信支付。</p><p><img src="https://raw.githubusercontent.com/longfeizheng/longfeizheng.github.io/master/images/qukuai/qukuai02.png"></p><p>创建一个钱包类来保存公钥和私钥：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">package noobchain;<br><span class="hljs-keyword">import</span> java.security.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Wallet</span> &#123;<br><span class="hljs-keyword">public</span> PrivateKey privateKey;<br><span class="hljs-keyword">public</span> PublicKey publicKey;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>公钥和私钥究竟是起到什么作用呢，其实公钥的作用就是地址，你可以分享你的公钥给别人以此来获取付款，而你的私钥的作用是为了对交易进行签名，这样其他人就不可以花费你的金额除非它拥有你的私钥，所以对于每个人而言我们必须保护好我们的私钥，不能透露我们的私钥信息给其他人。同时在我们进行交易的时候我们也会同时发送我们的公钥由此来验证我们的签名是有效的而且没有数据被篡改。（可以理解为收款码和付款码）</p></blockquote><p>我们在密钥对KeyPair生成私有和公钥。我们将使用椭圆曲线加密来生成我们的密钥对KeyPair。让我们将generateKeyPair()方法添加到我们的钱包类中，并在构造函数中调用它:</p><blockquote><p>私钥用于签署我们不想被篡改的数据。公钥用于验证签名。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> noobchain;<br><span class="hljs-keyword">import</span> java.security.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Wallet</span> &#123;<br><br><span class="hljs-keyword">public</span> PrivateKey privateKey;<br><span class="hljs-keyword">public</span> PublicKey publicKey;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Wallet</span><span class="hljs-params">()</span>&#123;<br>generateKeyPair();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateKeyPair</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyGen</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;ECDSA&quot;</span>,<span class="hljs-string">&quot;BC&quot;</span>);<br><span class="hljs-type">SecureRandom</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> SecureRandom.getInstance(<span class="hljs-string">&quot;SHA1PRNG&quot;</span>);<br><span class="hljs-type">ECGenParameterSpec</span> <span class="hljs-variable">ecSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ECGenParameterSpec</span>(<span class="hljs-string">&quot;prime192v1&quot;</span>);<br><span class="hljs-comment">// 初始化密钥生成器并生成KeyPair</span><br>keyGen.initialize(ecSpec, random);   <span class="hljs-comment">//256字节提供了可接受的安全级别</span><br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyGen.generateKeyPair();<br>        <span class="hljs-comment">// 从keyPair设置公钥和私钥</span><br>        privateKey = keyPair.getPrivate();<br>        publicKey = keyPair.getPublic();<br>&#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="交易和数字签名"><a href="#交易和数字签名" class="headerlink" title="交易和数字签名"></a>交易和数字签名</h3><p>每笔交易将携带一定以下信息：</p><ol><li>资金付款人的公匙信息。</li><li>资金收款人的公匙信息。</li><li>被转移资金的金额。</li><li>输入，它是对以前的交易的引用，证明发送者有资金发送。</li><li>输出，显示交易中收款方相关地址数量。(这些输出被引用为新交易的输入)</li><li>一个加密签名，证明该交易是由地址的发送者是发送的，并且数据没有被更改。(阻止第三方机构更改发送的数量)</li></ol><p>创建这个新的交易类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Transaction</span> &#123;<br><br><span class="hljs-keyword">public</span> String transactionId; <span class="hljs-comment">// 包含事物的哈希</span><br><span class="hljs-keyword">public</span> PublicKey sender; <span class="hljs-comment">// 付款人地址/公钥</span><br><span class="hljs-keyword">public</span> PublicKey reciepient; <span class="hljs-comment">// 收款人地址/公钥</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> value;<br><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] signature; <span class="hljs-comment">// 防止其他人花我们钱包里的钱</span><br><br><span class="hljs-keyword">public</span> ArrayList&lt;TransactionInput&gt; inputs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;TransactionInput&gt;();<br><span class="hljs-keyword">public</span> ArrayList&lt;TransactionOutput&gt; outputs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;TransactionOutput&gt;();<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 生成了多少事务的粗略统计</span><br><br><span class="hljs-comment">// 构造: </span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Transaction</span><span class="hljs-params">(PublicKey from, PublicKey to, <span class="hljs-type">float</span> value,  ArrayList&lt;TransactionInput&gt; inputs)</span> &#123;<br><span class="hljs-built_in">this</span>.sender = from;<br><span class="hljs-built_in">this</span>.reciepient = to;<br><span class="hljs-built_in">this</span>.value = value;<br><span class="hljs-built_in">this</span>.inputs = inputs;<br>&#125;<br><br><span class="hljs-comment">// 计算事务散列(将用作其Id)</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">calulateHash</span><span class="hljs-params">()</span> &#123;<br>sequence++; <span class="hljs-comment">//增加序列以避免两个相同的事务具有相同的散列</span><br><span class="hljs-keyword">return</span> StringUtil.applySha256(<br>StringUtil.getStringFromKey(sender) +<br>StringUtil.getStringFromKey(reciepient) +<br>Float.toString(value) + sequence<br>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试钱包和签名"><a href="#测试钱包和签名" class="headerlink" title="测试钱包和签名"></a>测试钱包和签名</h3><p>简单的进行一些测试，在主方法中增加了一些新的变量也替换了之前在主方法中的一些内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.Security;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> com.google.gson.GsonBuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoobChain</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Block&gt; blockchain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Block&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">difficulty</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Wallet walletA;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Wallet walletB;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//将block添加到区块链数组列表中</span><br>Security.addProvider(<span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.bouncycastle.jce.provider.BouncyCastleProvider()); <br><span class="hljs-comment">//创建钱包A和B</span><br>walletA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wallet</span>();<br>walletB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wallet</span>();<br><span class="hljs-comment">//测试公钥和私钥</span><br>System.out.println(<span class="hljs-string">&quot;Private and public keys:&quot;</span>);<br>System.out.println(StringUtil.getStringFromKey(walletA.privateKey));<br>System.out.println(StringUtil.getStringFromKey(walletA.publicKey));<br><span class="hljs-comment">//创建一个从A钱包到B钱包交易的测试</span><br><span class="hljs-type">Transaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transaction</span>(walletA.publicKey, walletB.publicKey, <span class="hljs-number">5</span>, <span class="hljs-literal">null</span>);<br>transaction.generateSignature(walletA.privateKey);<br><span class="hljs-comment">//验证签名工作，并从公钥验证它</span><br>System.out.println(<span class="hljs-string">&quot;Is signature verified&quot;</span>);<br>System.out.println(transaction.verifiySignature());<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们将创建并验证输入和输出，并把交易保存到区块链中去。</p><h3 id="输入和输出1：如何验证货币是你的"><a href="#输入和输出1：如何验证货币是你的" class="headerlink" title="输入和输出1：如何验证货币是你的"></a>输入和输出1：如何验证货币是你的</h3><p>如果你拥有1比特币，你必须前面就得接收1比特币。比特币的账本不会在你的账户中增加一个比特币也不会从发送者那里减去一个比特币，发送者只能指向他/她之前收到过一个比特币，所以一个交易输出被创建用来显示一个比特币发送给你的地址（交易的输入指向前一个交易的输出）。</p><p><strong>你的钱包余额是所有未使用的交易输出的总和</strong></p><p>创建TransactionInput 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionInput</span> &#123;<br><span class="hljs-keyword">public</span> String transactionOutputId; <span class="hljs-comment">//Reference to TransactionOutputs -&gt; transactionId</span><br><span class="hljs-keyword">public</span> TransactionOutput UTXO; <span class="hljs-comment">//Contains the Unspent transaction output</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TransactionInput</span><span class="hljs-params">(String transactionOutputId)</span> &#123;<br><span class="hljs-built_in">this</span>.transactionOutputId = transactionOutputId;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个类将用于引用尚未使用的transactionoutput。transactionOutputId将用于查找相关的TransactionOutput，允许矿工检查您的所有权。</p></blockquote><p>创建TransactionOutputs类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.PublicKey;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionOutput</span> &#123;<br><span class="hljs-keyword">public</span> String id;<br><span class="hljs-keyword">public</span> PublicKey reciepient; <span class="hljs-comment">//钱的接收者</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> value; <span class="hljs-comment">//拥有钱的数量</span><br><span class="hljs-keyword">public</span> String parentTransactionId; <span class="hljs-comment">//创建此输出的事务的id</span><br><span class="hljs-comment">//构造</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TransactionOutput</span><span class="hljs-params">(PublicKey reciepient, <span class="hljs-type">float</span> value, String parentTransactionId)</span> &#123;<br><span class="hljs-built_in">this</span>.reciepient = reciepient;<br><span class="hljs-built_in">this</span>.value = value;<br><span class="hljs-built_in">this</span>.parentTransactionId = parentTransactionId;<br><span class="hljs-built_in">this</span>.id = StringUtil.applySha256(StringUtil.getStringFromKey(reciepient)+Float.toString(value)+parentTransactionId);<br>&#125;<br><br><span class="hljs-comment">//检查钱是否属于你</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMine</span><span class="hljs-params">(PublicKey publicKey)</span> &#123;<br><span class="hljs-keyword">return</span> (publicKey == reciepient);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>交易输出类将显示从交易中发送给每一方的最终金额。这些作为新交易中的输入参考，作为证明你可以发送的金额数量。</p><h3 id="输入和输出2：处理交易"><a href="#输入和输出2：处理交易" class="headerlink" title="输入和输出2：处理交易"></a>输入和输出2：处理交易</h3><p>区块链可能会收到很多交易，而区块链可能会非常长，因为必须查找并检查其输入，所以可能需要非常长的时间来处理新的交易。为了解决这个问题，我们保存了一个额外的集合称之为为使用的交易作为可用的输入,所以在主函数中增加一个集合称为UTXO。</p><p>在交易类中增加一个processTransaction方法，这个方法是把一切放在一起用来处理交易。</p><p>通过这种方法，我们执行一些检查以确保交易有效，然后收集输入并生成输出。最重要的是，最后，我们抛弃了输入在我们的UTXO列表，这就意味着一个可以使用的交易输出必须之前一定是输入，所以输入的值必须被完全使用，所以付款人必须改变它们自身的金额状态。</p><h3 id="添加交易到区块中"><a href="#添加交易到区块中" class="headerlink" title="添加交易到区块中"></a>添加交易到区块中</h3><p>现在已经有了一个有效的交易系统，需要把交易加入到我们的区块链中。把交易列表替换我们块中无用的数据，但是在一个单一的区块中可能存放了1000个交易，这就会导致大量的hash计算，在这里我们使用了交易的merkle root，增加一个帮助方法来创建merkle root在StringUtils类中。</p><p>在StringUtils类中创建getMerkleRoot方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getMerkleRoot</span><span class="hljs-params">(ArrayList&lt;Transaction&gt; transactions)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> transactions.size();<br>ArrayList&lt;String&gt; previousTreeLayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(Transaction transaction : transactions) &#123;<br>previousTreeLayer.add(transaction.transactionId);<br>&#125;<br>ArrayList&lt;String&gt; treeLayer = previousTreeLayer;<br><span class="hljs-keyword">while</span>(count &gt; <span class="hljs-number">1</span>) &#123;<br>treeLayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i &lt; previousTreeLayer.size(); i++) &#123;<br>treeLayer.add(applySha256(previousTreeLayer.get(i-<span class="hljs-number">1</span>) + previousTreeLayer.get(i)));<br>&#125;<br>count = treeLayer.size();<br>previousTreeLayer = treeLayer;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">merkleRoot</span> <span class="hljs-operator">=</span> (treeLayer.size() == <span class="hljs-number">1</span>) ? treeLayer.get(<span class="hljs-number">0</span>) : <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">return</span> merkleRoot;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改Block类，需要注意的是还更新了Block构造函数，因为我们不再需要传递字符串数据，并将merkle root包含在计算哈希方法中。addTransaction方法用来增加交易，只有满足条件下才可以成功的在区块中增加交易。</p><p>实现了一个可交易的区块链。</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>应该测试从钱包发送货币，更新区块链并进行有效性检查。但首先需要一种将新硬币引入混合的方法。有很多方法来创建新的硬币。在比特币区块链上，有很多方法可以创造新的比特币:矿工可以将交易包括在内，作为对每个矿工挖矿的奖励。但在这里我们只希望在创世纪区块中释放货币。就像比特币中一下，所以我们修改我们的主函数以达到下面的目的。</p><ol><li>创世纪区块发布100个货币给walletA</li><li>一个更新的链有效性检查，考虑到交易。</li><li>测试交易看是否一切正常。</li></ol><p>交易结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">Creating and Mining Genesis block... <br>Transaction Successfully added to Block<br>Block Mined!!! : 0002eb314ecaaeeb77ffd7f83d90ce7dc197dadd2ca5484bebd225bf6b81d3fc<br><br>WalletA<span class="hljs-string">&#x27;s balance is: 100.0</span><br><span class="hljs-string"></span><br><span class="hljs-string">WalletA is Attempting to send funds (40) to WalletB...</span><br><span class="hljs-string">Transaction Successfully added to Block</span><br><span class="hljs-string">Block Mined!!! : 000a29ee3221960020a4f382e728b08b02f1dcf6707bcc8a1499e29c3c03adf8</span><br><span class="hljs-string"></span><br><span class="hljs-string">WalletA&#x27;</span>s balance is: <span class="hljs-number">60.0</span><br>WalletB<span class="hljs-string">&#x27;s balance is: 40.0</span><br><span class="hljs-string"></span><br><span class="hljs-string">WalletA Attempting to send more funds (1000) than it has...</span><br><span class="hljs-string">#Not Enough funds to send transaction. Transaction Discarded.</span><br><span class="hljs-string">Block Mined!!! : 0008917b5fc51ea7eb74dd6295c20b744cd8d4f90db2fb4fd627c6c47eb7583a</span><br><span class="hljs-string"></span><br><span class="hljs-string">WalletA&#x27;</span>s balance is: <span class="hljs-number">60.0</span><br>WalletB<span class="hljs-string">&#x27;s balance is: 40.0</span><br><span class="hljs-string"></span><br><span class="hljs-string">WalletB is Attempting to send funds (20) to WalletA...</span><br><span class="hljs-string">Transaction Successfully added to Block</span><br><span class="hljs-string"></span><br><span class="hljs-string">WalletA&#x27;</span>s balance is: <span class="hljs-number">80.0</span><br>WalletB<span class="hljs-string">&#x27;s balance is: 20.0</span><br><span class="hljs-string">Blockchain is valid</span><br></code></pre></td></tr></table></figure><p>现在钱包能够安全地在您的区块链上发送金额，只要他们有金额发送。这意味着你有你自己的本地加密货币.</p><h3 id="完整的可以进行交易的区块链"><a href="#完整的可以进行交易的区块链" class="headerlink" title="完整的可以进行交易的区块链"></a>完整的可以进行交易的区块链</h3><p>成功地创建了自己的加密货币。完整的可以进行交易的区块链功能实现：</p><ul><li>允许用户创建钱包</li><li>使用椭圆曲线加密方式为钱包提供公钥和私钥</li><li>通过使用数字签名算法证明所有权，确保资金转移</li><li>允许用户在区块链上进行交易</li></ul><p>参考博客：</p><ul><li><a href="https://niocoder.com/2018/03/10/%E7%94%A8Java%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE-part1/">https://niocoder.com/2018/03/10/%E7%94%A8Java%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE-part1/</a></li><li><a href="https://niocoder.com/2018/03/11/%E7%94%A8Java%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE-part2/">https://niocoder.com/2018/03/11/%E7%94%A8Java%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE-part2/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>滑动窗口</title>
    <link href="/2022/05/12/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2022/05/12/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>滑动窗口是一种基于双指针的一种思想，两个指针指向的元素之间形成一个窗口。</p><p><strong>分类：</strong>窗口有两类，一种是固定大小类的窗口，一类是大小动态变化的窗口。</p><p><strong>应用：</strong>什么情况可以用滑动窗口来解决实际问题呢？</p><ul><li>一般给出的数据结构是数组或者字符串</li><li>求取某个子串或者子序列最长最短等最值问题或者求某个目标值时</li><li>该问题本身可以通过暴力求解</li></ul><h4 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h4><p><strong>窗口的形成</strong></p><p>在具体使用之前，我们知道窗口实际是两个指针之间形成的区域，那关键就是这两个指针是如何移动的。</p><ol><li>初始时，左右指针left,right都指向第0个元素，窗口为[left,right)，注意这里是左闭右开，因此初始窗口[0,0)区间没有元素，符合我们的初始定义</li><li>开始循环遍历整个数组元素，判断当前right指针是否超过整个数组的长度，是退出循环，否则执行第3步</li><li>然后right指针开始向右移动一个长度，并更新窗口内的区间数据</li><li>当窗口区间的数据满足我们的要求时，右指针right就保持不变，左指针left开始移动，直到移动到一个不再满足要求的区间时，left不再移动位置</li><li>执行第2步</li></ol><p>这中间，窗口的更新与维护是很重要的一环，新元素加入窗口，旧元素移出窗口，都需要及时地更新与这个窗口范围相关的数据。</p><p>上述说明主要是两个while循环，可以简单抽象成一个模板如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>,right =<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(right指针未越界)&#123;<br>  <span class="hljs-type">char</span> ch = arr[right++];<br>  <span class="hljs-comment">//右指针移动，更新窗口</span><br>  ...<br>  <br>  <span class="hljs-comment">//窗口数据满足条件 对于固定窗口而言，就是窗口的大小&gt;=固定值；对于动态窗口，就是从left出发，窗口不断扩充，第一次满足题意的位置</span><br>  <span class="hljs-keyword">while</span>(窗口数据满足条件)&#123;<br>   <span class="hljs-comment">//记录或者更新全局数据</span><br>   ...<br>   <br>   <span class="hljs-comment">//右指针不动，左指针开始移动一位</span><br>   <span class="hljs-type">char</span> tmp = arr[left++];<br>   <br>   <span class="hljs-comment">//左指针移动，窗口缩小，更新窗口数据</span><br>   ...<br>  &#125;<br>  <span class="hljs-comment">//返回结果</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>参考文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/422908736">https://zhuanlan.zhihu.com/p/422908736</a></li><li><a href="https://zhuanlan.zhihu.com/p/63239291">https://zhuanlan.zhihu.com/p/63239291</a></li><li><a href="https://zhuanlan.zhihu.com/p/110241099">https://zhuanlan.zhihu.com/p/110241099</a></li></ul><p>相关题目：</p><ul><li>LeetCode 3：无重复字符的最长子串（难度：中等 已做）</li><li>LeetCode 209：长度最小的子数组（难度：中等 已做）</li></ul><h2 id="Bilibili滑动窗口学习笔记"><a href="#Bilibili滑动窗口学习笔记" class="headerlink" title="Bilibili滑动窗口学习笔记"></a>Bilibili滑动窗口学习笔记</h2><h4 id="算法应用场景："><a href="#算法应用场景：" class="headerlink" title="算法应用场景："></a>算法应用场景：</h4><p>关键字：</p><p>满足XXX条件（计算结果，出现次数，同时包含）</p><p>最长/最短</p><p>子串/子数组/子序列</p><p>例如：长度最小的子数组</p><h4 id="滑动窗口使用思路（寻找最长）"><a href="#滑动窗口使用思路（寻找最长）" class="headerlink" title="滑动窗口使用思路（寻找最长）"></a>滑动窗口使用思路（寻找最长）</h4><p>核心：左右双指针（L，R）在起始点，R向右逐位滑动循环</p><p>每次滑动过程中</p><ul><li>如果窗内元素满足条件，R向右扩大窗口，并更新最优结果</li><li>如果窗内元素不满足条件，L向右缩小窗口</li></ul><p>直至R到达结尾</p><p>代码模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//最长模板</span><br><span class="hljs-comment">//初始化left right result bestResult</span><br><span class="hljs-keyword">while</span>(右指针没有到达结尾)<br>&#123;<br>    窗口扩大，加入right对应元素，更新当前<span class="hljs-function">result</span><br><span class="hljs-function">    <span class="hljs-title">while</span><span class="hljs-params">(result不满足要求)</span></span><br><span class="hljs-function">    </span>&#123;<br>        窗口缩小，移除left对应元素，left右移<br>    &#125;<br>    更新最优结果bestResult<br>    right++;<br>&#125;<br>返回bestResult;<br></code></pre></td></tr></table></figure><h4 id="滑动窗口使用思路（寻找最短）"><a href="#滑动窗口使用思路（寻找最短）" class="headerlink" title="滑动窗口使用思路（寻找最短）"></a>滑动窗口使用思路（寻找最短）</h4><p>核心：左右双指针（L，R）在起始点，R向右逐位滑动循环</p><p>每次滑动过程中</p><ul><li>如果窗内元素满足条件，L向右缩小窗口 ，并更新最优结果</li><li>如果窗内元素不满足条件，R向右扩大窗口</li></ul><p>直至R到达结尾</p><p>代码模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//最短模板</span><br><span class="hljs-comment">//初始化left right result bestResult</span><br><span class="hljs-keyword">while</span>(右指针没有到达结尾)<br>&#123;<br>    窗口扩大，加入right对应元素，更新当前<span class="hljs-function">result</span><br><span class="hljs-function">    <span class="hljs-title">while</span><span class="hljs-params">(result满足要求)</span></span><br><span class="hljs-function">    </span>&#123;<br>        更新最优结果bestResult<br>        窗口缩小，移除left对应元素，left右移<br>    &#125;<br>    right++;<br>&#125;<br>返回bestResult;<br></code></pre></td></tr></table></figure><h2 id="LeetCode-713：乘积小于-K-的子数组"><a href="#LeetCode-713：乘积小于-K-的子数组" class="headerlink" title="LeetCode 713：乘积小于 K 的子数组"></a>LeetCode 713：乘积小于 K 的子数组</h2><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>这道题是一道典型的滑动窗口问题。</p><blockquote><p>溢出问题：</p><p>double与int类型的存储机制不同，long int的8个字节全部都是数据位，⽽double是以尾数，底数，指数的形式表⽰的，类似科学计数法，<br>因此double⽐int能表⽰的数据范围更⼴。double的范围也是要大于long long int的范围的。</p></blockquote><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个整数数组 nums 和一个整数 k ，请你返回子数组内所有元素的乘积严格小于 k 的连续子数组的数目。</p><blockquote><p>输入：nums = [10,5,2,6], k = 100<br>输出：8<br>解释：8 个乘积小于 100 的子数组分别为：[10]、[5]、[2],、[6]、[10,5]、[5,2]、[2,6]、[5,2,6]。<br>需要注意的是 [10,5,2] 并不是乘积小于 100 的子数组。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numSubarrayProductLessThanK</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> cur = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;=r &amp;&amp; r&lt;nums.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            cur = cur*nums[r];<br>            <span class="hljs-keyword">while</span>(l &lt;= r &amp;&amp; cur &gt;= k)<br>            &#123;<br>                cur = cur/nums[l];<br>                l++;<br>            &#125;<br>            ans = ans+(r-l+<span class="hljs-number">1</span>);<br>            r++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">[10]</span><br><span class="hljs-comment">[10,5] [5]</span><br><span class="hljs-comment">[5,2] [2]</span><br><span class="hljs-comment">[5,2,6] [2,6] [6]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>待续……..</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库常用命令操作</title>
    <link href="/2022/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<ul><li><p>启动数据库</p><p>net start mysql</p></li><li><p>关闭数据库</p><p>net  stop mysql</p></li><li><p>连接数据库</p><p>mysql -u root -p</p></li></ul><h4 id="管理数据库的命令"><a href="#管理数据库的命令" class="headerlink" title="管理数据库的命令"></a>管理数据库的命令</h4><ul><li><p><strong>USE 数据库名;</strong></p><p>选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</p></li><li><p><strong>SHOW DATABASES;</strong></p><p>列出 MySQL 数据库管理系统的数据库列表。</p></li><li><p><strong>SHOW TABLES;</strong></p><p>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</p></li><li><p><strong>CREATE DATABASE 数据库名;</strong></p><p>创建数据库：CREATE DATABASE stu;  （注意MySQL语法要求大写）</p></li></ul><p>待续……</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「PHP」期末复习</title>
    <link href="/2022/05/05/%E3%80%8CPHP%E3%80%8D%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/05/05/%E3%80%8CPHP%E3%80%8D%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>愿世间再无不让打印的半开卷考试，整理了一天终于把PHP的内容整理完了，明天开始抄！</p><p>不过感觉这样整理的效果还挺好的，一边整理一边学比正常学的效率还要高。考完数据库和PHP再把Java整理一下，重拾Java，Java的语法啥的都快忘完了！！！</p></blockquote><h1 id="第1、2章-PHP入门-HTML和CSS简介"><a href="#第1、2章-PHP入门-HTML和CSS简介" class="headerlink" title="第1、2章 PHP入门 HTML和CSS简介"></a>第1、2章 PHP入门 HTML和CSS简介</h1><p>……</p><h1 id="第3章-数据与变量"><a href="#第3章-数据与变量" class="headerlink" title="第3章 数据与变量"></a>第3章 数据与变量</h1><h2 id="3-1-PHP数据类型"><a href="#3-1-PHP数据类型" class="headerlink" title="3-1 | PHP数据类型"></a>3-1 | PHP数据类型</h2><h4 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h4><ul><li><p>布尔型</p><p>用print或echo输出布尔型数据时，true被转换成字符串“1”，false被转换成空串。</p></li><li><p>整型</p></li><li><p>浮点型</p></li><li><p>字符串型</p><p>转义字符</p></li></ul><h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><ul><li><p>数组</p><ul><li><p>在PHP中，数组是有序的映射。一个数组由若干元素组成，每个元素是一个键-值对。</p></li><li><p>键用于索引数组元素，一个数组不能有重复的键。键可以是整数也可以是字符串。</p></li><li><p>值也称为数组元素的值，可以是任意类型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//例子：创建数组。</span><br><span class="hljs-variable">$arr1</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0</span> =&gt; <span class="hljs-string">&quot;浙江&quot;</span>, <span class="hljs-number">1</span> =&gt; <span class="hljs-string">&quot;江苏&quot;</span>, <span class="hljs-number">2</span> =&gt; <span class="hljs-string">&quot;广东&quot;</span>);<br><span class="hljs-variable">$arr2</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;浙江&quot;</span> =&gt; <span class="hljs-string">&quot;杭州&quot;</span>, <span class="hljs-string">&quot;江苏&quot;</span> =&gt; <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;广东&quot;</span> =&gt; <span class="hljs-string">&quot;广州&quot;</span>);<br><span class="hljs-comment">//通过一个具体的键可以访问对应的值，比如：</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr1</span>[<span class="hljs-number">0</span>];                <span class="hljs-comment">// 输出：浙江</span><br>Echo <span class="hljs-variable">$arr2</span>[“浙江”]       <span class="hljs-comment">// 输出：杭州</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>对象</p></li></ul><h4 id="NULL类型"><a href="#NULL类型" class="headerlink" title="NULL类型"></a>NULL类型</h4><p>NULL类型的唯一值是NULL，代表无值，不区分大小写。</p><p>一个变量在下面情况下具有NULL值</p><ul><li>被赋予常量NULL</li><li>不存在</li><li>被unset复原</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">void</span> <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var1</span> [, <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var2</span>]* )<br><span class="hljs-comment">//unset用以销毁指定的一个或多个变量</span><br><span class="hljs-keyword">bool</span> <span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var</span>)<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var1</span> [, <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var2</span>]*)<br><span class="hljs-comment">//检测指定变量是否设置</span><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">empty</span>(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var</span> )<br></code></pre></td></tr></table></figure><h2 id="3-2-类型转换"><a href="#3-2-类型转换" class="headerlink" title="3-2 | 类型转换"></a>3-2 | 类型转换</h2><p>PHP是弱类型的编程语言，在引入变量时，并不需要明确声明其类型。当给它赋一个字符串时，变量的类型就是字符串；如果再给它赋一个整数，那么变量的类型就变为整型的。</p><ul><li><p>自动类型转换</p><p>有时候在计算表达式时，PHP会根据上下文自动将一些数据转换成合适的类型来参与运算。</p></li><li><p>强制类型转换</p><p>语法：在要转换的变量（或表达式）之前加上用括号括起来的目标类型。</p></li></ul><h2 id="3-3-变量与常量"><a href="#3-3-变量与常量" class="headerlink" title="3-3 | 变量与常量"></a>3-3 | 变量与常量</h2><p>PHP变量总是以美元符号$开头，然后是变量名。</p><p>PHP是一种弱类型语言，或者动态类型语言。在PHP中，变量不需要显式声明，也没有固定的类型。变量的类型由赋给变量的值确定。</p><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><ul><li><p>值赋值</p></li><li><p>引用赋值</p><p>引用赋值是指将源变量（右侧）的引用赋给目标变量（左侧），其结果是目标变量与源变量引用相同的内存单元。在源变量名前加上一个&amp;符号将实现按引用赋值。</p></li></ul><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li>全局变量</li><li>局部变量</li><li>静态变量</li><li>超全局变量</li></ul><h1 id="第4章-运算符与流程控制"><a href="#第4章-运算符与流程控制" class="headerlink" title="第4章 运算符与流程控制"></a>第4章 运算符与流程控制</h1><h2 id="4-1-运算符"><a href="#4-1-运算符" class="headerlink" title="4-1 | 运算符"></a>4-1 | 运算符</h2><ul><li><p>算术运算符</p></li><li><p>字符串运算符</p><p>字符串运算符是指字符串连接运算符（.），用于将两个字符串连接成一个新的字符串返回。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;xyz&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;123&quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>php&gt;<br><span class="hljs-comment">//输出：abc123xyz</span><br></code></pre></td></tr></table></figure></li><li><p>比较运算符</p><p>=== 全等（值和类型均相同）</p></li><li><p>逻辑运算符</p></li><li><p>位运算符</p></li><li><p>赋值运算符</p></li><li><p>三目条件运算符</p></li></ul><h2 id="4-2-流程控制"><a href="#4-2-流程控制" class="headerlink" title="4-2 | 流程控制"></a>4-2 | 流程控制</h2><ul><li>选择结构</li><li>循环结构</li><li>跳转语句</li></ul><h2 id="4-3-包含文件"><a href="#4-3-包含文件" class="headerlink" title="4-3 | 包含文件"></a>4-3 | 包含文件</h2><ul><li>include语句</li><li>require语句</li><li>include_once语句</li><li>require_once语句</li></ul><h1 id="第5章-PHP函数"><a href="#第5章-PHP函数" class="headerlink" title="第5章 PHP函数"></a>第5章 PHP函数</h1><h2 id="5-1-函数的声明与调用"><a href="#5-1-函数的声明与调用" class="headerlink" title="5-1 | 函数的声明与调用"></a>5-1 | 函数的声明与调用</h2><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><p>函数声明应该出现在PHP开始标记和结束标记之间。</p><p>语法格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> &lt;<span class="hljs-title">function_name</span>&gt;(<span class="hljs-params">[&lt;<span class="hljs-variable">$arg</span>&gt;[, &lt;<span class="hljs-variable">$arg</span>&gt;]*]</span>) </span>&#123;<br>      <span class="hljs-comment">// 要执行的代码;</span><br>&#125;<br><span class="hljs-comment">//函数体可以是任何合法的PHP代码。</span><br></code></pre></td></tr></table></figure><p>函数名的命名规则：</p><p>(1) 函数名不能和已有的函数重名。</p><p>(2) 函数名称只能包含字母、数字和下划线。</p><p>(3) 函数名称不能以数字开头。</p><p>(4) 长度不限，对<strong>大小写不敏感</strong>。</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>函数只有在被调用时才会执行，格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;functin_name&gt;([&lt;exp&gt;[, &lt;exp&gt;]*]);<br></code></pre></td></tr></table></figure><h2 id="5-2-函数参数"><a href="#5-2-函数参数" class="headerlink" title="5-2 | 函数参数"></a>5-2 | 函数参数</h2><h4 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h4><p>函数形参被定义在函数名之后，括号内部。一个函数的形参数目不限，两个形参之间用逗号分隔。函数形参类似于在函数内定义的局部变量，在函数内有效。</p><p>当调用包含形参的函数时，应提供相应的参数值，通常称为实参。实参是表达式，两个表达式之间用逗号分隔。</p><h4 id="PHP参数传递的方式"><a href="#PHP参数传递的方式" class="headerlink" title="PHP参数传递的方式"></a>PHP参数传递的方式</h4><ul><li><p>按值传递参数</p><p>默认情况下，函数的参数是按值传递的。这意味着，即使实参是变量，当函数对形参的值进行改变后，也不会影响函数外部实参的取值。</p></li><li><p>引用传递参数</p><p>要实现按引用传递：</p><p>(1) 形参名前加上&amp;符号，如&amp;$arg。</p><p>(2) 实参是变量。</p></li></ul><h4 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h4><p>在声明函数时，可以为形参指定默认值。形参默认值必须是常量表达式，通过运算符“=”给相应的形参赋值。</p><p>具有默认值的形参可以有多个，但必须放置在其他形参后面。当调用函数时，对不具有默认值的形参必须指定相应的实参，对具有默认值的形参，可以指定实参，也可以没有。</p><h4 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h4><ul><li>可变长形参<ul><li>PHP支持可变长参数。</li><li>可变长形参通过在形参名前加符号“…”实现。可变长形参必须是形参表中最后一个形参。</li><li>可变长形参可以接收零个或多个实参值，此时这些参数值将被组织成一个数组赋给该形参。</li></ul></li><li>可变长实参<ul><li>可变长实参在实参前加符号“…”实现。可变长实参的类型应该是数组。可变长实参必须是实参表中的最后一个实参。</li><li>当传递参数时，实参数组中的各元素将被自动取出并一一赋给对应的形参。</li></ul></li></ul><h2 id="5-3-函数返回值"><a href="#5-3-函数返回值" class="headerlink" title="5-3 | 函数返回值"></a>5-3 | 函数返回值</h2><p>表达式可以是任意类型的，所以一个函数可以返回数值、字符串等标量类型的值，也可以返回数组、对象等复合类型的值。</p><p>函数可以返回一个值，也可以返回一个引用。</p><p>要让函数返回一个引用，需要：</p><p>(1) 在函数声明时，函数名前使用&amp;；</p><p>(2) return语句所带的表达式是变量；</p><p>(3) 调用函数时，函数名前使用&amp;。</p><h2 id="5-4-变量函数"><a href="#5-4-变量函数" class="headerlink" title="5-4 | 变量函数"></a>5-4 | 变量函数</h2><h2 id="5-5-匿名函数"><a href="#5-5-匿名函数" class="headerlink" title="5-5 | 匿名函数"></a>5-5 | 匿名函数</h2><ul><li><p>匿名函数作为变量值</p><p>可以把匿名函数作为一个表达式赋给一个变量，然后就可以通过该变量来调用匿名函数了。</p><p>在内部处理中，PHP系统会自动把匿名函数转换成内置类Closure的一个实例对象，然后再把该实例对象赋给变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">//给变量$green赋一个匿名函数</span><br>    <span class="hljs-variable">$greet</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>&#125;;  <span class="hljs-comment">//函数末尾需要分号</span><br><br><span class="hljs-variable">$greet</span>(<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-variable">$greet</span>(<span class="hljs-string">&quot;php&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//输出：hello world</span><br><span class="hljs-comment">//    hello php</span><br></code></pre></td></tr></table></figure></li><li><p>用作回调类型参数的值</p><p>用于接收函数的形参被称为回调类型参数，传递给这种参数的函数被称为回调函数。</p><p>回调函数可以是正常的函数，也可以是匿名函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$func</span></span>)</span>&#123;<br>    <span class="hljs-variable">$func</span>(<span class="hljs-variable">$name</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">display</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-variable">$str</span>,<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">myFunc</span>(<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;display&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-6-日期时间函数"><a href="#5-6-日期时间函数" class="headerlink" title="5-6 | 日期时间函数"></a>5-6 | 日期时间函数</h2><ol><li><h4 id="time函数"><a href="#time函数" class="headerlink" title="time函数"></a>time函数</h4><p>int time(void)</p><p>返回自从Unix纪元（格林威治时间1970年1月1日00:00:00）到当前时间经过的秒数。</p></li><li><h4 id="mktime函数"><a href="#mktime函数" class="headerlink" title="mktime函数"></a>mktime函数</h4><p>int mktime([ int $hour [, int $minute [, int $second [, int $month [, int $day [, int $year]]]]]] )</p><p>函数返回与指定日期时间信息相应的时间戳，即从Unix纪元到指定时间的秒数。</p></li><li><h4 id="date函数"><a href="#date函数" class="headerlink" title="date函数"></a>date函数</h4><p>string date(string $format [, int $timestamp ])</p><p>按照指定的格式串$format对指定的时间戳$timestamp进行格式化，返回格式化产生的字符串。如果缺省$timestamp，就使用当前的Unix时间戳，即time()的返回值。</p><p>格式串由格式符和普通文本组成。格式符描述了需要包含的相应的日期时间文本，普通文本则会原样保留在返回的字符串。</p></li><li><h4 id="getdate函数"><a href="#getdate函数" class="headerlink" title="getdate函数"></a>getdate函数</h4><p>array getdate([ int $timestamp = time() ])</p><p>返回一个根据指定时间戳$timestamp得出的包含有日期信息的关联数组。</p></li><li><h4 id="date-default-timezone-set"><a href="#date-default-timezone-set" class="headerlink" title="date_default_timezone_set"></a><strong>date_default_timezone_set</strong></h4><p>bool date_default_timezone_set(string $timezone_identifier)</p><p>函数为当前脚本中所有日期时间函数设置一个默认时区。如果参数值有效，函数返回true，否则返回false。</p><p>中国大陆的时区标识符可用PRC。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&quot;PRC&quot;</span>);<br><span class="hljs-variable">$time1</span> = <span class="hljs-title function_ invoke__">mktime</span>(<span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-number">2016</span>);<span class="hljs-comment">// 根据日期时间信息获取时间戳$time1</span><br><span class="hljs-variable">$dt</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y-m-d H:i:s&quot;</span>, <span class="hljs-variable">$time1</span>);              <span class="hljs-comment">// 根据时间戳获得日期时间信息的字符串</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dt</span>, <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br><span class="hljs-variable">$time2</span> = <span class="hljs-title function_ invoke__">mktime</span>(<span class="hljs-number">9</span>, <span class="hljs-number">50</span>, <span class="hljs-number">38</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2016</span>);<span class="hljs-comment">// 根据日期时间信息获取时间戳$time2</span><br><span class="hljs-variable">$wday</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-variable">$time2</span>);              <span class="hljs-comment">// 获得指定时间戳属于星期几</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$wday</span>, <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br><span class="hljs-variable">$lastday</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-variable">$time2</span>);           <span class="hljs-comment">// 获得指定时间戳所在月份的天数</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$lastday</span>, <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br><span class="hljs-variable">$days</span> = (<span class="hljs-variable">$time2</span> - <span class="hljs-variable">$time1</span>)/(<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>);<span class="hljs-comment">// 计算两个指定时间相差的天数</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$days</span>;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">/*输出：</span><br><span class="hljs-comment">    2016-01-20 15:10:28</span><br><span class="hljs-comment">    5</span><br><span class="hljs-comment">    29</span><br><span class="hljs-comment">    22</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="第6章-处理字符串"><a href="#第6章-处理字符串" class="headerlink" title="第6章 处理字符串"></a>第6章 处理字符串</h1><h2 id="6-1-长度与去空"><a href="#6-1-长度与去空" class="headerlink" title="6-1 | 长度与去空"></a>6-1 | 长度与去空</h2><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><p>1.字节长度</p><p>int strlen(string $str)</p><p>①返回字符串的长度，即字节个数。</p><p>②若str为空串或NULL，返回0。</p><p>2.字符长度</p><p>mixed mb_strlen(string $str [, string $encoding])</p><p>①返回字符串长度，即字符个数。字符串$str采用指定的字符集$encoding。</p><p>②若$str为空串或NULL，函数返回0。</p><p>③如果$encoding指定的不是一个字符集名称，函数产生一个警告信息，并返回false。</p><p>④如果$encoding指定的字符集与字符串实际采用的字符集不一致，函数返回的结果可能不正确。</p><h4 id="去空"><a href="#去空" class="headerlink" title="去空"></a>去空</h4><p>string trim($str [, $charlist])    //去除首尾端空白符号或指定字符</p><p>string ltrim($str[, $charlist])    //去除开头的空白符号或指定字符</p><p>string rtrim($str [, $charlist])    //去除尾部的空白符号或指定字符</p><p>①从字符串($str)的开始处和(或)结尾处去除空白符号(默认)或指定字符($charlist)，然后返回结果字符串。</p><p>②空白符号包括:换行符和回车符(\n和\r)、水平和垂直制表符(\t和\x0B)、空字符(\0)、空格。</p><p>③$charlist可以简单列出所有要过滤的字符，也可以使用..指定一个字符范围，如\x61..\x7a，表示所有的小写字母。</p><h2 id="6-2-大小写转换与比较"><a href="#6-2-大小写转换与比较" class="headerlink" title="6-2 | 大小写转换与比较"></a>6-2 | 大小写转换与比较</h2><h4 id="大小写转化"><a href="#大小写转化" class="headerlink" title="大小写转化"></a>大小写转化</h4><p><strong>1.</strong> <strong>小写转大写</strong></p><p>string strtoupper(string $string)    //将$string中所有的小写字母转换为大写并返回。</p><p><strong>2.</strong> <strong>大写转小写</strong></p><p>string strtolower(string $string)    //将$string中所有的大写字母转换为小写并返回。</p><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><p><strong>1.</strong> <strong>按字典顺序比较</strong></p><p>int strcmp(string $str1, string $str2)</p><p>int strcasecmp(string $str1, string $str2)</p><p>①按字典顺序比较。若str1大于str2，返回&gt;0；若str1小于str2，返回&lt;0；若str1等于str2，返回0。</p><p>②函数strcmp比较时区分大小写，函数strcasecmp比较时不区分大小写。</p><p><strong>2.</strong> <strong>按自然顺序比较</strong> </p><p>int strnatcmp(string $str1, string $str2)</p><p>int strnatcasecmp(string $str1, string $str2)</p><p>①按自然顺序比较，若str1大于str2，返回&gt;0；若str1小于str2，返回&lt;0；若str1等于str2，返回0。</p><p>②函数strnatcmp比较时区分大小写，函数strnatcasecmp比较时不区分大小写。</p><h2 id="6-3-子串处理"><a href="#6-3-子串处理" class="headerlink" title="6-3 | 子串处理"></a>6-3 | 子串处理</h2><h4 id="访问单个字符"><a href="#访问单个字符" class="headerlink" title="访问单个字符"></a>访问单个字符</h4><p>可以通过方括号或花括号访问字符串中的某单个字符：</p><p><strong>&lt;$string&gt;[&lt;$index&gt;]</strong>  </p><p>或</p><p><strong>&lt;$string&gt; {&lt;$index&gt;}</strong></p><p>可以返回指定索引位上的字符，类型为字符串。</p><p>如果指定的索引$index无效，那么PHP系统将产生一条注意（Notice）信息，式子返回空串。</p><h4 id="获取子串"><a href="#获取子串" class="headerlink" title="获取子串"></a>获取子串</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$start</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$length</span> ])<br><span class="hljs-keyword">string</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$start</span> [,<span class="hljs-keyword">int</span> <span class="hljs-variable">$length</span> [,<span class="hljs-keyword">string</span> <span class="hljs-variable">$encoding</span>]])<br></code></pre></td></tr></table></figure><p>①函数substr以字节为单位；函数mb_substr以字符为单位，$encoding指定字符串采用的字符集的名称。</p><p>②若$start为非负整数，则子串的起始位置是字符串中下标为$start的字符，字符串的首字符下标为0。若指定的子串起始位置超出了字符串的最后一个字符，函数返回false。 </p><p>③若$start为负整数，则子串的起点位置是字符串的倒数第-$start个字符，字符串最后一个字符的位置是-1。若指定子串的起始位置超出了字符串的首字符，子串的起始位置从首字符开始。</p><p>④若忽略$length，则子串从起始位置一直取到字符串的最后一个字符。若$length为0或false，则函数返回空串。</p><p>⑤若$length为正整数，则其指定返回子串的字符个数；若该值太大，则取至最后一个字符。</p><p>⑥若$length为负整数，则子串从起始位置取至倒数第-$length个字符前的一个字符为止，即保留字符串末尾的-$length个字符。</p><p>若-$length大于字符串的长度，则函数返回false；</p><p>若要保留的字符中最左边第1个字符正好是起始位置字符，则函数返回空串；</p><p>若要保留的字符越过了起始位置字符且$start为负整数，则函数返回空串；</p><p>若要保留的字符越过了起始位置字符且$start为非负整数，则函数返回false。</p><p>⑦在函数substr中，若$length为NULL，则函数返回空串。在函数mb_substr中，当$length为NULL时，则子串从起始位置一直取至字符串尾部。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;abcdef&quot;</span>, -<span class="hljs-number">1</span>).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;          <span class="hljs-comment">// 输出: f</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;abcdef&quot;</span>, -<span class="hljs-number">2</span>).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;          <span class="hljs-comment">// 输出: ef</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;abcdef&quot;</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">1</span>).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;       <span class="hljs-comment">// 输出: d</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;abcdef&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;       <span class="hljs-comment">// 输出: abcde</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;abcdef&quot;</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;       <span class="hljs-comment">// 输出: cde</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;abcdef&quot;</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;      <span class="hljs-comment">// 输出: de</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;abcdef&quot;</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">4</span>));         <span class="hljs-comment">// 输出: string(0) &quot;&quot;</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;abcdef&quot;</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">4</span>));          <span class="hljs-comment">// 输出: bool(false) </span><br><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;PHP语言&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;            <span class="hljs-comment">// 输出: 语</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);        <span class="hljs-comment">// 输出: 语言</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="查找子串"><a href="#查找子串" class="headerlink" title="查找子串"></a>查找子串</h4><ul><li><p><strong>strpos</strong>函数</p><p>mixed strpos(string $haystack, mixed $needle [,int $offset ])</p><p>①返回子串$needle在字符串$haystack中第1次出现的位置。若没有发现子串，函数返回false。</p><p>②$offset指定搜索子串的起始位置，只能是非负整数，默认值为0。</p></li><li><p><strong>strrpos</strong>函数</p><p>①返回子串$needle在字符串$haystack中最后一次出现的位置。若没有发现子串，函数返回false。</p><p>②此函数的$offset可以是非负整数，也可以是负整数，默认值是0。若是非负整数，则从下标为$offset的字符开始查找，直至最后一个字符；若是负整数，则从首字符开始查找，直到倒数第-$offset个字符为止（只要子串的首字符在此位置上即可）。</p></li><li><p><strong>stripos</strong>函数</p><p>mixed stripos(string $haystack, mixed $needle [,int $offset ])</p><p>与strpos不同的是，stripos搜索时不区分大小写。</p></li><li><p><strong>strripos</strong>函数</p><p>mixed strripos(string $haystack, mixed $needle [,int $offset ])</p><p>与strrpos不同的是，strripos搜索时不区分大小写。</p></li></ul><h4 id="替换子串"><a href="#替换子串" class="headerlink" title="替换子串"></a>替换子串</h4><ul><li><p><strong>str_replace</strong>函数</p><p>mixed str_replace(mixed $search , mixed $replace, mixed $subject [, int &amp;$count ])</p><p>函数用$replace替换$subject中出现的所有$search，返回替换后的结果字符串。</p><p>①如果$search和$replace都是数组，那么就对$search中每个元素依次做替换操作，期间把$replace中的对应元素作为替换值。如果$replace的元素比$search的元素少，那么用空串作为$search中多余元素的替换值。</p><p>②如果$search是数组，而$replace是字符串，那么$replace被用作$search中的每个元素的替换值。</p><p>③如果$subject是一个数组，则上述替换操作将依次执行于$subject数组的每个元素，函数返回一个数组。</p><p>④如果指定$count变量，返回执行替换操作的次数。</p></li><li><p><strong>substr_replace</strong>函数</p><p>mixed substr_replace(mixed $str, mixed $replacement, mixed $start[, mixed $length])</p><p>函数用$replacement替换$str中从$start开始、长度为$length的子串，返回替换后的结果字符串。</p><p>①参数$start指定要被替换的子串的起始位置。若$start为非负整数，起始位置是下标为$start的字符；若$start为负整数，起始位置是倒数第-$start个字符。</p><p>②参数$length指定要被替换的子串的长度。</p><p>若$length为正整数，表示被替换的字符个数；</p><p>若$length为负整数，则子串从起始位置取至倒数第-$length个字符前的一个字符为止；</p><p>若$length为0，此函数的功能是插入;</p><p>若缺省$length，则被替换的子串是从$start开始至最后一个字符。</p><p>③若$str是数组，则$replacement、$start和$length会应用于$str的每个元素。如果$replacement、$start和$length也可以是数组，那么包括$str在内的各数组对应元素分别进行替换操作。函数返回一个数组。</p></li></ul><h2 id="6-4-分割和连接字符串"><a href="#6-4-分割和连接字符串" class="headerlink" title="6-4 | 分割和连接字符串"></a>6-4 | 分割和连接字符串</h2><ul><li><p><strong>explode</strong>函数</p><p>array explode(string $delimiter , string $string [, int $limit ])</p><p>依据定界字符串delimiter将字符串string分割成若干子串，并保存在一个数组中返回。</p><p>①若指定$limit为正整数，则返回的数组最多包含$limit个元素，最后一个元素包含$string的剩余部分；</p><p>②若指定$limit为0，被当做1处理，此时返回数组仅包含1个元素，即字符串$string本身； </p><p>③若指定$limit为负整数，则返回除了最后-limit个元素外的所有元素，可能会不包含任何元素。</p><p>④若$delimiter是空串，会给出一个警告（Warning）信息，函数返回false。</p></li><li><p><strong>implode</strong>函数</p><p>string implode([string $glue ,] array $pieces)</p><p>将数组pieces中的各元素连接成一个字符串返回，两个元素之间用glue连接。glue的默认值是空串。</p></li></ul><h2 id="6-5-格式化输出"><a href="#6-5-格式化输出" class="headerlink" title="6-5 | 格式化输出"></a>6-5 | 格式化输出</h2><p><strong>printf</strong>函数</p><p>int printf(string $format [, mixed $args [, mixed $… ]])</p><p>①根据格式化模板$format产生一个字符串输出，函数返回格式化产生的字符串的长度(字节数)。</p><p>②格式化模板由普通字符和格式符组成。普通字符原样出现在结果中，格式符通过应用于相应的参数出现在结果中。</p><p>③格式符的一般语法格式如下：%[+][‘&lt;填充符&gt;][-][&lt;宽度&gt;][.&lt;精度&gt;]&lt;类型&gt;</p><p>④类型指明该格式符如何应用于参数数据</p><p><strong>2.</strong> <strong>sprintf</strong>函数</p><p>string sprintf(string $format [, mixed $args [, mixed $… ]])</p><p>与printf不同，sprintf不产生输出，只是根据格式化模板format产生一个字符串并返回</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$num</span> = <span class="hljs-number">50</span>;<br><span class="hljs-variable">$location</span> = <span class="hljs-string">&#x27;tree&#x27;</span>;<br><span class="hljs-variable">$format</span> = <span class="hljs-string">&quot;There are %d monkeys in the %s&lt;br /&gt;&quot;</span>;<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-variable">$format</span>, <span class="hljs-variable">$num</span>, <span class="hljs-variable">$location</span>);<br><br><span class="hljs-variable">$price</span> = <span class="hljs-number">12.567</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;The price is %5.2f&quot;</span>, <span class="hljs-variable">$price</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="6-6-字符串特殊处理"><a href="#6-6-字符串特殊处理" class="headerlink" title="6-6 | 字符串特殊处理"></a>6-6 | 字符串特殊处理</h2><ul><li><p><strong>nl2br</strong>函数</p><p>string nl2br(string $string)</p><p>将参数串中每个新行符(\n，\r，\n\r，\r\n)转换为HTML换行符(&lt;br /&gt;)。</p></li><li><p><strong>将字符转换成HTML实体</strong></p><p>string htmlspecialchars(string $string [, int $quotestyle [, string $encoding [, bool $double_encode]]] )</p><p>①将字符串中的特殊字符转换成HTML实体。</p><p>②参数string：要被转换的字符串。</p><p>③参数quotestyle：指定引号的转换</p><p>④参数encoding：指定字符串所用的字符编码。</p><p>⑤double_encode：指定是否转换已有的HTML实体，默认值为true，即要转换。</p></li><li><p><strong>addslashes</strong>函数</p><p>string addslashes(string $str)</p><p>①函数在参数字符串$str中的特殊字符前加上反斜杠（\）产生一个新的字符串返回。特殊字符包括：单引号（’）、双引号（”）、反斜线（\）与空字符（NUL）。</p><p>②这一功能有时在构建数据库的SQL语句时是有用的。</p></li><li><p><strong>urlencode函数</strong></p><p>string urlencode(string $str )</p><p>①函数可以对作为URL中查询参数值的字符串进行相应的编码并返回，以便作为URL的一部分。</p><p>②通常，URL只能包含字母数字以及-和_字符，对其他字符都要进行相应的编码。</p></li></ul><h2 id="6-7-正则表达式"><a href="#6-7-正则表达式" class="headerlink" title="6-7 | 正则表达式"></a>6-7 | 正则表达式</h2><ul><li><p>字符类</p><p>一个字符类在目标字符串中匹配一个单独的字符。</p><ul><li><p>一般字符 </p><p>一般字符类由一对方括号表示，可以使用-和^：[…]  [^…]  [a-z]  [^0-9]</p><table><thead><tr><th>一般字类</th><th>含义</th></tr></thead><tbody><tr><td>[…]</td><td>字符集合。匹配所包含的任意一个字符。例如，’[abc]’  可以匹配 “plain” 中的  ‘a’。</td></tr><tr><td>[^…]</td><td>反向字符集合。匹配未包含的任意字符。例如，’[^abc]’  可以匹配 “plain” 中的’p’。</td></tr><tr><td>[char1-char2]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td>[^char1-char2]</td><td>排除式字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr></tbody></table></li><li><p>特殊字符</p><table><thead><tr><th>特殊字符类</th><th align="left">含义</th></tr></thead><tbody><tr><td>.</td><td align="left">出现在方括号外，匹配除 “\n” 之外的任何单个字符。如‘a.c’匹配abc、awc、a9c、a#c等。</td></tr><tr><td>\w</td><td align="left">匹配包括下划线的任何单词字符，等价于[A-Za-z0-9_]。</td></tr><tr><td>\W</td><td align="left">匹配任何非单词字符，等价于[^A-Za-z0-9_]。</td></tr><tr><td>\d</td><td align="left">匹配一个数字字符，等价于[0-9]。</td></tr><tr><td>\D</td><td align="left">匹配一个非数字字符，等价于[^0-9]。</td></tr><tr><td>\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等，等价于[\n\r\f\t ]。说明：最后包含一个空格，但不包括\v。</td></tr><tr><td>\S</td><td align="left">匹配任何非空白字符。等价于[^\n\r\f\t ]。</td></tr></tbody></table></li></ul></li><li><p>元字符类与转义字符</p></li><li><p>选项模式与子模式</p></li><li><p>量词</p><p>量词用于指定重复次数，出现在要重复的对象后面。可以重复的对象包括：单独字符、字符类、转义字符、后向引用、子模式</p><table><thead><tr><th>*</th><th>匹配0次或更多次。例如，’xy*z’可以匹配”xz”、”xyz”、”xyyz”等。*等价于{0,}。</th></tr></thead><tbody><tr><td>+</td><td>匹配1次或更多次。例如，’xy+z’可以匹配”xyz”、”xyyz”、”xyyyz”等。+等价于{1,}。</td></tr><tr><td>?</td><td>匹配0次或1次。例如，’do(es)?’可以匹配”do”和”does”。?等价于{0,1}。</td></tr><tr><td>{<em>n}</em></td><td>严格匹配n次。 例如，’xy{2}z’可以匹配”xyyz”。</td></tr><tr><td>{<em>n,}</em></td><td>至少匹配n次。 例如，’xy{2,}z’可以匹配”xyyz”、”xyyyz”、”xyyyyz”等。</td></tr><tr><td>{<em>n,m}</em></td><td>至少匹配n次、最多匹配m次。例如，’xy{2,3}z’可以匹配”xyyz”、”xyyyz”。</td></tr></tbody></table></li><li><p>断言</p></li></ul><h2 id="6-8-PHP模式匹配函数"><a href="#6-8-PHP模式匹配函数" class="headerlink" title="6-8 | PHP模式匹配函数"></a>6-8 | PHP模式匹配函数</h2><ul><li><strong>preg_match函数（模式匹配及子模式匹配</strong>）</li><li><strong>preg_match_all</strong>函数</li><li><strong>preg_split</strong>函数</li></ul><h1 id="第8章-PHP访问数据库"><a href="#第8章-PHP访问数据库" class="headerlink" title="第8章 PHP访问数据库"></a>第8章 PHP访问数据库</h1><blockquote><p>PHP应用通常利用PHP的MySQLi扩展和PDO扩展访问数据库。</p><p>MySQLi扩展主要提供MySQLi、MySQLi_RESULT和MySQLi_STMT三个类，程序员可以使用这些类建立与MySQL数据库的连接、访问MySQL数据库以及处理查询结果。</p><p>PDO是一种数据访问抽象层，它为PHP程序员提供了一个轻量级的一致的编程接口。PDO扩展提供的应用程序编程接口主要包括PDO、PDOStatement和PDOException类。</p></blockquote><h2 id="8-1-使用MySQLi访问数据库"><a href="#8-1-使用MySQLi访问数据库" class="headerlink" title="8-1 | 使用MySQLi访问数据库"></a>8-1 | 使用MySQLi访问数据库</h2><h4 id="建立与MySQL服务器的连接"><a href="#建立与MySQL服务器的连接" class="headerlink" title="建立与MySQL服务器的连接"></a>建立与MySQL服务器的连接</h4><ul><li><p><strong>实例化</strong>MySQLi</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">construct</span> (<span class="hljs-keyword">string</span> <span class="hljs-variable">$host</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$username</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$passwd</span> [, <span class="hljs-keyword">string</span> <span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;&quot;</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$port</span> = <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&quot;mysqli.default_port&quot;</span>)]])<br></code></pre></td></tr></table></figure></li><li><p><strong>连接错误码和错误信息</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-variable">$connect_errno</span>                   <span class="hljs-comment">// 错误码，连接出错时非零</span><br><span class="hljs-keyword">string</span> <span class="hljs-variable">$connect_error</span>               <span class="hljs-comment">// 错误信息</span><br><span class="hljs-comment">//例：如$mysqli-&gt;connect_errno</span><br></code></pre></td></tr></table></figure></li><li><p><strong>关闭连接</strong></p><p>bool close()                         // 关闭与数据库服务器的连接</p></li></ul><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=UTF-8&quot;</span>);<br><br>@ <span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;elective_manage&quot;</span>, <span class="hljs-number">3306</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$mysqli</span>-&gt;connect_errno) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不能连接到数据库&lt;br/&gt;&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;成功连接至数据库！&quot;</span>;<br><span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="访问MySQL数据库"><a href="#访问MySQL数据库" class="headerlink" title="访问MySQL数据库"></a>访问MySQL数据库</h4><ul><li><strong>设置字符集</strong></li><li><strong>选择数据库</strong></li><li><strong>执行sql语句</strong></li><li><strong>获取受影响行数</strong></li></ul><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=UTF-8&quot;</span>);<br><br>@ <span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;elective_manage&quot;</span>, <span class="hljs-number">3306</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$mysqli</span>-&gt;connect_errno) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不能连接到数据库&lt;br/&gt;&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;SET NAMES &#x27;utf8&#x27;&quot;</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO opencourse VALUES(null, &#x27;2015-2016-1&#x27;, &#x27;0901011008&#x27;, &#x27;1011&#x27;, default),&quot;</span><br>        . <span class="hljs-string">&quot;(null, &#x27;2015-2016-1&#x27;, &#x27;0901011008&#x27;, &#x27;1016&#x27;, default)&quot;</span>;<br><br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;SQL语句执行失败！&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;插入的行数：&quot;</span>, <span class="hljs-variable">$mysqli</span>-&gt;affected_rows;<br><br><span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="处理查询结果（MySQLi-RESULT）"><a href="#处理查询结果（MySQLi-RESULT）" class="headerlink" title="处理查询结果（MySQLi_RESULT）"></a>处理查询结果（MySQLi_RESULT）</h4><ul><li><strong>获取行数和列数</strong></li><li><strong>移动游标</strong></li><li><strong>返回查询结果的一行</strong></li><li><strong>释放查询结果</strong></li></ul><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=UTF-8&quot;</span>);<br><br>@ <span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;elective_manage&quot;</span>, <span class="hljs-number">3306</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$mysqli</span>-&gt;connect_errno) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不能连接到数据库&lt;br/&gt;&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;SET NAMES &#x27;utf8&#x27;&quot;</span>);<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;SELECT sn, sname, birthday FROM student WHERE gender=&#x27;男&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$query</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;SQL语句执行失败！&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;共&quot;</span> . <span class="hljs-variable">$result</span>-&gt;num_rows . <span class="hljs-string">&quot;行：&lt;br /&gt;&quot;</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_array</span>()) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;sn&#x27;</span>] . <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;sname&#x27;</span>] . <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;birthday&#x27;</span>] . <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">foreach($result as $row) &#123;</span><br><span class="hljs-comment">    echo $row-&gt;sn . &quot; &quot; . $row-&gt;sname . &quot; &quot; . $row-&gt;birthday . &quot;&lt;br /&gt;&quot;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">free</span>();<br><span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="事务管理（MySQLi）"><a href="#事务管理（MySQLi）" class="headerlink" title="事务管理（MySQLi）"></a>事务管理（MySQLi）</h4><ul><li><p><strong>初始化一个事务</strong></p><p>bool <strong>begin_transaction</strong>(void)</p></li><li><p><strong>提交事务</strong></p><p>bool <strong>commit</strong>(void)</p></li><li><p><strong>回滚事务</strong></p><p>bool <strong>rollback</strong>(void)</p></li></ul><h2 id="8-2-使用预处理语句"><a href="#8-2-使用预处理语句" class="headerlink" title="8-2 | 使用预处理语句"></a>8-2 | 使用预处理语句</h2><h4 id="创建预处理语句"><a href="#创建预处理语句" class="headerlink" title="创建预处理语句"></a>创建预处理语句</h4><ul><li>初始化语句对象</li><li>准备SQL语句</li></ul><h4 id="执行预处理语句"><a href="#执行预处理语句" class="headerlink" title="执行预处理语句"></a>执行预处理语句</h4><ul><li>绑定参数</li><li>执行</li><li>产生缓存结果集</li><li>获取受影响的行数</li></ul><h4 id="处理查询结果"><a href="#处理查询结果" class="headerlink" title="处理查询结果"></a>处理查询结果</h4><ul><li>获取列数和行数</li><li>移动游标</li><li>绑定结果</li><li>获取查询结果</li><li>释放缓存结果集</li><li>关闭语句对象</li></ul><h2 id="8-3-使用PDO访问数据库"><a href="#8-3-使用PDO访问数据库" class="headerlink" title="8-3 | 使用PDO访问数据库"></a>8-3 | 使用PDO访问数据库</h2><blockquote><p>PDO（PHP Data Object）是一种PHP扩展，它的使用与MySQLi扩展非常相似，但PDO不仅能用于访问MySQL数据库，也能用于访问其他的数据库。</p><p>PDO是一种数据访问抽象层，它为PHP程序员提供了一个轻量级的一致的编程接口。利用它，PHP应用能够用相同的代码访问各种不同的数据库。</p><p>PDO编程接口由3个类组成，包括PDO类、PDOStatement类和PDOException类。</p></blockquote><h4 id="建立与数据库服务器的连接"><a href="#建立与数据库服务器的连接" class="headerlink" title="建立与数据库服务器的连接"></a>建立与数据库服务器的连接</h4><p>一个PDO类的实例对象代表PHP与数据库服务器之间的一个连接。</p><p>construct(string $dsn [, string $username [, string $password]])</p><p>参数$dsn表示数据源名称（Data Source Name），包含与数据库连接所需的信息，如服务器的IP地址、端口号、数据库的名称等。$dsn由PDO驱动器名开头，紧跟一个冒号，后面的语法通常与具体的PDO驱动器有关。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=UTF-8&quot;</span>);<br><br><span class="hljs-variable">$dsn</span> = <span class="hljs-string">&#x27;mysql:dbname=elective_manage;host=127.0.0.1&#x27;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$pdo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-variable">$dsn</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$password</span>);<br>&#125; <span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;连接失败: &#x27;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;成功连接至elective_manage数据库&#x27;</span>;<br><span class="hljs-variable">$pdo</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h4><ul><li>执行增删改</li><li>获取错误码和错误信息</li><li>执行查询</li></ul><h4 id="使用预处理语句"><a href="#使用预处理语句" class="headerlink" title="使用预处理语句"></a>使用预处理语句</h4><ul><li>创建预处理语句</li><li>绑定参数</li><li>执行预处理语句</li></ul><h4 id="访问结果集"><a href="#访问结果集" class="headerlink" title="访问结果集"></a>访问结果集</h4><ul><li>获取列数</li><li>绑定列</li><li>获取结果集的一行</li><li>获取一行中的单列值</li><li>获取所有行</li></ul><h4 id="管理事物"><a href="#管理事物" class="headerlink" title="管理事物"></a>管理事物</h4><ul><li>初始化一个事物</li><li>提交事物</li><li>回滚事物</li></ul><h2 id="8-4-分页显示"><a href="#8-4-分页显示" class="headerlink" title="8-4  | 分页显示"></a>8-4  | 分页显示</h2><p>要显示的数据集通常通过查询数据库获得。在实现分页显示时，可以有两种策略：一是每次只从数据库获取当前页的数据并呈现；另一种是预先从数据库获取整个数据集，然后把当前页呈现出来。</p><p>为实现分页显示功能，通常需要引入以下变量：</p><ul><li><p><strong>$rows</strong>：数据集的大小，即数据集包含的记录数。</p></li><li><p><strong>$pageSize</strong>：页面大小，即一次显示几条记录（行）。</p></li><li><p><strong>$pageCount</strong>：总页数，可根据$rows与$pageSize计算获得：</p><p>$pageCount = (int)ceil($rows/$pageSize);</p></li><li><p><strong>$currentPage</strong>：当前页码。该变量的初值可以设置为1，之后能由用户指定。</p></li><li><p><strong>$first</strong>：当前页第1条记录在数据集中的索引。可以根据$currentPage和$pageSize计算获得：</p><p>$first = ($currentPage-1)*$pageSize;</p></li></ul><h1 id="第9章-表单与会话"><a href="#第9章-表单与会话" class="headerlink" title="第9章 表单与会话"></a>第9章 表单与会话</h1><h2 id="9-1-表单处理"><a href="#9-1-表单处理" class="headerlink" title="9-1 | 表单处理"></a>9-1 | 表单处理</h2><h4 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h4><ul><li><p>GET方法</p><p>GET方法适合少量数据的提交，GET方法不适合提交密码等敏感数据。</p></li><li><p>POST方法</p><p>POST方法的请求数据放置在请求体中、而不是URL中，所以其信息相对较为安全，且传输的数据量没有大小限制，可以非常大。</p></li></ul><h4 id="获取表单数据"><a href="#获取表单数据" class="headerlink" title="获取表单数据"></a>获取表单数据</h4><ol><li><p>获取请求方式</p><p>$_SERVER[“REQUEST_METHOD”] ， “GET”|”POST”</p></li><li><p>获取GET数据</p><p>$_GET[“参数名”]，如$_GET[“name”]</p><p>$_GET是一个包含通过GET方法传递给当前脚本的请求参数的数组</p></li><li><p>获取POST数据</p><p>$_POST[“参数名”]，如$_POST[“name”]</p><p>$_POST是一个包含通过POST方法传递给当前脚本的请求参数数组</p></li></ol><h4 id="验证表单数据"><a href="#验证表单数据" class="headerlink" title="验证表单数据"></a>验证表单数据</h4><h2 id="9-2-会话管理"><a href="#9-2-会话管理" class="headerlink" title="9-2 | 会话管理"></a>9-2 | 会话管理</h2><h2 id="9-3-页面跳转与重定向"><a href="#9-3-页面跳转与重定向" class="headerlink" title="9-3 | 页面跳转与重定向"></a>9-3 | 页面跳转与重定向</h2><p>PHP中实现网页跳转的几种常见技术</p><ul><li>使用超链接&lt;a&gt;元素</li><li>使用表单&lt;form&gt;元素</li><li>使用特定的&lt;meta&gt;标记</li><li>使用PHP中特定的header函数</li></ul><h2 id="9-4-文件上传与下载"><a href="#9-4-文件上传与下载" class="headerlink" title="9-4 | 文件上传与下载"></a>9-4 | 文件上传与下载</h2><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><ul><li><p>文件的打开与关闭</p><p>(1) fopen函数</p><p>resource fopen($filename, $mode [, bool $use_include_path=false])</p><p>(2) fclose函数</p><p>bool fclose(resource $handle)</p></li><li><p>文件的写入</p><p>(1) fwrite函数</p><p>int fwrite(resource $handle, string $string [, int $length])</p><p>(2) fputcsv函数</p><p>int fputcsv(resource $handle, array $fields [, string $delimiter = ‘,’ [, string $enclosure = ‘“‘]])</p></li><li><p>文件的读取</p><p>(1) fread函数</p><p>string fread(resource $handle, int $length)</p><p>(2) fgets函数</p><p>string fgets(resource $handle [, int $length])</p><p>(3) fgetcsv函数</p><p>array fgetcsv(resource $handle [, int $length=0 [, string $delimiter=’,’ [, string $enclosure=’”‘]]])</p><p>(4) feof函数</p><p>bool feof(resource $handle)</p><p>(5) rewind函数</p><p>bool rewind(resource $handle)</p></li><li><p>其他函数</p><p>(1) readfile函数</p><p>int <strong>readfile</strong>(string $filename [, bool $use_include_path = false])</p><p>函数读取指定文件的内容并将其写入到输出缓冲区。</p><p>函数返回实际从文件中读入的字节数。</p><p>(2) filesize函数</p><p>int <strong>filesize</strong>(string $filename)</p><p>函数返回指定文件的大小，即文件的字节数。</p><p>(3) iconv函数</p><p>string <strong>iconv</strong>(string $in_charset , string $out_charset , string $str)</p><p>函数将字符串$str从$in_charset字符集编码转换为</p><p>$out_charset字符集编码。</p></li></ul><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><ul><li>文件上传表单</li><li>获取上传文件</li></ul><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><ul><li>用a元素直接打开文件</li><li>通过读取文件内容打开文件</li></ul><h1 id="第10章-使用数组"><a href="#第10章-使用数组" class="headerlink" title="第10章 使用数组"></a>第10章 使用数组</h1><h2 id="10-1-数组"><a href="#10-1-数组" class="headerlink" title="10-1 | 数组"></a>10-1 | 数组</h2><ul><li>在PHP中，数组是有序的映射。一个数组由若干元素组成，每个元素是一个键-值对。键可以是整数也可以是字符串，值可以是任意类型。</li><li>在一个PHP数组中，键的类型可以是混合：有些元素的键是整数，有些元素的键是字符串。</li><li>如果一个数组的元素的值本身就是数组，就可形成多维数组。</li><li>在PHP中，不要求一个数组的各元素的值具有相同的类型。</li></ul><h2 id="10-2-创建和初始化数组"><a href="#10-2-创建和初始化数组" class="headerlink" title="10-2 | 创建和初始化数组"></a>10-2 | 创建和初始化数组</h2><h4 id="使用array语言结构使用array语言结构"><a href="#使用array语言结构使用array语言结构" class="headerlink" title="使用array语言结构使用array语言结构"></a><strong>使用array语言结构使用array语言结构</strong></h4><p>①语言结构array用于创建并初始化一个数组：</p><p>array (</p><p>  [[&lt;key&gt;]=&gt;&lt;value&gt; [, [&lt;key&gt;]=&gt;&lt;value&gt;]*]</p><p>)</p><p>②在指定一个元素时，键是可以缺省的。此时，PHP将使用之前已经被使用的最大的整数键加1作为该元素的键，且至少是0。</p><p>③一个数组元素的值可以是标量类型数据，也可以是数组本身，这样就能形成二维数组和多维数组。多维数组可以使用嵌套的array来创建。</p><h4 id="使用range函数"><a href="#使用range函数" class="headerlink" title="使用range函数"></a><strong>使用range函数</strong></h4><p>①range函数可以快速创建一个由指定范围内的值填充的数组。其语法格式如下：</p><p>​    array range (mixed $start , mixed $end [, number $step ])</p><p>②参数$start、$end和$step分别表示用于填充新数组的初值、最大值和步长。参数$step是可选的，其默认值为1。</p><h2 id="10-3-操作数组元素"><a href="#10-3-操作数组元素" class="headerlink" title="10-3 | 操作数组元素"></a>10-3 | 操作数组元素</h2><h4 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h4><p>①可以通过方括号访问数组元素，其格式如下：<br> &lt;array&gt;[&lt;key&gt;]</p><p>   说明：访问数组元素时，方括号和花括号是可以互换的，如$arr[5]可以用$arr{5}代替。</p><p>②bool array_key_exists(mixed $key, array $array)<br> 检测指定的$key是否为数组$array的某个元素的键，若是返回true，否则返回false。</p><p>③bool in_array(mixed $needle, array $haystack [, bool $strict ] )<br> 检测指定值$needle是否是数组$haystack的某个元素的值，若是返回true，否则返回false。<br> 参数$strict是可选的，默认值为false，此时采用相等比较（==）。若将其设置为true，则采用全等比较（===）。</p><p>④mixed array_search(mixed $needle, array $haystack [, bool $strict] )<br> 检测指定值$needle是否是数组$haystack的某个元素的值，若是函数返回相应元素的键，否则返回false。若数组中存在多个元素具有该值，则返回第一个元素的键。</p><h4 id="修改、添加或删除数组元素"><a href="#修改、添加或删除数组元素" class="headerlink" title="修改、添加或删除数组元素"></a>修改、添加或删除数组元素</h4><p>①利用方括号同样可以修改数组元素或添加数组元素。这只需要将值赋给指定的的元素即可。<br> 格式1：&lt;array&gt;[&lt;key&gt;] = &lt;value&gt;;</p><p>​        将数组元素array[key]的值替换成value。如果数组中原先没有该元素，那么添加这样一个元素。</p><p> 格式2：&lt;array&gt;[] = &lt;value&gt;;</p><p>​        在数组中添加一个元素，元素的值为value，键为数组之前已经被用的最大的整数键加1，或者为0。</p><p>②使用unset函数可以删除一个数组元素，甚至整个数组。</p><p>例如：<br> unset($new_arr[‘y’]);    // 删除数组new_arr中键为’y’的元素<br> unset($new_arr);     // 删除整个数组new_arr </p><h4 id="在数组头部或尾部操作元素"><a href="#在数组头部或尾部操作元素" class="headerlink" title="在数组头部或尾部操作元素"></a><strong>在数组头部或尾部操作元素</strong></h4><p>①array_unshift()函数<br> array_unshift()函数用于在参数数组$array的头部插入一个或多个元素，其语法格式如下：<br> int array_unshift (array &amp;$array , mixed $value1 [, mixed $… ])<br> 新插入元素的键是数值键，与数组中原先已存在的数值键一起，重新设置为从0开始的连续整数。数组中原有的字符串键不变。函数返回插入元素后数组的元素个数。</p><p>②array_shift()函数<br> array_shift()函数用于从参数数组的头部删除一个元素，其语法格式如下：<br> mixed array_shift (array &amp;$array)<br> 第一个元素被删除后，数组中其他数值键被重新设置为以0开始的连续整数。函数返回被删除元素的值。若数组原先是空的，函数返回NULL。</p><p>③array_push()函数<br> array_push()函数用于在参数数组array的尾部添加一个或多个元素，其语法格式如下：<br> int array_push (array &amp;$array, mixed $value1 [, mixed $… ] )<br> 新添加元素的键是数值键，从原有的最大数值键加1开始设置。如果原先没有数值键元素，则新添加元素的键从0开始设置。函数返回添加元素后数组的元素数。</p><p>④array_pop()函数<br> array_pop()函数用于从参数数组的尾部删除一个元素，其语法格式如下：<br> mixed array_pop (array &amp;$array)<br> 函数返回被删除的元素的值。若数组原先是空的，函数返回NULL。</p><h2 id="10-4-遍历数组"><a href="#10-4-遍历数组" class="headerlink" title="10-4 | 遍历数组"></a>10-4 | 遍历数组</h2><h4 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h4><p>①当创建一个数组时，其数组指针初始指向第一个元素。</p><p>②mixed next (array &amp;$array)<br> 移动指定数组$array的内部指针至下一个元素，并返回下一个元素的值。</p><p>③mixed prev (array &amp;$array)<br> 移动指定数组$array的内部指针至上一个元素，并返回上一个元素的值。</p><p>④mixed reset (array &amp;$array)<br> 移动指定数组$array的内部指针至第一个元素，并返回第一个元素的值。</p><p>⑤mixed end (array &amp;$array)<br> 移动指定数组$array的内部指针至最后一个元素，并返回最后一个元素的值。</p><p>⑥mixed current (array &amp;$array)<br> 返回数组$array当前元素的值。如果数组为空，或者数组指针移出了数组的范围，函数返回false。</p><p>⑦mixed key (array &amp;$array)<br> 返回数组$array当前元素的键。如果数组为空，或者数组指针移出了数组的范围，函数返回NULL。</p><h4 id="使用for语句遍历数组"><a href="#使用for语句遍历数组" class="headerlink" title="使用for语句遍历数组"></a><strong>使用for语句遍历数组</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$fruit</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;cranberry&#x27;</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$fruit</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$c</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$fruit</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用while语句遍历数组"><a href="#使用while语句遍历数组" class="headerlink" title="使用while语句遍历数组"></a><strong>使用while语句遍历数组</strong></h4><p>①key函数、current函数、next函数。</p><p>②each函数、list结构</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$fruit</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-string">&#x27;cranberry&#x27;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$key</span>=<span class="hljs-title function_ invoke__">key</span>(<span class="hljs-variable">$fruit</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>.<span class="hljs-string">&quot;=&gt;&quot;</span>.<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-variable">$fruit</span>).<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">next</span>(<span class="hljs-variable">$fruit</span>);<br>&#125;<br><span class="hljs-comment">// 使用each函数和list语言结构</span><br><span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$fruit</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">list</span>(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>) = <span class="hljs-title function_ invoke__">each</span>(<span class="hljs-variable">$fruit</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>.<span class="hljs-string">&quot;=&gt;&quot;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用foreach语句遍历数组"><a href="#使用foreach语句遍历数组" class="headerlink" title="使用foreach语句遍历数组"></a><strong>使用foreach语句遍历数组</strong></h4><p>①格式1：<br> foreach (<array_expression> as &lt;$value&gt;)<br>   &lt;statement&gt;</p><p>②格式2：<br> foreach (<array_expression> as &lt;$key&gt; =&gt; &lt;$value&gt;)<br>   &lt;statement&gt;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$fruit</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-string">&#x27;cranberry&#x27;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$fruit</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>.<span class="hljs-string">&quot;=&gt;&quot;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="10-5-数组运算符"><a href="#10-5-数组运算符" class="headerlink" title="10-5 | 数组运算符"></a>10-5 | 数组运算符</h2><p>PHP提供了一些数组运算符，可以实现数组的联合、相等和不相等比较。</p><table><thead><tr><th>运算符</th><th>名称</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>联合</td><td>$a + $b</td><td>返回一个包含了$a和$b两个数组中所有元素的数组。</td></tr><tr><td>==</td><td>松散相等</td><td>$a == $b</td><td>如果数组$a和数组$b具有相同的键值对，返回true。</td></tr><tr><td>===</td><td>严格相等</td><td>$a === $b</td><td>如果数组$a和数组$b具有相同的键值对以及相同的顺序和类型，返回true。</td></tr><tr><td>!=（&lt;&gt;）</td><td>不松散相等</td><td>$a != $b</td><td>如果数组$a和数组$b不是松散相等，返回true。</td></tr><tr><td>!==</td><td>不严格相等</td><td>$a !== $b</td><td>如果数组$a和数组$b不是严格相等，返回true。</td></tr></tbody></table><h2 id="10-6-数组排序"><a href="#10-6-数组排序" class="headerlink" title="10-6 | 数组排序"></a>10-6 | 数组排序</h2><ul><li><h4 id="sort函数"><a href="#sort函数" class="headerlink" title="sort函数"></a>sort函数</h4><p>bool sort (array &amp;$array [, int $sort_flags])</p><p>①函数根据元素值对数$array各元素从小到大进行排序。排序后，各元素的键重新设置为从0为开始的连续的整数。若排序成功，函数返回true；否则，返回false</p><p>②可选参数sort_flags的取值：<br> SORT_REGULAR：默认值。 正常比较（不改变类型）。<br> SORT_NUMERIC：数值化比较。<br> SORT_STRING：字符串化比较。<br> SORT_LOCALE_STRING：基于当前场所的字符串化比较。<br> SORT_NATURAL：自然顺序比较。<br> SORT_FLAG_CASE：能与SORT_STRING或SORT_NATURAL组合，以便比较时不区分大小写。</p></li><li><h4 id="asort和ksort函数"><a href="#asort和ksort函数" class="headerlink" title="asort和ksort函数"></a>asort和ksort函数</h4><p>①bool asort ( array &amp;$array [, int $sort_flags])<br> 该函数根据元素值对数组$array各元素从小到大进行排序。排序时，各元素的键和值保持关联。若排序成功，函数返回true；否则，返回false。</p><p>②bool ksort ( array &amp;$array [, int $sort_flags])<br> 该函数根据元素键对数组$array各元素从小到大进行排序。排序时，各元素的值和键保持关联。若排序成功，函数返回true；否则，返回false。</p></li><li><h4 id="降序排序"><a href="#降序排序" class="headerlink" title="降序排序"></a>降序排序</h4><p>① bool rsort(array &amp;$array [, int $sort_flags])</p><pre><code class="hljs"> bool arsort(array &amp;$array [, int $sort_flags]) bool krsort(array &amp;$array [, int $sort_flags])</code></pre><p>②上面三个函数分别与sort、asort和ksort函数相对应。</p></li><li><h4 id="用户定义排序"><a href="#用户定义排序" class="headerlink" title="用户定义排序"></a>用户定义排序</h4></li></ul><h2 id="10-7-并集、交集和差集"><a href="#10-7-并集、交集和差集" class="headerlink" title="10-7 | 并集、交集和差集"></a>10-7 | 并集、交集和差集</h2><h4 id="求数组的并集"><a href="#求数组的并集" class="headerlink" title="求数组的并集"></a>求数组的并集</h4><p>①合并数组可以将若干数组合并在一起，返回一个包含各数组所有元素的数组。合并时，各参数数组依次将其各元素按其原先的顺序追加到结果数组中，各数值键被重新设置为从0开始的连续整数。</p><p>②array array_merge(array $array1 [, array $…])<br> array array_merge_recursive ( array $array1 [, array $…])</p><p>③array_merge_recursive函数与array_merge函数的功能大致相同，区别在于：如果合并的数组中存在有相同字符串键的元素，不是执行替换操作，而是合并操作，即将两个值合并成一个数组作为元素值。如果两个值本身就是数组，就将两个数组合并成一个数组作为元素值。所以这是一种递归合并。</p><h4 id="求数组的交集"><a href="#求数组的交集" class="headerlink" title="求数组的交集"></a>求数组的交集</h4><p>①array array_intersect ( array $array1, array $array2 [, array $array3]*)<br> 函数返回一个数组，这个数组仅包含第一个参数数组中其值在其他所有参数数组中都出现的元素。</p><p>②array array_intersect_assoc ( array $array1,  array $array2 [, array $array3]*)<br> 函数返回一个数组，这个数组仅包含第一个参数数组中其键-值对在其他所有参数数组中都出现的元素。</p><h4 id="求数组的差集"><a href="#求数组的差集" class="headerlink" title="求数组的差集"></a>求数组的差集</h4><p>①array array_diff ( array $array1, array $array2 [, array $array3]*)<br> 返回一个数组，这个数组仅包含第一个参数数组中其值没有在任何其他参数数组中出现的元素。</p><p>②array array_diff_assoc ( array $array1,  array $array2 [,array $array3]*)<br> 返回一个数组，这个数组仅包含第一个参数数组中其键-值对没有在任何其他参数数组中出现的元素。</p><h2 id="10-8-其他常用的数组函数"><a href="#10-8-其他常用的数组函数" class="headerlink" title="10-8 | 其他常用的数组函数"></a>10-8 | 其他常用的数组函数</h2><h4 id="计数与统计"><a href="#计数与统计" class="headerlink" title="计数与统计"></a>计数与统计</h4><p>①int count(array $array [, int $mode])<br> 返回数组中元素的个数。参数mode的取值如下：<br> COUNT_NORMAL：默认值。仅统计最外层数组的元素个数。<br> COUNT_RECURSIVE：递归统计各层数组的元素个数。</p><p>②array array_count_values(array $array)<br> 返回一个关联数组，其元素的键是参数数组中元素的值，相应的值是该键作为元素值在参数数组中出现的次数（频度）。</p><p>③number array_sum(array $array)<br> 计算参数数组中各元素值的和，返回一个整数或浮点数。<br> 对非数值型元素值，函数会将其转换成数值（大多数情况为0）。函数对内部数组的元素值不会进行递归累加。</p><h1 id="第11章-PHP面向对象程序设计"><a href="#第11章-PHP面向对象程序设计" class="headerlink" title="第11章 PHP面向对象程序设计"></a>第11章 PHP面向对象程序设计</h1><p>…….</p><h1 id="第12章-Ajax与jQuery"><a href="#第12章-Ajax与jQuery" class="headerlink" title="第12章 Ajax与jQuery"></a>第12章 Ajax与jQuery</h1><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ul><li>Ajax是Asynchronous JavaScript And XML的首字母缩写，称为异步JavaScript和XML。</li><li>Ajax不是一种新的编程语言或技术，而是现有的几种技术的一种结合。它产生了一种新的、强大的开发Web应用的方法。Ajax包括：<ul><li>基于HTML+CSS来呈现信息。</li><li>使用XMLHttpRequest从Web服务器异步获取数据。</li><li>利用XML、JSON等来表示数据。</li><li>通过DOM实现页面的局部更新及动态效果。</li><li>运用JavaScript将各个方面绑定在一起。</li></ul></li><li>利用Ajax技术，Web应用可以在后台异步地向服务器发送数据和获取数据，而不会妨碍原有页面的显示和行为；Web应用能够动态地局部更新原有的页面，而不需要完整地重载一个页面。</li><li>Ajax的优点<ul><li>带来持续、动态的用户体验。</li><li>减轻网络通信的负担。</li><li>减轻服务器的负担。</li><li>创建桌面应用风格的界面。</li><li>促进数据和页面呈现的分离。</li></ul></li><li>Ajax的缺点<ul><li>无法正常使用书签化和后退按钮的功能。</li><li>兼容性不理想。不同的浏览器对Ajax的支持状况有所不同。</li><li>使用Ajax的脚本代码保存在HTML页中，不利于代码的保密。</li></ul></li></ul><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><ul><li>jQuery是一个“写的更少，但做的更多”的轻量级JavaScript库。涉及：<ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li> HTML 事件处理</li><li>HTML元素的动画效果</li><li>Ajax等</li></ul></li><li>jQuery库位于一个JavaScript文件中，其中包含了所有的jQuery函数和方法。<br> 可以通过下面的标记把jQuery添加到网页中：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">“text/javascript”</span> </span><br><span class="hljs-tag">          <span class="hljs-attr">src</span>=<span class="hljs-string">“jquery-3.1.0.min.js”</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>jQuery是一个开源项目，可以从<a href="http://www.jquery.com免费下载.共有两个版本的/">www.jquery.com免费下载。共有两个版本的</a> jQuery 可供下载：一份是精简过的，另一份是未压缩的（供调试或阅读）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>解忧杂货</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2022五月刷题日记</title>
    <link href="/2022/05/02/LeetCode%202022%E4%BA%94%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/05/02/LeetCode%202022%E4%BA%94%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="LC-43-字符串相乘"><a href="#LC-43-字符串相乘" class="headerlink" title="LC 43.字符串相乘"></a>LC 43.字符串相乘</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p><p><strong>注意</strong>：不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>对每次得到的字符串进行累加，可以使用「<a href="https://leetcode-cn.com/problems/add-strings/">415. 字符串相加</a>」的做法。</p><p><strong>方法1</strong></p><p>如果 num1 和 num2 之一是 0，则直接将 0 作为结果返回即可。</p><p>如果 num1 和 num2 都不是 0，则可以通过模拟「竖式乘法」的方法计算乘积。从右往左遍历乘数，将乘数的每一位与被乘数相乘得到对应的结果，再将每次得到的结果累加。这道题中，被乘数是 num1，乘数是 num2。</p><p>需要注意的是，num2 除了最低位以外，其余的每一位的运算结果都需要补 0。</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220502192051.png" alt="QQ截图20220502192051"></p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">multiply</span><span class="hljs-params">(string num1, string num2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(num1 == <span class="hljs-string">&quot;0&quot;</span> || num2 == <span class="hljs-string">&quot;0&quot;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>        string ans = <span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-type">int</span> m = num1.<span class="hljs-built_in">size</span>(),n = num2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)<br>        &#123;<br>            string cur;<br>            <span class="hljs-type">int</span> add = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//末尾补0</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=n<span class="hljs-number">-1</span>; j&gt;i; j--)<br>            &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-type">int</span> y = num2[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m<span class="hljs-number">-1</span>; j&gt;=<span class="hljs-number">0</span>; j--)<br>            &#123;<br>                <span class="hljs-type">int</span> x = num1[j]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-type">int</span> sum = x*y+add;<br>                cur.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;0&#x27;</span>+sum%<span class="hljs-number">10</span>);<br>                add = sum/<span class="hljs-number">10</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(add != <span class="hljs-number">0</span>)<br>            &#123;<br>                cur.<span class="hljs-built_in">push_back</span>(add%<span class="hljs-number">10</span>);<br>                add = add/<span class="hljs-number">10</span>;<br>            &#125;<br>            <span class="hljs-built_in">reverse</span>(cur.<span class="hljs-built_in">begin</span>(),cur.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">//字符串翻转</span><br>            ans = <span class="hljs-built_in">addStrings</span>(ans,cur);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-comment">//字符串相加 LeetCode 415</span><br>    <span class="hljs-function">string <span class="hljs-title">addStrings</span><span class="hljs-params">(string &amp;num1,string &amp;num2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> i = num1.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,j = num2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,add = <span class="hljs-number">0</span>;<br>        string ans;<br>        <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span> || j&gt;=<span class="hljs-number">0</span> || add != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x,y;<br>            <span class="hljs-keyword">if</span>(num1[i] &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                x = num1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                x = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(num2[j] &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                y = num2[j] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                y = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> sum = x+y+add;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;0&#x27;</span>+sum%<span class="hljs-number">10</span>);<br>            add = sum/<span class="hljs-number">10</span>;<br>            i--;<br>            j--;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2</strong></p><p>方法1的时间和空间复杂度较高，方法一的做法是从右往左遍历乘数，将乘数的每一位与被乘数相乘得到对应的结果，再将每次得到的结果累加，整个过程中涉及到较多字符串相加的操作。如果使用数组代替字符串存储结果，则可以减少对字符串的操作。</p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220502192422.png" alt="QQ截图20220502192422"></p><p>LeetCode题解：<a href="https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/">https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/</a></p><h2 id="LC-433-最小基因变化"><a href="#LC-433-最小基因变化" class="headerlink" title="LC 433.最小基因变化"></a>LC 433.最小基因变化</h2><blockquote><p>由于复习数据库和PHP考试好几天没刷题了，今天补了三道题。</p></blockquote><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://leetcode.cn/problems/minimum-genetic-mutation/">https://leetcode.cn/problems/minimum-genetic-mutation/</a></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>经典BFS问题 BFS利用队列实现</p><p>解题思路没有完全按照力扣官方给出的解法，但是大体思想是一样的只有一些小的细节不太一样，都是用了广度优先搜索的方法解题的。</p><p>解题思路：首先定义一个队列q用于存储变化后的gene序列和哈希表mp防止重复遍历gene序列进入死循环。只要队列不为空或者gene != end，则遍历队列中的元素（有点类似于层序遍历），利用判断条件distance(str,gene) == 1 &amp;&amp; mp[str] == false找出所有未遍历的在基因库bank中且与当前遍历gene只差一个字符的基因并将其插入队列尾部。distance()函数为判断两个不同基因序列所差字符个数的函数。每做完一层遍历之后 ans++，表示基因变化了一次</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">distance</span><span class="hljs-params">(string str,string gene)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;str.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(str[i] != gene[i])  cnt++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minMutation</span><span class="hljs-params">(string start, string end, vector&lt;string&gt;&amp; bank)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        queue&lt;string&gt; q;<br>        unordered_map&lt;string,<span class="hljs-type">bool</span>&gt; mp;<br>        q.<span class="hljs-built_in">push</span>(start);<br>        mp[start] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> n = q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>            &#123;<br>                <span class="hljs-keyword">auto</span> gene = q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(gene == end)  <span class="hljs-keyword">return</span> ans;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> str : bank)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">distance</span>(str,gene) == <span class="hljs-number">1</span> &amp;&amp; mp[str] == <span class="hljs-literal">false</span>)<br>                    &#123;<br>                        q.<span class="hljs-built_in">push</span>(str);<br>                        mp[str] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-937-重新排列日志文件"><a href="#LC-937-重新排列日志文件" class="headerlink" title="LC 937.重新排列日志文件"></a>LC 937.重新排列日志文件</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://leetcode.cn/problems/reorder-data-in-log-files/">https://leetcode.cn/problems/reorder-data-in-log-files/</a></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><blockquote><p>力扣难度：简单 写简单题题解是因为通过这道题补了很多知识。C++匿名函数，C++稳定排序，自定义排序函数。</p></blockquote><p>首先对日志文件进行预处理，将字母日志和数字日志分别存储在容器digit和容器alpha中，再用匿名函数对字母日志进行排序。再将排序后的日志文件合并，返回结果。</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">reorderLogFiles</span><span class="hljs-params">(vector&lt;string&gt;&amp; logs)</span> </span>&#123;<br>        vector&lt;string&gt; digit;<br>        vector&lt;string&gt; alpha;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> str : logs)<br>        &#123;<br>            <span class="hljs-type">char</span> c = str.<span class="hljs-built_in">back</span>();  <span class="hljs-comment">//返回字符串最后一个字符</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(c))  digit.<span class="hljs-built_in">push_back</span>(str);<br>            <span class="hljs-keyword">else</span>  alpha.<span class="hljs-built_in">push_back</span>(str);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(alpha.<span class="hljs-built_in">begin</span>(),alpha.<span class="hljs-built_in">end</span>(),[&amp;](<span class="hljs-type">const</span> string &amp;log1,<span class="hljs-type">const</span> string &amp;log2)&#123;  <span class="hljs-comment">//lambda匿名函数</span><br>            <span class="hljs-type">int</span> pos1 = log1.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27; &#x27;</span>);  <span class="hljs-comment">//返回第一次出现&#x27; &#x27;的位置下标</span><br>            <span class="hljs-type">int</span> pos2 = log2.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>            string s1 = log1.<span class="hljs-built_in">substr</span>(pos1);  <span class="hljs-comment">//从下标pos1处开始复制字符串log1</span><br>            string s2 = log2.<span class="hljs-built_in">substr</span>(pos2);<br>            <span class="hljs-keyword">if</span>(s1 != s2)<br>            &#123;<br>                <span class="hljs-keyword">return</span> s1&lt;s2;<br>            &#125;<br>            <span class="hljs-keyword">return</span> log1&lt;log2;  <span class="hljs-comment">//s1==s2 只有前面的标识符不同 所以直接比较整个字符串相当于比较标识符</span><br>        &#125;);<br>        vector&lt;string&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> str : alpha)  ans.<span class="hljs-built_in">push_back</span>(str);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> str : digit)  ans.<span class="hljs-built_in">push_back</span>(str);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-449-序列化和反序列化二叉搜索树"><a href="#LC-449-序列化和反序列化二叉搜索树" class="headerlink" title="LC 449.序列化和反序列化二叉搜索树"></a>LC 449.序列化和反序列化二叉搜索树</h2><blockquote><p>差点AC代码（62个测试样例过了61个 最后一个测试样例超时了🤣）</p><p>改了好久都不理解为什么代码最后一个测试样例会超时（代码的复杂度也不高啊！！！题目给的数据也不大诶）</p><p>算算了 代码不重要 重要的是理解这题的思路和解法</p></blockquote><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。</p><p>设计一个算法来序列化和反序列化二叉搜索树 。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。</p><p>示例1：</p><blockquote><p>输入：root = [2,1,3]<br>输出：[2,1,3]</p></blockquote><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>这道题就是二叉搜索树转换来转换去最后又转换回二叉搜索树，大致过程如下：</p><ol><li>二叉搜索树利用队列转化成字符串string</li><li>string转换成vector容器</li><li>vector容器利用队列重新建成二叉搜索树</li></ol><p>差点AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Codec</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">// Encodes a tree to a single string.</span><br>    <span class="hljs-function">string <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        string ans = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> ans;<br>        queue&lt;TreeNode*&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">auto</span> node = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                ans = ans+<span class="hljs-string">&quot;null,&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                ans = ans+<span class="hljs-built_in">to_string</span>(node-&gt;val)+<span class="hljs-string">&quot;,&quot;</span>;<br>                q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-comment">// Decodes your encoded data to tree.</span><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">deserialize</span><span class="hljs-params">(string data)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(data == <span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        vector&lt;string&gt; temp = <span class="hljs-built_in">split</span>(data);<br>        TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-built_in">stoi</span>(temp[<span class="hljs-number">0</span>]));  <span class="hljs-comment">//TreeNode(int)</span><br>        queue&lt;TreeNode*&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">auto</span> node = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(temp[index] != <span class="hljs-string">&quot;null&quot;</span>)<br>            &#123;<br>                node-&gt;left = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-built_in">stoi</span>(temp[index]));<br>                q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>            &#125;<br>            index++;<br>            <span class="hljs-keyword">if</span>(temp[index] != <span class="hljs-string">&quot;null&quot;</span>)<br>            &#123;<br>                node-&gt;right = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-built_in">stoi</span>(temp[index]));<br>                q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">split</span><span class="hljs-params">(string data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;string&gt; ans;<br>        <span class="hljs-type">int</span> from = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;data.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(data[i] == <span class="hljs-string">&#x27;,&#x27;</span>)<br>            &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(data.<span class="hljs-built_in">substr</span>(from,i-from));  <span class="hljs-comment">//Note:第二个参数为复制长度而不是字符串结束位置</span><br>                from = i+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
      <tag>二叉树</tag>
      
      <tag>二叉搜索树</tag>
      
      <tag>排序</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五一&#39;s Vlog</title>
    <link href="/2022/05/01/%E4%BA%94%E4%B8%80-s-Vlog/"/>
    <url>/2022/05/01/%E4%BA%94%E4%B8%80-s-Vlog/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="88c913d10a2ddcf7539b35852d1296fa616bfbe194af8a5cac5b01db9d1fd125">4630436162ade97ba2718b7d0c4b3b6351ade09e539dfebeb5402828e29e64b0a9589949eaea39786b85e0cd32450f1c48314a9c45b24ac1f00bc7cb12dbed7c5c9b308305e89a7060608858847e0687a0f6a7b58b354f0e9305bdea10105279e911852abc5569cb2ba3a2a628c98c4b5406aba11f99ab5af9c6fde30e2e32be29f4bcad4aa7171db55bad476c4dd306a1ec4c7fdf0c5846562fc2758ef0bebbdcf341536327a8698b14e61f1d2989c6189635665ad3e9e9809ea1070442c4005980e75b80a4204f13cd1afc08aa71c693178c43efc1fb307a22e4156cf1a83c7354944b6f01434a8ee7798a66f1abc7cacc132c8b5524fc9cf6db49e3edd17f2fca41c12770cbd08083623225292c7ccb1eda1aefefa240c2fafedeaccdfdf074e5bf6dac711704930732285ec6823db42c22f1d45b07a829eed9fd6b7db772b87f097ec11765a4b3cc96fef942a9cafabea316d3d082cdcb9f4c5c2b213a9e3f02fc9654cd21fcb9c803243b757e077cd87153791915d0dbbd5602a893c1cb589bf9ae69d560b3b30218db0a9483519bd3f364caf8a8ab752b9f68d362673ab224f7b24d03293b3720b22380a8901fd57d087c0f6f40abf37a31c3e73cf663705f7f1ddfcaf0a59f501924286a05768726f2c54ab24fc774b3b2a67e45047409ea79bddf4682428300a2da3e172b7da44c992be6a2857bd18ddf29385dc5fe8a9486c1000e95bc9b28bde4d67336cd1be5849ef320284e3c5791bf6dee3d822c11a17768cb3acc752c3a796bf1aae9f750f9a3420b642305f50de8c07f20a33793cef902642e277e482355ea45456bdc6eb57045a2c33b4851ac3a0f17c0dc3fced9b1568a501115a744221718c8cbdd9d91fb635690176ed0e45949476efa592db76f3c4675dd5b8bb22bb802597d928225f1da661ad654324a5179442624864548e2676f5bea9813a9cda61517cd4cfa2e65e1b6c7d3332f7841911fe92f4b768dce514a53d47fa952e3c678b8efd38e235cf608a047d50415e449ca59a48d86c7fd82bc307bd26b08a0fc88e1459afd81742f3f09e93c6f5af35da7913f170cdb70d0b270a584e01f73baea7a3f0dd0a9d1a80ad316ef96f741d58f186d7b1fe7d5f850dfff814e1bb612e3377701f2589073e970615f01288af3f4567c63fec4b7daf4fc5d2b01728674426669b9b62ca7f4a435faeec6c06752734ff7ab385247d97249e6f75e58d71ed5bda0063ff9f6d5ca0487d42a25a639145bdadc7ef59bed92a86b47f7afdff1425bfeab41c1c78ddf5b31c173e3ee3bdfe4503204cef9e1097c166c0839b0c6e99046fa2f779cfb1a865e5532ab3a57715e5f64ec892868e35df35b1856f8aeaf220badadff65bcb543cbd391b906d84e95b3c76caa0e26a5dbc944dd8a26ba82b779841a2cc7f2017e258ef5f7fcf4d4045511d1a290d2542c22898536e7adc134a2c09fb1863e2b709a6f85b3c60f6b2e447867f9886732e100583783c03f951659880ae86b0875008b0da564ab79e14104df13c350bcc074bc881a9592501f8155cb627a651cde95be392c55420e385d7ca66ae411b423b82e57104dabfcb5ed20057a145eff5122e3fd3f8d94464a1e086afa58c3eb4531a0a04b5301685d33ccfc18686629bf98ccd6db306468a7f9018b9f032248b277d2eeb84a7c69516ade27f3f7d365efff9c567b6653f11d31ef34aee1911f476a41ec2be7c9685373c18d66756be638c65a356072a26922ed7d9ae46282687b5cc47ee9c53cbbbe4b432a8066a984bca04430ef1fc9c4e081abdddc8b2806d18cb726be28fd14705a93a2749a2539b6434ee1f7a21e97fa9fbda505a9a080d6a29c38a0336efcad3dfc478a661fd53667e76eac900dc216d4d78e5d800ca89d134b87d07c03568b8f995314bbc7ed4f6878ef60040d425e7f105a51365fe5d4a35560f7accfb7d57b46dfbece675563bde273b2ce3154204704822f04c01841a427a74901f1a50175b08e70814c3cc9dd6ddfd9bf953d5467f24b03dcb6de7a19a31d0e53565af13fa3615529c38e7aa9595fc3f472d46d2f06c8e88cc0c513988a8be7255a202ffccf1756ac24e4c2d9b9e11a084db00c79346bbab4e4b45fde609a7e1b0c178e1782b90912d2a2716e273954701c22f8b0299aa4e3778666e6db2c6144e4eee6adc44c2936917061947022266ad71d9061c3e5cde414a99c70f97188c52a3d5362207524d69ae0bbd6f10c16034d166437fbae1be0643973085c4c8ff0d41e4a81a5c57810f6ee104b5c9f4e2b9cd79bfca2b7cdd8ff550dd8f9750bbe99c896640efbd794e686bb09fa9968e7e709448e1cdac27ffebd6ed0ed903c4c6c784b0588f08641183bb51ab92e1fe6555f81739243e08b143024b6356f506729056eec0cc44cc239884dd1857c3729197ad7005697e7931a1a1ea9c7d0aac6dffbde36d9820b214589550a2f351128c46d5b374fd4f09c213d4d7607d37c08a88312185d081298521958860db90b4508a9bfc4491a54c637fcaadc94b43df6f13b778ff0312c03bbde54247e02c76521d502b964acb8ad14b0fb403a4ed22ddf71ad31fb52eb9c57729bef28ef089896afe499c67e25670fc1af5e840146f6c194f7f06883db35fd2fff9041348a2ba092bd8c01467fc44a262c0a801a466abb6be07f06ed37c04b9cbb553c93fe7e9605f611d7c6bc755f7b8ebfef7fe5ea4c4a37fee45d26ba172cc0ffae1edb81cc4e89b34e629c0dc667a1782d00ade2d17ff3cec91a1a4ec3bae8354b3f082fc9a27326a8bf86bcf836af2d539e04f7288352e5d3b19501c9ff978d83a5f13cd5d612cb17985200e94ce7bc079f9557b002b8efcf491009be45a2d6bdac4641a50c2f62fefd0016df441866249b9e7605fb32d3b10fbf44caaf125133afaac2748410d5550d0c834c77c60163f71a805fa0d9f704ffa8c963c7dc746e8b1d712db71f5774a3b50cd63f468b3840d30ee09383abd95febb10690cad4acd799cbb182d8287d2a1b740c1f5c010b86ee450eeb159d49208dcf4405aff6d2a8345727b2a2d40c8ce3bed948e0bad599901960d71d23b9567fe00636c513224f0bc4d5a925bbe6a29d9bb6ca99feb79611fd308b6cf04ed12cddb34b656dc7626d5100293d29e2447fa07578a224061ab67b7aa0ef2fa78ce32ff37729d211b130e5903824c952657eaef3737038bb1576c24289b662b4e4aacfecafd48a2ba03298888cc63332</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Vlog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python图形化界面设计</title>
    <link href="/2022/04/20/Python%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/04/20/Python%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Github+PicGo搭建的图床没有梯子不好用，Github经常加载不出来。最近要复习考试，考完试有空把用Github搭建的图床换成Gitee+PicGo，再重新上传之前的笔记测试一下吧。</p><p>额……  还有博客的域名没整，没绑定域名又拍云CDN加速也整不了。算算了，等考完试在腾讯云重新买一个.cn的域名再折腾吧。</p></blockquote><h2 id="Python图形化界面设计"><a href="#Python图形化界面设计" class="headerlink" title="Python图形化界面设计"></a>Python图形化界面设计</h2><blockquote><p>学习链接：<a href="https://www.jianshu.com/p/91844c5bca78">https://www.jianshu.com/p/91844c5bca78</a></p></blockquote><blockquote><p>Python自带了tkinter 模块，实质上是一种流行的面向对象的GUI工具包 TK 的Python编程接口，提供了快速便利地创建GUI应用程序的方法。其图像化编程的基本步骤通常包括：</p><p>一、导入 tkinter 模块</p><p>二、创建 GUI 根窗体</p><p>三、添加人机交互控件并编写相应的函数</p><p>四、在主事件循环中等待用户触发事件响应</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> tkinter<br>root=Tk()<br>root.title(<span class="hljs-string">&quot;我的第一个Python窗口&quot;</span>)   <span class="hljs-comment"># title() 方法可设置其标题文字</span><br>root.geometry(<span class="hljs-string">&#x27;550x400&#x27;</span>)  <span class="hljs-comment">#geometry()方法可以设置窗体的大小（以像素为单位）  x为小写英文字母x</span><br><br><span class="hljs-comment">#标签</span><br>lb=Label(root,text=<span class="hljs-string">&quot;我的第一个标签&quot;</span>,<br>bg=<span class="hljs-string">&quot;#d3fbfb&quot;</span>,      <span class="hljs-comment">#背景颜色</span><br>fg=<span class="hljs-string">&quot;red&quot;</span>,          <span class="hljs-comment">#字体颜色</span><br>font=<span class="hljs-string">&quot;&#x27;楷体&#x27;，32&quot;</span>,  <span class="hljs-comment">#标签字体</span><br>width=<span class="hljs-number">32</span>,<br>height=<span class="hljs-number">2</span>,<br>relief=RAISED    <span class="hljs-comment">#浮雕样式</span><br><span class="hljs-comment">#属性 relief 为控件呈现出来的3D浮雕样式，有 FLAT(平的)、RAISED(凸起的)、SUNKEN(凹陷的)、GROOVE(沟槽状边缘)和 RIDGE(脊状边缘) 5种。</span><br>)<br>lb.pack()<br><span class="hljs-comment">#控件布局 常见的控件布局有三种：pack() grid() place() 具体详见笔记</span><br></code></pre></td></tr></table></figure><h2 id="Python简单加法计算器"><a href="#Python简单加法计算器" class="headerlink" title="Python简单加法计算器"></a>Python简单加法计算器</h2><p><img src="https://img.yiqiangshiyia.cn/blog/image4.png" alt="image4"></p><p>Python简单加法计算器代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将两个输入框输入文本转化为浮点数值进行加法运算 要求每次单击按钮计算结果是以文本的形式追加到文本框中 将原输入框清空</span><br><span class="hljs-comment">#按钮方法一：不传参数调用函数run1()实现 按钮方法二：用lambda()调用函数run2(x,y)同时传递参数实现</span><br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run1</span>():<br>    a = <span class="hljs-built_in">float</span>(inp1.get())<br>    b = <span class="hljs-built_in">float</span>(inp2.get())<br>    s = <span class="hljs-string">&#x27;%0.2f+%0.2f=%0.2f\n&#x27;</span>%(a,b,a+b)<br>    txt.insert(END,s)  <span class="hljs-comment">#追加显示运算结果</span><br>    inp1.delete(<span class="hljs-number">0</span>,END)  <span class="hljs-comment">#清空输入</span><br>    inp2.delete(<span class="hljs-number">0</span>,END)  <span class="hljs-comment">#清空输入</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run2</span>(<span class="hljs-params">x,y</span>):<br>    a = <span class="hljs-built_in">float</span>(x)<br>    b = <span class="hljs-built_in">float</span>(y)<br>    s = <span class="hljs-string">&#x27;%0.2f+%0.2f=%0.2f\n&#x27;</span>%(a,b,a+b)<br>    txt.insert(END,s)<br>    inp1.delete(<span class="hljs-number">0</span>,END)<br>    inp2.delete(<span class="hljs-number">0</span>,END)<br><br>root = Tk()<br>root.geometry(<span class="hljs-string">&#x27;460x240&#x27;</span>)<br>root.title(<span class="hljs-string">&#x27;简单加法计算器&#x27;</span>)<br><br>lb1 = Label(root,text=<span class="hljs-string">&#x27;请输入两个数，按下面两个按钮之一进行加法计算&#x27;</span>)<br>lb1.place(relx=<span class="hljs-number">0.1</span>,rely=<span class="hljs-number">0.1</span>,relwidth=<span class="hljs-number">0.8</span>,relheight=<span class="hljs-number">0.1</span>)<br>inp1=Entry(root)<br>inp1.place(relx=<span class="hljs-number">0.1</span>,rely=<span class="hljs-number">0.2</span>,relwidth=<span class="hljs-number">0.3</span>,relheight=<span class="hljs-number">0.1</span>)<br>inp2=Entry(root)<br>inp2.place(relx=<span class="hljs-number">0.6</span>,rely=<span class="hljs-number">0.2</span>,relwidth=<span class="hljs-number">0.3</span>,relheight=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">#方法一：直接调用run1()</span><br>btn1 = Button(root,text=<span class="hljs-string">&#x27;方法一&#x27;</span>,command=run1)<br>btn1.place(relx=<span class="hljs-number">0.1</span>,rely=<span class="hljs-number">0.4</span>,relwidth=<span class="hljs-number">0.3</span>,relheight=<span class="hljs-number">0.1</span>)<br><span class="hljs-comment">#方法二：利用lambda函数传参数调用run2()</span><br>btn2 = Button(root,text=<span class="hljs-string">&#x27;方法二&#x27;</span>,command=<span class="hljs-keyword">lambda</span>:run2(inp1.get(),inp2.get()))<br>btn2.place(relx=<span class="hljs-number">0.6</span>,rely=<span class="hljs-number">0.4</span>,relwidth=<span class="hljs-number">0.3</span>,relheight=<span class="hljs-number">0.1</span>)<br><span class="hljs-comment">#在窗体垂直自上而下位置60%处起 布局相对窗体高度40%高的文本框</span><br>txt = Text(root)<br>txt.place(rely=<span class="hljs-number">0.6</span>,relheight=<span class="hljs-number">0.4</span>)<br>root.mainloop()<br><br><span class="hljs-comment">#place()方法：根据控件实例在父容器中的绝对或相对位置参数进行布局 常用参数布局：</span><br><span class="hljs-comment">#lb.place(x=,y=) x y:控件实例在根窗体中水平和垂直方向上的其实位置（单位为像素）根窗体左上角为x=0,y=0 水平向右 垂直向下为正方向</span><br><span class="hljs-comment">#lb.place(height=,width=) height width:控件实例本身的高度和宽度（单位为像素）</span><br><span class="hljs-comment">#lb.place(relx=,rely=) relx rely:控件实例在根窗体中水平和垂直方向上起始布局的相对位置 即相对于根窗体宽和高的比例位置 取值在0.0~1.0之间</span><br><span class="hljs-comment">#lb.place(relheight=,relwidth=) relheight relwidth:控件实例相对于根窗体的高度和宽度比例 取值在0.0~1.0之间</span><br><span class="hljs-comment">#利用place的方法配合relx rely和relwidth relheight参数所得到的界面可自适应根窗体尺寸的大小</span><br></code></pre></td></tr></table></figure><h2 id="python图形化界面设计时钟"><a href="#python图形化界面设计时钟" class="headerlink" title="python图形化界面设计时钟"></a><strong>python图形化界面设计时钟</strong></h2><p><img src="https://img.yiqiangshiyia.cn/blog/image5.png" alt="image5"></p><p>python图形化界面设计时钟代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#tkinter常见控件的特征属性</span><br><span class="hljs-comment">#文本输入和输出相关控件：标签（Label）消息（Message）输入框（Entry）文本框（Text）Label和Message除了单行和多行不同外 属性和用法基本一直 用于呈现文本信息</span><br><span class="hljs-comment">#利用configure()方法或config来实现文本变化</span><br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gettime</span>():<br>    timestr = time.strftime(<span class="hljs-string">&quot;%H:%M:%S&quot;</span>)  <span class="hljs-comment">#获取当前的时间并转化为字符串</span><br>    lb.configure(text=timestr)  <span class="hljs-comment">#重新设置标签文本</span><br>    root.after(<span class="hljs-number">1000</span>,gettime)  <span class="hljs-comment">#每隔1s调用函数 gettime自身获取时间</span><br>root = tkinter.Tk()<br>root.title(<span class="hljs-string">&quot;时钟&quot;</span>)<br>lb = tkinter.Label(root,text=<span class="hljs-string">&#x27;&#x27;</span>,fg=<span class="hljs-string">&#x27;blue&#x27;</span>,font=(<span class="hljs-string">&quot;黑体&quot;</span>,<span class="hljs-number">80</span>))<br>lb.pack()<br>gettime()<br>lb.mainloop()<br></code></pre></td></tr></table></figure><h2 id="python图形化界面设计（复选框）"><a href="#python图形化界面设计（复选框）" class="headerlink" title="python图形化界面设计（复选框）"></a><strong>python图形化界面设计（复选框）</strong></h2><p><img src="https://img.yiqiangshiyia.cn/blog/image6.png" alt="image6"></p><p>python图形化界面设计（复选框）代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#复选框</span><br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    <span class="hljs-keyword">if</span>(ChackVar1.get()==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> ChackVar2.get()==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> ChackVar3.get()==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> ChackVar4.get()==<span class="hljs-number">0</span>):<br>        s = <span class="hljs-string">&#x27;您还没选择任何爱好项目&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        s1 = <span class="hljs-string">&quot;足球&quot;</span> <span class="hljs-keyword">if</span> ChackVar1.get()==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br>        s2 = <span class="hljs-string">&quot;篮球&quot;</span> <span class="hljs-keyword">if</span> ChackVar2.get()==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br>        s3 = <span class="hljs-string">&quot;游泳&quot;</span> <span class="hljs-keyword">if</span> ChackVar3.get()==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br>        s4 = <span class="hljs-string">&quot;田径&quot;</span> <span class="hljs-keyword">if</span> ChackVar4.get()==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br>        s = <span class="hljs-string">&quot;您选择了%s%s%s%s&quot;</span>%(s1,s2,s3,s4)<br>    lb2.config(text=s)<br><br>root = Tk()<br>root.title(<span class="hljs-string">&#x27;复选框&#x27;</span>)<br>lb1 = Label(root,text=<span class="hljs-string">&#x27;请选择您的爱好项目&#x27;</span>)<br>lb1.pack()<br><br>ChackVar1 = IntVar()<br>ChackVar2 = IntVar()<br>ChackVar3 = IntVar()<br>ChackVar4 = IntVar()<br><br>ch1 = Checkbutton(root,text=<span class="hljs-string">&#x27;足球&#x27;</span>,variable = ChackVar1,onvalue=<span class="hljs-number">1</span>,offvalue=<span class="hljs-number">0</span>)<br>ch2 = Checkbutton(root,text=<span class="hljs-string">&#x27;篮球&#x27;</span>,variable = ChackVar2,onvalue=<span class="hljs-number">1</span>,offvalue=<span class="hljs-number">0</span>)<br>ch3 = Checkbutton(root,text=<span class="hljs-string">&#x27;游泳&#x27;</span>,variable = ChackVar3,onvalue=<span class="hljs-number">1</span>,offvalue=<span class="hljs-number">0</span>)<br>ch4 = Checkbutton(root,text=<span class="hljs-string">&#x27;田径&#x27;</span>,variable = ChackVar4,onvalue=<span class="hljs-number">1</span>,offvalue=<span class="hljs-number">0</span>)<br>ch1.pack()<br>ch2.pack()<br>ch3.pack()<br>ch4.pack()<br><br>btn = Button(root,text=<span class="hljs-string">&#x27;OK&#x27;</span>,command=run)  <span class="hljs-comment">#按钮的command参数和函数相连接</span><br>btn.pack()<br>lb2 = Label(root,text=<span class="hljs-string">&#x27;&#x27;</span>)<br>lb2.pack()<br><br>root.mainloop()<br><span class="hljs-comment">#复选框：复选框（Checkbutton）是为了返回多个选项值的交互控件 通常不直接触发函数的执行 该控件除了具有共有属性外</span><br><span class="hljs-comment">#还具有显示文本（text）返回变量（variable）选中返回值（onvalue）和未选中默认返回值（offvalue）等重要属性</span><br><span class="hljs-comment">#返回变量variable = var通常可以预先逐项分别声明变量的类型var = IntVar()（默认）或var = StringVar()</span><br><span class="hljs-comment">#在所调用的函数中方可分别调用var.get()方法取得被选中实例的onvalue或offvalue值 复选框实例通常还可分别利用</span><br><span class="hljs-comment">#seclet() deselect()和toggle()方法对其进行选中、清除选中和反选操作</span><br></code></pre></td></tr></table></figure><h2 id="python图形化界面设计（列表框）"><a href="#python图形化界面设计（列表框）" class="headerlink" title="python图形化界面设计（列表框）"></a><strong>python图形化界面设计（列表框）</strong></h2><p><img src="https://img.yiqiangshiyia.cn/blog/image7.png" alt="image7"></p><p>python图形化界面设计（列表框）代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#列表框：列表框（Listbox）可供用户单选或多选所列条目以形成人机交互 列表框的主要控件方法如下:</span><br><span class="hljs-comment">#curselection()：返回光标选中项目的元组 注意并不是单个的整数</span><br><span class="hljs-comment">#delete(起始位置,终止位置)：删除项目 终止位置可省略 全部清空为delete(0,END)</span><br><span class="hljs-comment">#get(起始位置,终止位置)：返回范围所含项目文本的元组 终止位置可忽略</span><br><span class="hljs-comment">#insert(位置,项目元素)：插入项目元素（若有多项,可用列表或元组类型赋值）若位置为END 则将项目元素添加到最后</span><br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ini</span>():<br>    Lstbox1.delete(<span class="hljs-number">0</span>,END)<br>    list_items = [<span class="hljs-string">&quot;数学&quot;</span>,<span class="hljs-string">&quot;物理&quot;</span>,<span class="hljs-string">&quot;化学&quot;</span>,<span class="hljs-string">&quot;语文&quot;</span>,<span class="hljs-string">&quot;外语&quot;</span>]<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> list_items:<br>        Lstbox1.insert(END,item)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clear</span>():<br>    Lstbox1.delete(<span class="hljs-number">0</span>,END)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ins</span>():<br>    <span class="hljs-keyword">if</span> entry.get() != <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">if</span> Lstbox1.curselection() == ():<br>            Lstbox1.insert(Lstbox1.size(),entry.get())<br>        <span class="hljs-keyword">else</span>:<br>            Lstbox1.insert(Lstbox1.curselection(),entry.get())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">updt</span>():<br>    <span class="hljs-keyword">if</span> entry.get() != <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> Lstbox1.curselection() != ():<br>        selected=Lstbox1.curselection()[<span class="hljs-number">0</span>]<br>        Lstbox1.delete(selected)<br>        Lstbox1.insert(selected,entry.get())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delt</span>():<br>    <span class="hljs-keyword">if</span> Lstbox1.curselection() != ():<br>        Lstbox1.delete(Lstbox1.curselection())<br><br>root = Tk()<br>root.title(<span class="hljs-string">&#x27;列表框实验&#x27;</span>)<br>root.geometry(<span class="hljs-string">&#x27;320x240&#x27;</span>)<br><br>frame1 = Frame(root,relief=RAISED)<br>frame1.place(relx=<span class="hljs-number">0.0</span>)<br>frame2 = Frame(root,relief=GROOVE)<br>frame2.place(relx=<span class="hljs-number">0.5</span>)<br><br>Lstbox1 = Listbox(frame1)<br>Lstbox1.pack()<br><br>entry = Entry(frame2)<br>entry.pack()<br><br>btn1 = Button(frame2,text=<span class="hljs-string">&#x27;初始化&#x27;</span>,command=ini)<br>btn1.pack(fill=X)<br>btn2 = Button(frame2,text=<span class="hljs-string">&#x27;添加&#x27;</span>,command=ins)<br>btn2.pack(fill=X)<br>btn3 = Button(frame2,text=<span class="hljs-string">&#x27;插入&#x27;</span>,command=ins) <br>btn3.pack(fill=X)<br>btn4 = Button(frame2,text=<span class="hljs-string">&#x27;修改&#x27;</span>,command=updt)<br>btn4.pack(fill=X)<br>btn5 = Button(frame2,text=<span class="hljs-string">&#x27;删除&#x27;</span>,command=delt)<br>btn5.pack(fill=X)<br>btn6 = Button(frame2,text=<span class="hljs-string">&#x27;清空&#x27;</span>,command=clear)<br>btn6.pack(fill=X)<br>root.mainloop()<br></code></pre></td></tr></table></figure><h2 id="python图形化界面设计（组合框）"><a href="#python图形化界面设计（组合框）" class="headerlink" title="python图形化界面设计（组合框）"></a><strong>python图形化界面设计（组合框）</strong></h2><p><img src="https://img.yiqiangshiyia.cn/blog/image8.png" alt="image8"></p><p>python图形化界面设计（组合框）代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tkinter.ttk <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">event</span>):<br>       a = <span class="hljs-built_in">float</span>(t1.get())<br>       b = <span class="hljs-built_in">float</span>(t2.get())<br>       dic = &#123;<span class="hljs-number">0</span>:a+b,<span class="hljs-number">1</span>:a-b,<span class="hljs-number">2</span>:a*b,<span class="hljs-number">3</span>:a/b&#125;<br>       c = dic[comb.current()]<br>       lbl.config(text=<span class="hljs-built_in">str</span>(c))<br><br>root = Tk()<br>root.title(<span class="hljs-string">&#x27;四则运算&#x27;</span>)<br>root.geometry(<span class="hljs-string">&#x27;320x240&#x27;</span>)<br><br>t1 = Entry(root)<br>t1.place(relx=<span class="hljs-number">0.1</span>,rely=<span class="hljs-number">0.1</span>,relwidth=<span class="hljs-number">0.2</span>,relheight=<span class="hljs-number">0.1</span>)<br>t2 = Entry(root)<br>t2.place(relx=<span class="hljs-number">0.5</span>,rely=<span class="hljs-number">0.1</span>,relwidth=<span class="hljs-number">0.2</span>,relheight=<span class="hljs-number">0.1</span>)<br><br>var = StringVar()<br><br>comb = Combobox(root,textvariable=var,values=[<span class="hljs-string">&#x27;加&#x27;</span>,<span class="hljs-string">&#x27;减&#x27;</span>,<span class="hljs-string">&#x27;乘&#x27;</span>,<span class="hljs-string">&#x27;除&#x27;</span>,])<br>comb.place(relx=<span class="hljs-number">0.1</span>,rely=<span class="hljs-number">0.5</span>,relwidth=<span class="hljs-number">0.2</span>)<br>comb.bind(<span class="hljs-string">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>,calc)<br><br>lbl=Label(root,text=<span class="hljs-string">&#x27;结果&#x27;</span>)<br>lbl.place(relx=<span class="hljs-number">0.5</span>,rely=<span class="hljs-number">0.7</span>,relwidth=<span class="hljs-number">0.2</span>,relheight=<span class="hljs-number">0.3</span>)<br>root.mainloop()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解忧杂货</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫</title>
    <link href="/2022/04/20/Python%E7%88%AC%E8%99%AB/"/>
    <url>/2022/04/20/Python%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="Python爬虫学习"><a href="#Python爬虫学习" class="headerlink" title="Python爬虫学习"></a>Python爬虫学习</h2><p><strong>学习爬虫前需要安装的标准库</strong></p><p>安装如下：</p><p>pip install requests</p><p>pip install re</p><p>pip install bs4</p><p><strong>爬虫的四个主要步骤：</strong></p><p>1.明确目标</p><p>2.爬(将网站的所有内容给爬下来)</p><p>3.取(将自己想要的数据取下来)</p><p>4.保存数据</p><p><strong>接下来的所有代码操作都是在执行爬虫的四个主要步骤</strong></p><p>import requests    #爬取html的标准库函数</p><p>ret=requests.get(‘<a href="http://www.qiushibaike.com/&#39;">http://www.qiushibaike.com/&#39;</a>)    #ret返回的是网页请求成功的状态码</p><p>result=ret.content.decode()    #通过这段代码能够把网页的中文源代码返回给我们</p><p>print(result)    #result是一个字符串</p><p>通过请求一个url，来得到前端的数据，然后从前端的数据里面获取我们想要的内容</p><p>import re    #python的一个模块 用来将自己想要的数据取下来</p><p>re模块是针对字符串这种数据格式来提取的一种方法</p><p>具体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests  <span class="hljs-comment">#爬取html的标准库函数</span><br>headers=&#123;<br>    <span class="hljs-string">&quot;User-Urgent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;</span><br>&#125;  <span class="hljs-comment">#防反爬 模拟人去访问网站 </span><br>ret=requests.get(<span class="hljs-string">&#x27;https://www.xbiquge.la/paihangbang/&#x27;</span>)   <span class="hljs-comment">#ret返回的是网页请求成功的状态码</span><br>result=ret.content.decode()   <span class="hljs-comment">#通过这段代码能够把网页的中文源代码返回给我们</span><br><span class="hljs-comment">#result是一个字符串</span><br>novel = <span class="hljs-string">&#x27;&lt;li&gt;\d&lt;a href=&quot;.+&quot;&gt;(.*?)&lt;\/a&gt;&lt;\/li&gt;&#x27;</span><br>content=re.findall(novel,result)<br><span class="hljs-comment">#re.S代表可以匹配到换行符</span><br><span class="hljs-comment">#print(content)</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;笔趣阁爬虫数据.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> content:<br>         s = i+<span class="hljs-string">&#x27;\n&#x27;</span><br>         f.write(s)<br></code></pre></td></tr></table></figure><h2 id="一个完整的爬虫实例（re模块解析）"><a href="#一个完整的爬虫实例（re模块解析）" class="headerlink" title="一个完整的爬虫实例（re模块解析）"></a><strong>一个完整的爬虫实例（re模块解析）</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br>headers=&#123;<br>    <span class="hljs-string">&quot;User-Urgent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;</span><br>&#125;<br>ret=requests.get(<span class="hljs-string">&#x27;https://www.xbiquge.la/paihangbang/&#x27;</span>) <br>result=ret.content.decode() <br><span class="hljs-comment">#print(type(result))   </span><br>novel = <span class="hljs-string">&#x27;&lt;li&gt;\d&lt;a href=&quot;.+&quot;&gt;(.*?)&lt;\/a&gt;&lt;\/li&gt;&#x27;</span><br>content=re.findall(novel,result)<br><span class="hljs-comment">#print(content)</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;笔趣阁爬虫数据.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> content:<br>         s = i+<span class="hljs-string">&#x27;\n&#x27;</span><br>         f.write(s)<br></code></pre></td></tr></table></figure><h2 id="一个完整的爬虫实例（BeautifulSoup模块解析）"><a href="#一个完整的爬虫实例（BeautifulSoup模块解析）" class="headerlink" title="一个完整的爬虫实例（BeautifulSoup模块解析）"></a><strong>一个完整的爬虫实例（BeautifulSoup模块解析）</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>headers=&#123;<br>    <span class="hljs-string">&quot;User-Urgent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;</span><br>&#125;<br>ret=requests.get(<span class="hljs-string">&#x27;https://www.xbiquge.la/paihangbang/&#x27;</span>) <br>result=ret.content.decode() <br><span class="hljs-comment">#print(type(result)) </span><br>soup = BeautifulSoup(result,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><span class="hljs-comment">#print(type(soup))</span><br>content = soup.find_all(<span class="hljs-string">&#x27;li&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> content:<br>    <span class="hljs-built_in">print</span>(i.text)<br></code></pre></td></tr></table></figure><h2 id="写给小吕的详细解释版"><a href="#写给小吕的详细解释版" class="headerlink" title="写给小吕的详细解释版"></a><strong>写给小吕的详细解释版</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re  <span class="hljs-comment">#re为python的一个模块 用于解析网页源代码</span><br><span class="hljs-comment">#同样可以实现该功能的还有bs4 lxml等</span><br><span class="hljs-keyword">import</span> requests  <span class="hljs-comment">#爬取html的标准库函数</span><br><br>headers=&#123;<br>    <span class="hljs-string">&quot;User-Urgent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;</span><br>&#125;  <span class="hljs-comment">#防反爬 模拟人去访问网站 </span><br><br>ret=requests.get(<span class="hljs-string">&#x27;https://www.xbiquge.la/paihangbang/&#x27;</span>)   <span class="hljs-comment">#ret返回的是网页请求成功的状态码</span><br><span class="hljs-comment">#requests.get()可以得到该网站的代码</span><br><br>result=ret.content.decode()   <span class="hljs-comment">#对代码进行解析 通过解析能够把网页的中文源代码返回给我们</span><br><span class="hljs-comment">#得到中文源代码之后只需要提取我们所需要的的数据即可</span><br><span class="hljs-comment">#result是一个字符串</span><br><br>novel = <span class="hljs-string">&#x27;&lt;li&gt;\d&lt;a href=&quot;.+&quot;&gt;(.*?)&lt;\/a&gt;&lt;\/li&gt;&#x27;</span><br><span class="hljs-comment">#使用正则表达式去匹配代码中的关键字 小括号()前后代表所要去匹配代码的标签</span><br><span class="hljs-comment">#(.*?)代表所要提取的内容</span><br><span class="hljs-comment">#这个地方你在展示的时候如果说不明白的话 你可以这么说：</span><br><span class="hljs-comment">#正则表达式是爬虫的关键 用来提取所爬代码中我们所需要的数据 如果大家想要更深入的了解的话 可以建议大家去b站看一下这个视频</span><br><span class="hljs-comment">#b站视频链接(https://www.bilibili.com/video/BV1da4y1p7iZ)</span><br><span class="hljs-comment">#这个视频详细的介绍了正则表达式的使用 以及还推荐了一个很实用的在线的正则表达式检验的网站 同学们可以去学习一下</span><br><span class="hljs-comment">#正则表达式检验网站(https://regex101.com/)</span><br><br>content=re.findall(novel,result)  <span class="hljs-comment">#调用re模块 re.finaall是用来查找result中与novel所匹配的内容 以列表的形式返回所匹配到的字符串</span><br><span class="hljs-comment">#将所匹配到的字符串存储在content列表中</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;笔趣阁爬虫数据.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:  <span class="hljs-comment">#以写入的方式将所提取的数据存入txt文件中 &#x27;w&#x27;代表写入 encoding=&#x27;utf-8&#x27;代表声明文件的编码方式</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> content:  <span class="hljs-comment">#循环遍历列表</span><br>         s = i+<span class="hljs-string">&#x27;\n&#x27;</span>    <span class="hljs-comment">#&#x27;\n&#x27;代表换行符 每写入一个列表元素之后进行换行</span><br>         f.write(s)    <span class="hljs-comment">#将列表元素写入文件中</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解忧杂货</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2022四月刷题日记</title>
    <link href="/2022/04/15/LeetCode%202022%E5%9B%9B%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/04/15/LeetCode%202022%E5%9B%9B%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="LC-385-迷你语法分析器"><a href="#LC-385-迷你语法分析器" class="headerlink" title="LC 385.迷你语法分析器"></a>LC 385.迷你语法分析器</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个字符串 s 表示一个整数嵌套列表，实现一个解析它的语法分析器并返回解析的结果 NestedInteger 。</p><p>列表中的每个元素只可能是整数或整数嵌套列表</p><p>示例1</p><blockquote><p>输入：s = “324”,<br>输出：324<br>解释：你应该返回一个 NestedInteger 对象，其中只包含整数值 324。</p></blockquote><p>示例2</p><blockquote><p>输入：s = “[123,[456,[789]]]”,<br>输出：[123,[456,[789]]]<br>解释：返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：</p><ol><li>一个 integer 包含值 123</li><li>一个包含两个元素的嵌套列表：<br> i.  一个 integer 包含值 456<br> ii. 一个包含一个元素的嵌套列表<pre><code class="hljs">  a. 一个 integer 包含值 789</code></pre></li></ol></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>一道题做了一个多小时，人都麻了… 4.15今天日子也很特殊 哈哈哈！</p></blockquote><p>这道题的 NestedInteger 其实就是定义的一个新的数据类型，相当于集合之类的。核心思想就是栈的嵌套，先把 NestedInteger 类型的数字放入栈中，然后再将栈顶的元素top嵌套入栈的top-1中。</p><p><strong>方法1：深度优先搜索</strong></p><p>模拟</p><p><strong>方法2：栈</strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220415164146.png" alt="QQ截图20220415164146"></p><p>当s[i] == ‘[‘时：建立一个’[]’，放入栈中</p><p>当isdigit(s[i])时：记录数字num</p><p>当s[i] == ‘,’ || s[i] == ‘]’时：如果数字不为空，将数字加入栈顶，重置数字num = 0</p><p>当s[i] == ‘]’ &amp;&amp; st.size()&gt;1时，将栈顶元素加入栈顶的倒数第二个元素中，直到栈的到小为1</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">NestedInteger <span class="hljs-title">deserialize</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;[&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-built_in">NestedInteger</span>(<span class="hljs-built_in">stoi</span>(s));<br>        stack&lt;NestedInteger&gt; st;<br>        <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)<br>            &#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">NestedInteger</span>());<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(s[i]))<br>            &#123;<br>                num = num*<span class="hljs-number">10</span> + s[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;,&#x27;</span> || s[i] == <span class="hljs-string">&#x27;]&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(s[i<span class="hljs-number">-1</span>]))<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(flag)  num = num*<span class="hljs-number">-1</span>;<br>                    st.<span class="hljs-built_in">top</span>().<span class="hljs-built_in">add</span>(<span class="hljs-built_in">NestedInteger</span>(num));<br>                    num = <span class="hljs-number">0</span>;<br>                    flag = <span class="hljs-literal">false</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; st.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)<br>                &#123;<br>                    NestedInteger ni = st.<span class="hljs-built_in">top</span>();<br>                    st.<span class="hljs-built_in">pop</span>();<br>                    st.<span class="hljs-built_in">top</span>().<span class="hljs-built_in">add</span>(ni);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> st.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>b栈学习视频：<a href="https://www.bilibili.com/video/BV195411U7h4?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV195411U7h4?spm_id_from=333.337.search-card.all.click</a></p><h2 id="LC-824-山羊拉丁文"><a href="#LC-824-山羊拉丁文" class="headerlink" title="LC 824.山羊拉丁文"></a>LC 824.山羊拉丁文</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://leetcode-cn.com/problems/goat-latin/">https://leetcode-cn.com/problems/goat-latin/</a></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><blockquote><p>这道题在LeetCode为简单题，但是通过不断更新两个下标i,j分割字符串的思路比较有借鉴意义。比直接遍历用split()函数分割字符串要更简单。</p></blockquote><p>string(cnt,’a’)    //字符串的一种构造函数，表示生成一个字符串，包含 cnt 个字符 ‘a’</p><p>sentence.substr(i,j-i)    //注意第一个参数为sentence下标其实位置，第二个参数为单词复制的长度而不是结束位置的下标。</p><blockquote><p>我们可以对给定的字符串 sentence 进行一次遍历，找出其中的每一个单词，并根据题目的要求进行操作。</p><p>在寻找单词时，我们可以使用语言自带的 split() 函数，将空格作为分割字符，得到所有的单词。为了节省空间，我们也可以直接进行遍历：每当我们遍历到一个空格或者到达 sentence 的末尾时，我们就找到了一个单词。</p><p>当我们得到一个单词 w 后，我们首先需要判断 w 的首字母是否为元音字母。我们可以使用一个哈希集合 vowels 存储所有的元音字母 aeiouAEIOU，这样只需要判断 w 的首字母是否在 vowels 中。如果是元音字母，那么单词本身保持不变；如果是辅音字母，那么需要首字母移到末尾，这里使用语言自带的字符串切片函数即可。在这之后，我们需要在末尾添加 m 以及若干个 a，因此可以使用一个变量 cnt 记录需要添加的 a 的个数，它的初始值为 1，每当我们得到一个单词，就将它的值增加 1。</p></blockquote><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">toGoatLatin</span><span class="hljs-params">(string sentence)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-type">char</span>&gt; vowels = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>&#125;;<br>        <span class="hljs-type">int</span> n = sentence.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>,cnt = <span class="hljs-number">1</span>;<br>        string ans;<br>        <span class="hljs-keyword">while</span>(i &lt; n)<br>        &#123;<br>            <span class="hljs-type">int</span> j = i;<br>            <span class="hljs-keyword">while</span>(j &lt; n &amp;&amp; sentence[j] != <span class="hljs-string">&#x27; &#x27;</span>)  j++;<br>            cnt++;<br>            <span class="hljs-keyword">if</span>(cnt != <span class="hljs-number">2</span>)  ans = ans+<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">if</span>(vowels.<span class="hljs-built_in">count</span>(sentence[i]))<br>            &#123;<br>                ans = ans+sentence.<span class="hljs-built_in">substr</span>(i,j-i)+<span class="hljs-string">&#x27;m&#x27;</span>+<span class="hljs-built_in">string</span>(cnt,<span class="hljs-string">&#x27;a&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                ans = ans+sentence.<span class="hljs-built_in">substr</span>(i+<span class="hljs-number">1</span>,j-i<span class="hljs-number">-1</span>)+sentence[i]+<span class="hljs-string">&#x27;m&#x27;</span>+<span class="hljs-built_in">string</span>(cnt,<span class="hljs-string">&#x27;a&#x27;</span>);<br>            &#125;<br>            i = j+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-417-太平洋大西洋水流问题"><a href="#LC-417-太平洋大西洋水流问题" class="headerlink" title="LC 417.太平洋大西洋水流问题"></a>LC 417.太平洋大西洋水流问题</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/">https://leetcode-cn.com/problems/pacific-atlantic-water-flow/</a></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><blockquote><p>这是一道学习BFS和DFS绝绝子的题目，之前没怎么做过BFS和DFS的题目，一直都不太会，每日一题遇到了这么典型的题目当然要搞清楚啦。4.27今天一天的任务就是搞懂这道题BFS和DFS两种解法。</p></blockquote><p><strong>DFS利用了递归的思想 —- BFS利用了队列的思想</strong></p><p><strong>方法1：深度优先搜索（DFS）</strong></p><blockquote><p>雨水的流动方向是从高到低，每个单元格上的雨水只能流到高度小于等于当前单元格的相邻单元格。从一个单元格开始，通过搜索的方法模拟雨水的流动，则可以判断雨水是否可以从该单元格流向海洋。</p><p>如果直接以每个单元格作为起点模拟雨水的流动，则会重复遍历每个单元格，导致时间复杂度过高。为了降低时间复杂度，可以从矩阵的边界开始反向搜索寻找雨水流向边界的单元格，反向搜索时，每次只能移动到高度相同或更大的单元格。</p><p>由于矩阵的左边界和上边界是太平洋，矩阵的右边界和下边界是大西洋，因此从矩阵的左边界和上边界开始反向搜索即可找到雨水流向太平洋的单元格，从矩阵的右边界和下边界开始反向搜索即可找到雨水流向大西洋的单元格。</p><p>可以<strong>使用深度优先搜索实现反向搜索</strong>，搜索过程中需要记录每个单元格是否可以从太平洋反向到达以及是否可以从大西洋反向到达。反向搜索结束之后，遍历每个网格，如果一个网格既可以从太平洋反向到达也可以从大西洋反向到达，则该网格满足太平洋和大西洋都可以到达，将该网格添加到答案中。</p></blockquote><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> dirs[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;  <span class="hljs-comment">//定义方向数组，分别表示向上下左右四个方向流动</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; heights;  <span class="hljs-comment">//定义一个全局数组</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> row,<span class="hljs-type">int</span> col,vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; &amp;ocean)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> m = ocean.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = ocean[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(ocean[row][col])<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        ocean[row][col] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//分别对上下左右四个方向进行搜索</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> newRow = row+dirs[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> newCol = col+dirs[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(newRow &gt;= <span class="hljs-number">0</span> &amp;&amp; newRow &lt; m &amp;&amp; newCol &gt;= <span class="hljs-number">0</span> &amp;&amp; newCol &lt; n &amp;&amp; heights[newRow][newCol] &gt;= heights[row][col])<br>            &#123;<br>                <span class="hljs-built_in">dfs</span>(newRow,newCol,ocean);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">pacificAtlantic</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; heights) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;heights = heights;<br>        <span class="hljs-type">int</span> m = heights.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = heights[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">//防止重复遍历单元格，增加时间复杂度，定义bool类型数组进行标记,默认值为false</span><br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">pacific</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n,<span class="hljs-literal">false</span>));<br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">atlantic</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n,<span class="hljs-literal">false</span>));<br>        <span class="hljs-comment">//从左边缘开始dfs可以流入太平洋的单元格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(i,<span class="hljs-number">0</span>,pacific);<br>        &#125;<br>        <span class="hljs-comment">//从上边缘开始dfs可以流入太平洋的单元格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;n; j++)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,j,pacific);<br>        &#125;<br>        <span class="hljs-comment">//从右边缘开始dfs可以流入大西洋的单元格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(i,n<span class="hljs-number">-1</span>,atlantic);<br>        &#125;<br>        <span class="hljs-comment">//从下边缘开始dfs可以流入大西洋的单元格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n<span class="hljs-number">-1</span>; j++)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(m<span class="hljs-number">-1</span>,j,atlantic);<br>        &#125;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(pacific[i][j] &amp;&amp; atlantic[i][j])<br>                &#123;<br>                    vector&lt;<span class="hljs-type">int</span>&gt; cell;<br>                    cell.<span class="hljs-built_in">push_back</span>(i);<br>                    cell.<span class="hljs-built_in">push_back</span>(j);<br>                    ans.<span class="hljs-built_in">push_back</span>(cell);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2：宽度优先搜索（BFS）</strong></p><blockquote><p>反向搜索也可以使用广度优先搜索实现。搜索过程中同样需要记录每个单元格是否可以从太平洋反向到达以及是否可以从大西洋反向到达。反向搜索结束之后，遍历每个网格，如果一个网格既可以从太平洋反向到达也可以从大西洋反向到达，则该网格满足太平洋和大西洋都可以到达，将该网格添加到答案中。</p></blockquote><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> dirs[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;  <span class="hljs-comment">//定义方向数组，分别表示向上下左右四个方向流动</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; heights;  <span class="hljs-comment">//定义一个全局数组</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> row,<span class="hljs-type">int</span> col,vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; &amp;ocean)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(ocean[row][col])<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> m = ocean.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = ocean[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        ocean[row][col] = <span class="hljs-literal">true</span>;<br>        queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; q;  <span class="hljs-comment">//定义队列存放单元格的位置坐标</span><br>        q.<span class="hljs-built_in">emplace</span>(row,col);  <span class="hljs-comment">//note：这里只能用q.emplace()不能使用q.push()</span><br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">auto</span> [row,col] = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)<br>            &#123;<br>                <span class="hljs-type">int</span> newRow = row+dirs[i][<span class="hljs-number">0</span>];<br>                <span class="hljs-type">int</span> newCol = col+dirs[i][<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(newRow &gt;= <span class="hljs-number">0</span> &amp;&amp; newRow &lt; m &amp;&amp; newCol &gt;=<span class="hljs-number">0</span> &amp;&amp; newCol &lt; n &amp;&amp; heights[newRow][newCol] &gt;= heights[row][col] &amp;&amp; !ocean[newRow][newCol])<br>                &#123;<br>                    ocean[newRow][newCol] = <span class="hljs-literal">true</span>;<br>                    q.<span class="hljs-built_in">emplace</span>(newRow,newCol);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">pacificAtlantic</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; heights) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;heights = heights;<br>        <span class="hljs-type">int</span> m = heights.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = heights[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">//防止重复遍历单元格，增加时间复杂度，定义bool类型数组进行标记,默认值为false</span><br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">pacific</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n,<span class="hljs-literal">false</span>));<br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">atlantic</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n,<span class="hljs-literal">false</span>));<br>        <span class="hljs-comment">//从左边缘开始dfs可以流入太平洋的单元格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(i,<span class="hljs-number">0</span>,pacific);<br>        &#125;<br>        <span class="hljs-comment">//从上边缘开始dfs可以流入太平洋的单元格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;n; j++)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,j,pacific);<br>        &#125;<br>        <span class="hljs-comment">//从右边缘开始dfs可以流入大西洋的单元格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(i,n<span class="hljs-number">-1</span>,atlantic);<br>        &#125;<br>        <span class="hljs-comment">//从下边缘开始dfs可以流入大西洋的单元格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n<span class="hljs-number">-1</span>; j++)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(m<span class="hljs-number">-1</span>,j,atlantic);<br>        &#125;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(pacific[i][j] &amp;&amp; atlantic[i][j])<br>                &#123;<br>                    vector&lt;<span class="hljs-type">int</span>&gt; cell;<br>                    cell.<span class="hljs-built_in">push_back</span>(i);<br>                    cell.<span class="hljs-built_in">push_back</span>(j);<br>                    ans.<span class="hljs-built_in">push_back</span>(cell);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
      <tag>栈</tag>
      
      <tag>BFS</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dapp学习</title>
    <link href="/2022/04/14/Dapp%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/04/14/Dapp%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Dapp"><a href="#Dapp" class="headerlink" title="Dapp"></a>Dapp</h2><h3 id="Dapp原理"><a href="#Dapp原理" class="headerlink" title="Dapp原理"></a>Dapp原理</h3><p>中心化app的数据存储在中心化服务器上，dapp的数据存储在区块链上</p><h3 id="Dapp开发环境"><a href="#Dapp开发环境" class="headerlink" title="Dapp开发环境"></a>Dapp开发环境</h3><blockquote><p>以太坊：以太坊（英文Ethereum）是一个开源的有智能合约功能的公共区块链平台，通过其专用加密货币以太币（Ether，简称“ETH”）提供去中心化的以太虚拟机（Ethereum Virtual Machine）来处理点对点合约。</p></blockquote><p>基于以太坊的开发环境</p><ul><li><p>geth+js</p></li><li><p>ganache+js（主要）</p></li><li><p>truffle（js框架 以太坊官方提供的框架）</p></li></ul><h3 id="Geth私链环境搭建"><a href="#Geth私链环境搭建" class="headerlink" title="Geth私链环境搭建"></a>Geth私链环境搭建</h3><p>geth是以太坊的一个客户端</p><ul><li><p>安装geth</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ sudo apt-get install software-properties-common<br>$ sudo<span class="hljs-built_in"> add-apt-repository </span>-y ppa:ethereum/etherum<br>$ sudo apt-get update<br>$ sudo apt-get install etherum<br></code></pre></td></tr></table></figure></li></ul><h3 id="ganache使用"><a href="#ganache使用" class="headerlink" title="ganache使用"></a>ganache使用</h3><ul><li><p>ganache</p><p>目前主流的基于以太坊开发Dapp的方式主要是ganache和truffle</p><p>ganache的github地址：<a href="https://link.zhihu.com/?target=https://github.com/trufflesuite/ganache/releases">https://</a><a href="https://github.com/trufflesuite/ganache/releases">https://github.com/trufflesuite/ganache/releases</a></p><blockquote><p>Ganache可以快速启动个人以太坊区块链，并可以使用它来运行测试，执行命令、检查状态，同时控制链条的运行方式。通过Ganache我们可以快速查看所有账户的当前状态，包括他们的地址、私钥、交易和余额。查看Ganache内部区块链的日志输出，包括响应和其他重要的调试信息，检查所有块和交易，以获取相关问题的信息。</p></blockquote></li><li><p>连接ganache节点-Remix连接节点</p></li><li><p>连接ganache节点-MetaMask连接节点（导入账号）</p></li></ul><p>知乎上有具体使用方法：<a href="https://zhuanlan.zhihu.com/p/46524142">https://zhuanlan.zhihu.com/p/46524142</a></p><h3 id="使用Web3js和区块链进行交互"><a href="#使用Web3js和区块链进行交互" class="headerlink" title="使用Web3js和区块链进行交互"></a>使用Web3js和区块链进行交互</h3><ul><li>express安装</li><li>创建工程</li><li>和区块链交互</li><li>运行</li></ul><h3 id="智能合约编写、部署"><a href="#智能合约编写、部署" class="headerlink" title="智能合约编写、部署"></a>智能合约编写、部署</h3><p><a href="http://remix.hubwiz.com/#optimize=false&version=soljson-v0.5.1+commit.c8a2cb62.js">智能合约在线编译器</a></p><h3 id="完整Dapp-demo"><a href="#完整Dapp-demo" class="headerlink" title="完整Dapp demo"></a>完整Dapp demo</h3><ul><li><p>编写智能合约</p></li><li><p>编译合约</p><p>在remix上进行编译</p><blockquote><p>智能合约在线编译器：<a href="http://remix.hubwiz.com/#optimize=false&amp;version=soljson-v0.5.1+commit.c8a2cb62.js">http://remix.hubwiz.com/#optimize=false&amp;version=soljson-v0.5.1+commit.c8a2cb62.js</a></p></blockquote></li><li><p>部署合约</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">ganache-<span class="hljs-keyword">cli</span><br><span class="hljs-keyword">mkdir</span> deploy-proj<br><span class="hljs-keyword">cd</span> deploy-proj<br>npm install web3 -<span class="hljs-keyword">save</span><br></code></pre></td></tr></table></figure><p>编写deploy.js</p><p>部署</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">deploy</span>.js<br></code></pre></td></tr></table></figure></li><li><p>创建工程</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">express -e dapp4<br>cd dapp4<br><span class="hljs-built_in">npm</span> install<br><span class="hljs-built_in">npm</span> start<br></code></pre></td></tr></table></figure></li><li><p>修改app.js</p></li><li><p>修改route/index.js</p></li><li><p>编辑view/index.html</p></li><li><p>运行</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">ganache-<span class="hljs-keyword">cli</span><br>npm_start<br></code></pre></td></tr></table></figure></li></ul><h3 id="使用truffle"><a href="#使用truffle" class="headerlink" title="使用truffle"></a>使用truffle</h3><ul><li><p>truffle介绍</p><p>Truffle是针对基于以太坊的Solidity语言的一套开发框架，本身基于Javascript。</p><p>官方学习文档：<a href="https://learnblockchain.cn/docs/truffle/index.html">https://learnblockchain.cn/docs/truffle/index.html</a></p></li><li><p>安装truffle</p><p>只要通过以下命令就可以安装Truffle</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g truffle<br></code></pre></td></tr></table></figure></li><li><p>写合约</p><p>写完合约之后在remix中调试</p></li><li><p>创建工程</p><ul><li>使用命令创建工程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> Vote<br><span class="hljs-built_in">cd</span> Vote<br>truffle unbox webpack<br></code></pre></td></tr></table></figure><ul><li>创建合约</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> contracts<br><span class="hljs-keyword">rm</span> <span class="hljs-keyword">meta</span>.sol<br><span class="hljs-keyword">rm</span> Lib.sol<br>vim Voting.sol<br></code></pre></td></tr></table></figure><ul><li><p>将上面的合约代码复制到Voting.sol中</p></li><li><p>修改migrations/_deploy_contracts.js</p></li></ul></li><li><p>编译合约</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">truffle compile</span><br></code></pre></td></tr></table></figure></li><li><p>部署合约</p><ul><li><p>启动ganache-cli</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">ganache-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></li><li><p>修改truffle-config.js</p></li><li><p>部署</p></li><li><p>部署完后可以用truffle console进行测试</p></li></ul></li><li><p>修改前端页面</p><p>修改app/src/index.html</p><p>修改app/src/index.js</p></li><li><p>运行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev<br></code></pre></td></tr></table></figure><p>打开浏览器，输入127.0.0.1:8080</p><p><strong>使用truffle完成投票dapp的开发实例</strong></p><p>1、投票的智能合约</p><p>投票智能合约代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript">pragma solidity &gt;=<span class="hljs-number">0.4</span><span class="hljs-number">.22</span> &lt;<span class="hljs-number">0.6</span><span class="hljs-number">.0</span>;<br><br>contract <span class="hljs-title class_">Voting</span> &#123;<br>    bytes32[] <span class="hljs-keyword">public</span> candidateList;<br>    <span class="hljs-title function_">mapping</span>(<span class="hljs-function"><span class="hljs-params">bytes32</span> =&gt;</span> uint8) <span class="hljs-keyword">public</span> votesReceived;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">bytes32[] memory candidateListName</span>) <span class="hljs-keyword">public</span>  &#123;<br>        candidateList = candidateListName;<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">validateCanditate</span>(<span class="hljs-params">bytes32 candidateName</span>)internal view <span class="hljs-title function_">returns</span>(<span class="hljs-params">bool</span>) &#123;<br>        <span class="hljs-keyword">for</span> (uint8 i =<span class="hljs-number">0</span>; i &lt; candidateList.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (candidateName == candidateList[i])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">voteForCandidate</span>(<span class="hljs-params">bytes32 candidateName</span>) <span class="hljs-keyword">public</span> &#123;<br>        <span class="hljs-built_in">require</span>(<span class="hljs-title function_">validateCanditate</span>(candidateName));<br>        votesReceived[candidateName] += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">totalVotesFor</span>(<span class="hljs-params">bytes32 candidateName</span>) view <span class="hljs-keyword">public</span> <span class="hljs-title function_">returns</span>(<span class="hljs-params">uint8</span>) &#123;<br>        <span class="hljs-built_in">require</span>(<span class="hljs-title function_">validateCanditate</span>(candidateName));<br>        <span class="hljs-keyword">return</span> votesReceived[candidateName];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、合约的编译部署</p><p>3、编写前端页面</p><p>4、和智能合约的交互</p></li></ul><p>区块链学习官站：<a href="https://learnblockchain.cn/">https://learnblockchain.cn/</a></p><p>区块链、超级账本、智能合约等概念官网文档 <a href="https://gitee.com/link?target=https://hyperledger-fabric.readthedocs.io/en/release-1.4/">https://hyperledger-fabric.readthedocs.io/en/release-1.4/</a></p>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++常用函数</title>
    <link href="/2022/04/11/C++%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <url>/2022/04/11/C++%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="push-back-函数"><a href="#push-back-函数" class="headerlink" title="push_back()函数"></a>push_back()函数</h2><blockquote><p>push_back()函数的用法</p><p>函数将一个新的元素加到vector的最后面，位置为当前最后一个元素的下一个元素。</p></blockquote><p><strong>push_back()函数也同样适用于string字符串</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">string str = <span class="hljs-string">&quot;&quot;</span>;<br>str.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>类似的：</p><p>pop_back()    //移除最后一个元素</p><p>clear()    //清空所有元素</p><p>empty()    //判断vector是否为空，如果返回true为空</p><p>erase()    // 删除指定元素</p><h2 id="reverse-函数"><a href="#reverse-函数" class="headerlink" title="reverse()函数"></a>reverse()函数</h2><p>对字符串进行翻转的函数</p><p>reverse(s.begin(),s.end());</p><h2 id="str-‘0’"><a href="#str-‘0’" class="headerlink" title="str-‘0’"></a>str-‘0’</h2><p>实际就是减去 ‘0’ 的ASCII码值，也就是一个整数。</p><p>对字符串进行类型转换（string→int）</p><h2 id="isdigit-函数"><a href="#isdigit-函数" class="headerlink" title="isdigit()函数"></a>isdigit()函数</h2><p>C ++库函数 void isalpha(int c) 检查所传的字符是否是字母。</p><h2 id="isalpha-函数"><a href="#isalpha-函数" class="headerlink" title="isalpha()函数"></a>isalpha()函数</h2><p>C ++库函数 void isalpha(int c) 检查所传的字符是否是字母。</p><h2 id="add-函数"><a href="#add-函数" class="headerlink" title="add()函数"></a>add()函数</h2><h2 id="stoi-函数"><a href="#stoi-函数" class="headerlink" title="stoi()函数"></a>stoi()函数</h2><p>stoi函数中放入string类型的参数，可以把string类型转换成int类型</p><h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>用途：一种构造string的方法，也可以用来复制字符串的一部分</p><p>形式：s.substr(pos, n)</p><p>解释：返回一个string，包含s中从pos开始的n个字符的拷贝（pos的默认值是0，n的默认值是s.size() - pos，即不加参数会默认拷贝整个s）</p><p>补充：若pos的值超过了string的大小，则substr函数会抛出一个out_of_range异常；若pos+n的值超过了string的大小，则substr会调整n的值，只拷贝到string的末尾</p><h2 id="tolower-函数"><a href="#tolower-函数" class="headerlink" title="tolower()函数"></a>tolower()函数</h2><p>C ++库函数 int tolower(int c) 把给定的字母转换为小写字母。</p><h2 id="toupper-函数"><a href="#toupper-函数" class="headerlink" title="toupper()函数"></a>toupper()函数</h2><p>C ++库函数 int toupper(int c) 把给定的字母转换为大写字母。</p><h2 id="string-back-函数"><a href="#string-back-函数" class="headerlink" title="string.back()函数"></a>string.back()函数</h2><p>C++string.back()函数 此函数同于访问字符串的最后一个字符 。</p><h2 id="find-函数"><a href="#find-函数" class="headerlink" title="find()函数"></a>find()函数</h2><p><strong>使用find，返回的是被查找元素的位置，没有则返回map.end()</strong></p><p>C++ string中的find()函数，string中find()返回值是字母在母串中的位置（下标记录），如果没有找到，那么会返回 -1</p><p>使用方法：find(a.begin(), a.end(), value)</p><ol><li><p><strong>find()</strong></p><p>查找第一次出现的目标字符串（全匹配），<strong>要与子串完全匹配，否则返回-1</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s1 = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;de&quot;</span>;<br><span class="hljs-type">int</span> ans = s1.<span class="hljs-built_in">find</span>(s2);<span class="hljs-comment">//在S1中查找子串S2</span><br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果：3</span><br></code></pre></td></tr></table></figure></li><li><p><strong>find_first_of()</strong> </p><p>查找子串中的某个字符最先出现的位置（非全匹配），<strong>find_first_of()不是全匹配</strong>，不需要与子串完全匹配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s1 = <span class="hljs-string">&quot;adedef&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;dek&quot;</span>;<br><span class="hljs-type">int</span> ans = s1.<span class="hljs-built_in">find_first_of</span>(s2);<span class="hljs-comment">//在S1中查找子串S2</span><br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果：1</span><br></code></pre></td></tr></table></figure></li><li><p><strong>find_last_of()</strong></p><p>这个函数与find_first_of()功能差不多，只不过find_first_of()是从字符串的前面往后面搜索，而find_last_of()是从字符串的后面往前面搜索（非全匹配）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s1 = <span class="hljs-string">&quot;adedef&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;dek&quot;</span>;<br><span class="hljs-type">int</span> ans = s1.<span class="hljs-built_in">find_last_of</span>(s2);<span class="hljs-comment">//在S1中查找子串S2</span><br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果为：4</span><br></code></pre></td></tr></table></figure></li><li><p>rfind()</p><p>反向查找字符串，即找到最后一个与子串匹配的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s1 = <span class="hljs-string">&quot;adedekf&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;dek&quot;</span>;<br><span class="hljs-type">int</span> ans = s1.<span class="hljs-built_in">rfind</span>(s2);<span class="hljs-comment">//在S1中查找子串S2</span><br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果为：3</span><br></code></pre></td></tr></table></figure></li><li><p>find_first_not_of()</p><p>找到第一个不与子串匹配的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s1 = <span class="hljs-string">&quot;dadedef&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;dek&quot;</span>;<br><span class="hljs-type">int</span> ans = s1.<span class="hljs-built_in">find_first_not_of</span>(s2);<span class="hljs-comment">//在S1中查找子串S2</span><br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果：1</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="count-函数"><a href="#count-函数" class="headerlink" title="count()函数"></a>count()函数</h2><p><strong>统计某个字符出现的次数</strong></p><p>使用方法是 count(begin, end, ‘a’) ，其中begin指的是起始地址，end指的是结束地址，第三个参数指的是需要查找的字符</p><p><strong>在unordered_set里面：count函数只会返回1或者0</strong> ，因为无重复元素</p><p>在map里面是找具有某个键的个数，由于无重复的键，因此返回不是0就是1</p><h2 id="builtin-popcount"><a href="#builtin-popcount" class="headerlink" title="__builtin_popcount"></a>__builtin_popcount</h2><blockquote><p>__builtin_popcount()</p><p>该函数是C++自带的库函数，内部实现是用查表实现的。<br><strong>作用</strong>：统计数字在二进制下“1”的个数。</p><p>Note：是__builtin_popcount()，千万别写成 _builtin_popcount()</p></blockquote><h2 id="lower-bound-函数"><a href="#lower-bound-函数" class="headerlink" title="lower_bound()函数"></a>lower_bound()函数</h2><blockquote><p>lower_bound() 函数用于在指定区域内查找不小于目标值的第一个元素。也就是说，使用该函数在指定范围内查找某个目标值时，最终查找到的不一定是和目标值相等的元素，还可能是比目标值大的元素。它的底层实现采用的都是二分查找的方式。</p><p>注意：</p><p>1.因为函数底层实现采用的是二维数组，所以该函数仅适用于已排好序的序列。</p><p>2.迭代器遍历时，函数返回的是迭代器</p><p>详解见博客：<a href="http://m.biancheng.net/view/7521.html">http://m.biancheng.net/view/7521.html</a></p></blockquote><h2 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp()函数"></a>strcmp()函数</h2><p>strcmp函数是string compare（字符串比较）的缩写，用于比较两个字符串并根据比较结果返回整数。基本形式为strcmp(str1,str2)，若str1=str2，则返回零；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>map unordered_map set unordered_set的用法和区别</title>
    <link href="/2022/04/10/map%20unordered_map%20set%20unordered_set%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/04/10/map%20unordered_map%20set%20unordered_set%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><table><thead><tr><th align="center"><strong>数据结构</strong></th><th align="center"><strong>map</strong></th><th align="center"><strong>unordered_map</strong></th><th align="center"><strong>set</strong></th><th align="center"><strong>unordered_set</strong></th></tr></thead><tbody><tr><td align="center">实现机理</td><td align="center">红黑树</td><td align="center">hash表</td><td align="center">红黑树</td><td align="center">hash表</td></tr><tr><td align="center">元素格式</td><td align="center">key+value</td><td align="center">key+value</td><td align="center">key</td><td align="center">key</td></tr><tr><td align="center">存储规律</td><td align="center">键升序</td><td align="center">无序</td><td align="center">键升序</td><td align="center">无序</td></tr><tr><td align="center">元素重复</td><td align="center">键不可,值可</td><td align="center">键不可,值可</td><td align="center">不可重复</td><td align="center">不可重复</td></tr><tr><td align="center">头文件</td><td align="center">#include&lt; map&gt;</td><td align="center">#include<unordered_map></td><td align="center">#include&lt; set&gt;</td><td align="center">#include<unordered_set></td></tr></tbody></table><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h4 id="内部实现机理"><a href="#内部实现机理" class="headerlink" title="内部实现机理"></a><strong>内部实现机理</strong></h4><p>map内部实现了一个 红黑树（红黑树是非严格平衡二叉搜索树，而AVL是严格平衡二叉搜索树）， 红黑树具有自动排序的功能，因此map内部的所有元素都是有序的，红黑树的每一个节点都代表着map的一个元素。因此，对于map进行的查找，删除，添加等一系列的操作都相当于是对红黑树进行的操作。map中的元素是按照二叉搜索树（又名二叉查找树、二叉排序树，特点就是左子树上所有节点的键值都小于根节点的键值，右子树所有节点的键值都大于根节点的键值）存储的，使用中序遍历可将键值按照从小到大遍历出来。</p><h4 id="优缺点以及适用处"><a href="#优缺点以及适用处" class="headerlink" title="优缺点以及适用处"></a><strong>优缺点以及适用处</strong></h4><p>优点：有序性，这是map结构最大的优点，其元素的有序性在很多应用中都会简化很多的操作；红黑树，内部实现一个红黑树使得map的很多操作在O(logN)的时间复杂度下就可以实现，因此效率非常的高。</p><p>缺点：空间占用率高，因为map内部实现了红黑树，虽然提高了运行效率（低于unorder_map），但是因为每一个节点都需要额外保存父节点、孩子节点和红/黑性质，使得每一个节点都占用大量的空间（但占用的内存比unorder_map低）</p><p>适用处：对于那些数据存储有顺序要求的问题，用map会更高效一些</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>1.构造函数 2.插入数据 3.判断是否有元素 4.遍历 5.查找 </p><p>参考博客</p><p><a href="https://blog.csdn.net/weixin_45774972/article/details/113418453?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&utm_relevant_index=2">C++ 中使用哈希表(unordered_map)的常用操作</a> </p><p><a href="https://lover.blog.csdn.net/article/details/82633778?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3.pc_relevant_antiscan&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3.pc_relevant_antiscan&utm_relevant_index=6">简述C++中map和unordered_map的用法</a> </p><p><a href="https://blog.csdn.net/qq_30815237/article/details/91047041">C++ map set unordered_map和unorder_set的区别</a></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; list = &#123; <span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">34</span>,<span class="hljs-number">22</span>,<span class="hljs-number">39</span>,<span class="hljs-number">5</span> &#125;;<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; map;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = list.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>map[i] = list[i];  <span class="hljs-comment">//倒序插入</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = map.<span class="hljs-built_in">begin</span>(); i != map.<span class="hljs-built_in">end</span>(); i++) &#123;<br>cout &lt;&lt; i-&gt;first &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; i-&gt;second &lt;&lt; endl;  <span class="hljs-comment">//输出的数是有序的且有两个5</span><br>&#125;<br><span class="hljs-keyword">if</span> (map.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>) != map.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;find key=&quot;</span> &lt;&lt; map.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>)-&gt;first &lt;&lt; <span class="hljs-string">&quot;, value=&quot;</span> &lt;&lt; map.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>)-&gt;second &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">if</span> (map.<span class="hljs-built_in">count</span>(<span class="hljs-number">5</span>) &gt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//m.count(n)计算下标为n的位置有无数据，有返回1，无返回0</span><br>cout &lt;&lt; <span class="hljs-string">&quot;count 5: &quot;</span> &lt;&lt; map.<span class="hljs-built_in">count</span>(<span class="hljs-number">5</span>) &lt;&lt; endl;  <span class="hljs-comment">//find()和count()的输入参数都是key值</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>map是基于RBT的，因此元素是有序存储的（默认按键的升序排列）。</p></blockquote><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><h4 id="内部实现机理-1"><a href="#内部实现机理-1" class="headerlink" title="内部实现机理"></a><strong>内部实现机理</strong></h4><p>unordered_map内部实现了一个 哈希表（也叫散列表，通过把关键码值映射到Hash表中一个位置来访问记录，查找的时间复杂度可达到O(1)，其在海量数据处理中有着广泛应用）。因此， 其元素的排列顺序是无序的。</p><h4 id="优缺点以及适用处-1"><a href="#优缺点以及适用处-1" class="headerlink" title="优缺点以及适用处"></a><strong>优缺点以及适用处</strong></h4><p>优点： 因为内部实现了哈希表，因此其查找速度非常的快（运行效率快于map）</p><p>缺点： 哈希表的建立比较耗费时间（unorder_map占用的内存比map要高）</p><p>适用处：对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map</p><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><p>1.构造函数 2.插入数据 3.判断是否有元素 4.遍历 5.查找 </p><p><a href="https://blog.csdn.net/weixin_45774972/article/details/113418453?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&utm_relevant_index=2">C++ 中使用哈希表(unordered_map)的常用操作</a> </p><p><a href="https://lover.blog.csdn.net/article/details/82633778?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3.pc_relevant_antiscan&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3.pc_relevant_antiscan&utm_relevant_index=6">简述C++中map和unordered_map的用法</a> </p><p><a href="https://blog.csdn.net/qq_30815237/article/details/91047041">C++ map set unordered_map和unorder_set的区别</a></p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; list = &#123; <span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">34</span>,<span class="hljs-number">22</span>,<span class="hljs-number">39</span>,<span class="hljs-number">5</span> &#125;;<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; map;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = list.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br>map[i] = list[i];  <span class="hljs-comment">//倒序插入</span><br>&#125;<br>cout &lt;&lt; map[<span class="hljs-number">0</span>] &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::iterator i = map.<span class="hljs-built_in">begin</span>(); i != map.<span class="hljs-built_in">end</span>(); i++) &#123;<br>cout &lt;&lt; i-&gt;first &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; i-&gt;second &lt;&lt; endl;  <span class="hljs-comment">//输出的数是有序的且有两个5</span><br>&#125;<br><span class="hljs-keyword">if</span> (map.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>) != map.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;find key=&quot;</span> &lt;&lt; map.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>)-&gt;first &lt;&lt; <span class="hljs-string">&quot;, value=&quot;</span> &lt;&lt; map.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>)-&gt;second &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">if</span> (map.<span class="hljs-built_in">count</span>(<span class="hljs-number">5</span>) &gt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//m.count(n)计算下标为n的位置有无数据，有返回1，无返回0</span><br>cout &lt;&lt; <span class="hljs-string">&quot;find 5: &quot;</span> &lt;&lt; map.<span class="hljs-built_in">count</span>(<span class="hljs-number">5</span>) &lt;&lt; endl;  <span class="hljs-comment">//find()和count()的输入都是key值</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>unordered_map 是基于hash表的，因此元素是无序存储的（不按键升序排列）。</p></blockquote><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h4 id="内部实现机理-2"><a href="#内部实现机理-2" class="headerlink" title="内部实现机理"></a><strong>内部实现机理</strong></h4><p>set实现了红黑树的平衡二叉检索树的数据结构，插入元素时，它会自动调整二叉树的排列，把元素放到适当的位置，以保证每个子树根节点键值大于左子树所有节点的键值，小于右子树所有节点的键值；另外，还得保证根节点左子树的高度与右子树高度相等。在set中每个元素的值都唯一，而且系统能根据元素的值自动进行排序。平衡二叉检索树使用中序遍历算法，检索效率高于vector、deque和list等容器，另外使用中序遍历可将键值按照从小到大遍历出来。</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; list = &#123; <span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">34</span>,<span class="hljs-number">22</span>,<span class="hljs-number">39</span>,<span class="hljs-number">5</span> &#125;;<br>set&lt;<span class="hljs-type">int</span>&gt; set1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = list.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>set1.<span class="hljs-built_in">insert</span>(list[i]);  <span class="hljs-comment">//倒序插入</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = set1.<span class="hljs-built_in">begin</span>(); i != set1.<span class="hljs-built_in">end</span>(); i++) &#123;<br>cout &lt;&lt; *i &lt;&lt; endl;  <span class="hljs-comment">//输出的数是有序的且只有一个5</span><br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;find 5: &quot;</span> &lt;&lt; *set1.<span class="hljs-built_in">find</span>(<span class="hljs-number">5</span>) &lt;&lt; endl;<br>cout &lt;&lt;<span class="hljs-string">&quot;count 5: &quot;</span> &lt;&lt; set1.<span class="hljs-built_in">count</span>(<span class="hljs-number">5</span>) &lt;&lt; endl;<br></code></pre></td></tr></table></figure><blockquote><p>set 是基于RBT的，因此元素是顺序存储的（默认按键值升序排列）。</p></blockquote><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><h4 id="内部实现机理-3"><a href="#内部实现机理-3" class="headerlink" title="内部实现机理"></a><strong>内部实现机理</strong></h4><p>unordered_set的内部实现了一个哈希表，因此， 其元素的排列顺序是无序的。</p><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; list = &#123; <span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">34</span>,<span class="hljs-number">22</span>,<span class="hljs-number">39</span>,<span class="hljs-number">5</span> &#125;;<br>unordered_set&lt;<span class="hljs-type">int</span>&gt; set;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = list.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>set.<span class="hljs-built_in">insert</span>(list[i]);  <span class="hljs-comment">//倒序插入</span><br>&#125;<br><span class="hljs-keyword">for</span> (unordered_set&lt;<span class="hljs-type">int</span>&gt;::iterator i = set.<span class="hljs-built_in">begin</span>(); i != set.<span class="hljs-built_in">end</span>(); i++) &#123;<br>cout &lt;&lt; *i &lt;&lt; endl;  <span class="hljs-comment">//输出的数是无序的且只有一个5</span><br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;find 39: &quot;</span> &lt;&lt; *set.<span class="hljs-built_in">find</span>(<span class="hljs-number">39</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;count 14:&quot;</span> &lt;&lt; set.<span class="hljs-built_in">count</span>(<span class="hljs-number">14</span>) &lt;&lt; endl;<br></code></pre></td></tr></table></figure><blockquote><p>unordered_set 是基于hash表的，因此元素是无序存储的（不按键值升序排列）。</p></blockquote><h2 id="unordered-map与unordered-set的区别"><a href="#unordered-map与unordered-set的区别" class="headerlink" title="unordered_map与unordered_set的区别"></a>unordered_map与unordered_set的区别</h2><blockquote><p>后者就是在哈希表插入value，而这个value就是它自己的key，而不是像之前的unordered_map那样有键-值对，这里单纯就是为了方便查询这些值。</p><p>它们几乎相同. unordered_set只包含键,没有值.没有从键到值的映射,因此不需要operator[]. unordered_map将键映射到值.</p></blockquote><h2 id="unordered-map与map的区别"><a href="#unordered-map与map的区别" class="headerlink" title="unordered_map与map的区别"></a>unordered_map与map的区别</h2><blockquote><p>这两个的内部结构都是采用哈希表来实现。区别在哪里？unordered_map在C++11的时候被引入标准库了，而hash_map没有，所以建议还是使用unordered_map比较好。</p></blockquote><h2 id="hash-map与unordered-map的区别"><a href="#hash-map与unordered-map的区别" class="headerlink" title="hash_map与unordered_map的区别"></a>hash_map与unordered_map的区别</h2><blockquote><p>虽然都是map，但是内部结构大大的不同哎，map的内部结构是R-B-tree来实现的，所以保证了一个稳定的动态操作时间，查询、插入、删除都是O（logN），最坏和平均都是。而unordered_map如前所述，是哈希表。顺便提一下，哈希表的查询时间虽然是O（1），但是并不是unordered_map查询时间一定比map短，因为实际情况中还要考虑到数据量，而且unordered_map的hash函数的构造速度也没那么快，所以不能一概而论，应该具体情况具体分析。</p></blockquote><p>参考博客：</p><p><a href="https://blog.csdn.net/bryant_zhang/article/details/111600209">C++：map,unordered_map,set和unordered_set的用法和区别</a></p><p><a href="https://blog.csdn.net/u013195320/article/details/23046305?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~TopBlog-1.topblog&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~TopBlog-1.topblog&utm_relevant_index=1">C++中map、hash_map、unordered_map、unordered_set通俗辨析</a></p><p> </p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「数据库系统概论」期末复习</title>
    <link href="/2022/04/07/%E3%80%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E3%80%8D%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/04/07/%E3%80%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E3%80%8D%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h1><p><a href="https://youpai.roccoshi.top/img/20210107010414.png"><img src="https://youpai.roccoshi.top/img/20210107010414.png" alt="img"></a></p><h1 id="2-关系数据库"><a href="#2-关系数据库" class="headerlink" title="2. 关系数据库"></a>2. 关系数据库</h1><h2 id="1-关系数据结构及形式化定义"><a href="#1-关系数据结构及形式化定义" class="headerlink" title="1 | 关系数据结构及形式化定义"></a>1 | 关系数据结构及形式化定义</h2><p>关系模型中数据的逻辑结构是一张扁平的二维表</p><p>关系是笛卡尔积的有限子集，所以关系也是一张二维表</p><p><strong>候选码</strong>：若关系中某一属性的值能唯一标识一个元组，而其子集不能，则称该属性组为候选码</p><p><strong>主码</strong>：若一个关系中有多个候选码，则选定其中一个为主码</p><p><strong>主属性</strong>：候选码的诸属性称为主属性</p><p><strong>非主属性</strong>：不包含在任何候选码中的属性称为非主属性或非码属性</p><p><strong>全码</strong>：关系模式的所有属性是这个关系模式的候选码，称为全码</p><h2 id="2-关系的完整性"><a href="#2-关系的完整性" class="headerlink" title="2 | 关系的完整性"></a>2 | 关系的完整性</h2><p>关系模型中有三类完整性约束：实体完整性、参照完整性和用户定义的完整性。</p><h2 id="3-关系代数"><a href="#3-关系代数" class="headerlink" title="3| 关系代数"></a>3| 关系代数</h2><h4 id="3-1-传统的集合运算"><a href="#3-1-传统的集合运算" class="headerlink" title="3-1 | 传统的集合运算"></a>3-1 | 传统的集合运算</h4><p>并、叉、交、笛卡尔积</p><h4 id="3-2-专门的关系运算"><a href="#3-2-专门的关系运算" class="headerlink" title="3-2 | 专门的关系运算"></a>3-2 | 专门的关系运算</h4><p>选择</p><p>投影：投影操作 是从列的角度进行运算</p><p>连接：两种常用的连接：等值连接和自然连接</p><p>除运算：除法是用象集来定义的</p><p>关系代数的五个基本操作：其余三种运算可以用这五种基本运算来表达</p><p><a href="https://youpai.roccoshi.top/img/20210107010534.png"><img src="https://youpai.roccoshi.top/img/20210107010534.png" alt="img"></a></p><p>关系代数中可能会用到的各个符号:</p><p><a href="https://youpai.roccoshi.top/img/20210107010616.png"><img src="https://youpai.roccoshi.top/img/20210107010616.png" alt="img"></a></p><h1 id="3-关系数据库标准语言SQL"><a href="#3-关系数据库标准语言SQL" class="headerlink" title="3. 关系数据库标准语言SQL"></a>3. 关系数据库标准语言SQL</h1><h2 id="1-SQL概述"><a href="#1-SQL概述" class="headerlink" title="1 | SQL概述"></a>1 | SQL概述</h2><h3 id="1-1-SQL的特点"><a href="#1-1-SQL的特点" class="headerlink" title="1-1 | SQL的特点"></a>1-1 | SQL的特点</h3><p>1、综合统一 </p><p>2、高度非过程化</p><p>3、面向集合的操作方式</p><p>4、以同一种语法结构提供多种使用方式</p><p>5、语言简洁，易学易用</p><h3 id="1-2-SQL与三级模式体系结构图"><a href="#1-2-SQL与三级模式体系结构图" class="headerlink" title="1-2 | SQL与三级模式体系结构图"></a>1-2 | SQL与<strong>三级模式</strong>体系结构图</h3><p><a href="https://youpai.roccoshi.top/img/20210106174625.png"><img src="https://youpai.roccoshi.top/img/20210106174625.png" alt="image-20201226123540167"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174625.png">image-20201226123540167</a></p><p>模式：模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征描述，是所有用户的公共数据视图</p><p>外模式：外模式也称子模式或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p><p>内模式：内模式也称存储模式，一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式</p><h2 id="2-数据定义"><a href="#2-数据定义" class="headerlink" title="2 | 数据定义"></a>2 | 数据定义</h2><p>SQL数据的定义功能：定义各种数据库的对象</p><p>SQL数据库定义功能包括模式定义、表定义、视图定义和索引定义</p><p><a href="https://youpai.roccoshi.top/img/20210106174626.png"><img src="https://youpai.roccoshi.top/img/20210106174626.png" alt="image-20201226123755751"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174626.png">image-20201226123755751</a></p><p>数据库对象命名机制的层次结构：</p><p>一个关系数据库管理系统中可以建立多个数据库，一个数据库可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。</p><h3 id="2-1-模式的定义与删除"><a href="#2-1-模式的定义与删除" class="headerlink" title="2-1 | 模式的定义与删除"></a>2-1 | 模式的定义与删除</h3><h3 id="2-2-基本表的定义、删除与修改"><a href="#2-2-基本表的定义、删除与修改" class="headerlink" title="2-2 | 基本表的定义、删除与修改"></a>2-2 | 基本表的定义、删除与修改</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE <span class="hljs-operator">&lt;</span>name<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h4 id="定义基本表"><a href="#定义基本表" class="headerlink" title="定义基本表"></a>定义基本表</h4><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br>(<br>    <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>列级完整性约束条件<span class="hljs-operator">&gt;</span>,<br>    <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>列级完整性约束条件<span class="hljs-operator">&gt;</span>,<br>   ...<br>    <span class="hljs-operator">&lt;</span>表级完整性约束条件<span class="hljs-operator">&gt;</span><br>);<br></code></pre></td></tr></table></figure><p>列级完整性约束条件</p><p>表级完整性约束条件</p><p>实例：建立一个 “课程” 表Course</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Course<br>(Cno <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">PRIMARY</span> KEY,  <span class="hljs-comment">/*列级完整性约束条件，Cno是主码*/</span><br>     Cname <span class="hljs-type">CHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,  <span class="hljs-comment">/*列级完整性约束条件，Cname不能取空值*/</span><br>     Cpno <span class="hljs-type">CHAR</span>(<span class="hljs-number">40</span>),  <span class="hljs-comment">/*Cpno的含义是先修课*/</span><br>     Ccredit <span class="hljs-type">SMALLINT</span>,<br>     <span class="hljs-keyword">FOREIGN</span> KEY(Cpno) <span class="hljs-keyword">REFERENCES</span> Course(Cno)<br>     <span class="hljs-comment">/*表级完整性约束条件，Cpno是外码，被参照表是Course，被参照对的列是Cno*/</span><br>    );<br></code></pre></td></tr></table></figure><p>常用的完整性约束:</p><p><a href="https://youpai.roccoshi.top/img/20210106174627.png"><img src="https://youpai.roccoshi.top/img/20210106174627.png" alt="image-20201226125004438"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174627.png">image-20201226125004438</a></p><h4 id="修改基本表"><a href="#修改基本表" class="headerlink" title="修改基本表"></a>修改基本表</h4><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">ADD</span>[<span class="hljs-keyword">COLUMN</span>]<span class="hljs-operator">&lt;</span>新列名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span>[完整性约束]]<br>[<span class="hljs-keyword">ADD</span><span class="hljs-operator">&lt;</span>表级完整性约束<span class="hljs-operator">&gt;</span>]<br>[<span class="hljs-keyword">DROP</span>[<span class="hljs-keyword">COLUMN</span>]<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>[CASCADE<span class="hljs-operator">|</span>RESTRICT]]<br>[<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span><span class="hljs-operator">&lt;</span>完整性约束名<span class="hljs-operator">&gt;</span> [RESTRICT<span class="hljs-operator">|</span>CASCADE]]<br>[<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span><span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span>]<br></code></pre></td></tr></table></figure><h4 id="删除基本表"><a href="#删除基本表" class="headerlink" title="删除基本表"></a>删除基本表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> [RESTRICT<span class="hljs-operator">|</span>CASCADE]<br></code></pre></td></tr></table></figure><blockquote><p>RESTRICT：若选择RESTRICT，则该表的删除是有限制条件的</p><p>CASCADE：若选择CASCADE，则该表的删除是没有限制条件的</p></blockquote><h2 id="3-数据查询（重点）"><a href="#3-数据查询（重点）" class="headerlink" title="3 | 数据查询（重点）"></a>3 | 数据查询（重点）</h2><p>语法:</p><p><a href="https://youpai.roccoshi.top/img/20210106174628.png"><img src="https://youpai.roccoshi.top/img/20210106174628.png" alt="image-20201226130756283"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174628.png">image-20201226130756283</a></p><h3 id="3-1-单表查询"><a href="#3-1-单表查询" class="headerlink" title="3-1 | 单表查询"></a>3-1 | 单表查询</h3><h4 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h4><p><a href="https://youpai.roccoshi.top/img/20210106174629.png"><img src="https://youpai.roccoshi.top/img/20210106174629.png" alt="image-20201226130825216"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174629.png">image-20201226130825216</a></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">23</span>;    <span class="hljs-comment">/*找年龄20-23岁的*/</span><br><span class="hljs-keyword">where</span> dept <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;ma&#x27;</span>, <span class="hljs-string">&#x27;cs&#x27;</span>);    <span class="hljs-comment">/*查询不是is, ma, cs系得*/</span><br><span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;刘%&#x27;</span>;    <span class="hljs-comment">/*找姓刘的*/</span><br><span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;__阳&#x27;</span>;    <span class="hljs-comment">/*找名字叫xx阳的*/</span><br><span class="hljs-keyword">where</span> cname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;DB\_Design&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;\&#x27;</span>;<br><span class="hljs-comment">/*escape定义转义字符, 出现在其后的第一个字符不是通配符而是字符本身*/</span><br></code></pre></td></tr></table></figure><h4 id="ORDER-BY字句"><a href="#ORDER-BY字句" class="headerlink" title="ORDER BY字句"></a>ORDER BY字句</h4><p>用户可以用ORDER BY字句对查询结果按照一个或多个属性的升序（ASC）或降序（DESC）排列，默认值为升序。</p><p>对属性列排序：</p><ul><li>asc为升序</li><li>desc为降序</li><li>默认为升序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*查询全体学生情况，查询结果按所在系的系号升序排列，同一系中的学生按年龄降序排列*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Sdept,Sage <span class="hljs-keyword">DESC</span>;  <span class="hljs-comment">/*Sdept默认升序*/</span><br></code></pre></td></tr></table></figure><h4 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-built_in">COUNT</span>([<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>] <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>)<br><span class="hljs-built_in">SUM</span>([<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>] <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>)<br><span class="hljs-built_in">AVG</span>([<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>] <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>)<br><span class="hljs-built_in">MAX</span>([<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>] <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>)<br><span class="hljs-built_in">MIN</span>([<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>] <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>如果指定DISTINCT短语，则表示在计算时要取消指定列中的重复行。如果不指定DISTINCT短语或者ALL短语（ALL为默认值），则表示不取消重复行。</p></blockquote><h4 id="GROUP-BY短语"><a href="#GROUP-BY短语" class="headerlink" title="GROUP BY短语"></a>GROUP BY短语</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">HAVING</span> <span class="hljs-operator">&lt;</span>条件<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>GROUP BY子句将查询结果按某一列或多列的值分组，值相等的为一组。</p><p>分散后聚集函数将作用于每一个组，即每一组都有一个函数值。</p><p>Note:</p><p>按指定的一列或者多列分组, 值相等的为一组, HAVING子句作用于各个组之上</p><ul><li>如果未对查询结果分组, 集函数作用于整个查询结果</li><li>对查询结果分组后, 集函数分别作用于各个组</li><li>使用GROUP BY子句后, SELECT子句的列名表中只能出现分组属性和集函数, 不能出现在group by中没有出现的属性</li></ul><p>例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*查询各个课程号和相应的选课人数*/</span><br><span class="hljs-keyword">select</span> cno, <span class="hljs-built_in">count</span>(sno)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cno;<br><br><span class="hljs-comment">/*查询有3门以上课程是90分以上的学生学号及其(90分以上的)课程数。*/</span><br><span class="hljs-keyword">select</span> sno, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> grade <span class="hljs-operator">&gt;=</span> <span class="hljs-number">90</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="3-2-连接查询"><a href="#3-2-连接查询" class="headerlink" title="3-2 | 连接查询"></a>3-2 | 连接查询</h3><h3 id="3-3-嵌套查询"><a href="#3-3-嵌套查询" class="headerlink" title="3-3 | 嵌套查询"></a>3-3 | 嵌套查询</h3><p>分类:</p><ul><li><p><strong>相关子查询</strong> : 子查询执行依赖于父查询条件</p></li><li><p><strong>不相关子查询</strong> : 子查询执行不依赖于父查询条件</p></li></ul><h4 id="带有IN谓词的子查询"><a href="#带有IN谓词的子查询" class="headerlink" title="带有IN谓词的子查询"></a>带有IN谓词的子查询</h4><h4 id="带有比较运算的子查询"><a href="#带有比较运算的子查询" class="headerlink" title="带有比较运算的子查询"></a>带有比较运算的子查询</h4><p>带有比较运算符的子查询是指父查询与子查询之间用比较运算符进行连接。当用户能确切知道内层查询返回的是单个值时，可以用&gt;、&lt;、=、&gt;=、&lt;=、!=或&lt;&gt;等比较运算符。</p><h4 id="带有ANY（SOME）或ALL谓词的子查询"><a href="#带有ANY（SOME）或ALL谓词的子查询" class="headerlink" title="带有ANY（SOME）或ALL谓词的子查询"></a>带有ANY（SOME）或ALL谓词的子查询</h4><p>子查询返回单值时可以用比较运算符，但返回多值时要用ANY或ALL谓词修饰。而使用ANY或ALL谓词时必须同时使用比较运算符。</p><p><a href="https://youpai.roccoshi.top/img/20210106174630.png"><img src="https://youpai.roccoshi.top/img/20210106174630.png" alt="img"></a></p><p>例子: (为不相关子查询)</p><p><a href="https://youpai.roccoshi.top/img/20210106174631.png"><img src="https://youpai.roccoshi.top/img/20210106174631.png" alt="image-20201226133604299"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174631.png">image-20201226133604299</a></p><p>使用any/all谓词与集函数具有等价关系, 而用集函数查询通常比any/all查询效率高因为前者可以减少比较次数</p><p><a href="https://youpai.roccoshi.top/img/20210106174632.png"><img src="https://youpai.roccoshi.top/img/20210106174632.png" alt="image-20201226133751280"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174632.png">image-20201226133751280</a></p><h4 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h4><p>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值true或逻辑假值false， 故子查询通常只用select *</p><p><a href="https://youpai.roccoshi.top/img/20210106174633.png"><img src="https://youpai.roccoshi.top/img/20210106174633.png" alt="image-20201226133932439"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174633.png">image-20201226133932439</a></p><p>使用<strong>EXISTS子查询的效率要优于使用连接查询和IN查询</strong></p><p>EXISTS通常引入的是相关子查询, 而IN更多的是不相关子查询</p><h3 id="3-4-集合查询"><a href="#3-4-集合查询" class="headerlink" title="3-4 | 集合查询"></a>3-4 | 集合查询</h3><p>集合操作命令</p><table><thead><tr><th>命令</th><th></th></tr></thead><tbody><tr><td>UNION</td><td>并</td></tr><tr><td>INTERSECT</td><td>交</td></tr><tr><td>MINUS</td><td>差</td></tr></tbody></table><p><a href="https://youpai.roccoshi.top/img/20210106174634.png"><img src="https://youpai.roccoshi.top/img/20210106174634.png" alt="image-20201226140459748"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174634.png">image-20201226140459748</a></p><h2 id="4-数据更新"><a href="#4-数据更新" class="headerlink" title="4 | 数据更新"></a>4 | 数据更新</h2><h3 id="4-1-插入数据"><a href="#4-1-插入数据" class="headerlink" title="4-1 | 插入数据"></a>4-1 | 插入数据</h3><h4 id="插入单个结果"><a href="#插入单个结果" class="headerlink" title="插入单个结果"></a>插入单个结果</h4><p>格式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> [(<span class="hljs-operator">&lt;</span>属性列<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>属性列<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span>]...)]<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-operator">&lt;</span>常量<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>常量<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span>]...)<br></code></pre></td></tr></table></figure><p>如果不指定属性列, 则values必须以完整的元组插入, 且属性与表中属性顺序一致</p><p>举例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> sc(sno, cno)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;95001&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> [(<span class="hljs-operator">&lt;</span>属性列<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>属性列<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span>]...)]<br>子查询;<br></code></pre></td></tr></table></figure><p>举例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> Deptage(Sdept, Avgage)<br><span class="hljs-keyword">SELECT</span> Sdept,<span class="hljs-built_in">AVG</span>(Sage)  <span class="hljs-comment">-- 属性个数要匹配</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sdept;<br></code></pre></td></tr></table></figure><h4 id="注意完整性约束"><a href="#注意完整性约束" class="headerlink" title="注意完整性约束"></a>注意完整性约束</h4><p><a href="https://youpai.roccoshi.top/img/20210106174635.png"><img src="https://youpai.roccoshi.top/img/20210106174635.png" alt="image-20201226143151436"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174635.png">image-20201226143151436</a></p><h3 id="4-2-修改数据"><a href="#4-2-修改数据" class="headerlink" title="4-2 | 修改数据"></a>4-2 | 修改数据</h3><p>格式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">SET</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;=</span><span class="hljs-operator">&lt;</span>表达式<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;=</span><span class="hljs-operator">&lt;</span>表达式<span class="hljs-operator">&gt;</span>]...<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>条件<span class="hljs-operator">&gt;</span>]<br></code></pre></td></tr></table></figure><p>举例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> student<br><span class="hljs-keyword">set</span> sage <span class="hljs-operator">=</span> <span class="hljs-number">22</span><br><span class="hljs-keyword">where</span> sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95001&#x27;</span><br><span class="hljs-keyword">Copy</span><br><span class="hljs-comment">-- 将所有学生年龄增加一岁</span><br><span class="hljs-keyword">update</span> student<br><span class="hljs-keyword">set</span> sage <span class="hljs-operator">=</span> sage <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><h3 id="4-3-删除数据"><a href="#4-3-删除数据" class="headerlink" title="4-3 | 删除数据"></a>4-3 | 删除数据</h3><p>格式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>条件<span class="hljs-operator">&gt;</span>];<br></code></pre></td></tr></table></figure><p>删除表中满足where指定条件的元组</p><p>例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95001&#x27;</span>;<br><span class="hljs-keyword">Copy</span><br><span class="hljs-comment">-- 删除所有学生的选课记录</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">from</span> sc;<br><span class="hljs-keyword">Copy</span><br><span class="hljs-comment">-- 删除CS系所有学生的选课记录</span><br><span class="hljs-keyword">delete</span> <br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">select</span> sno<br>    <span class="hljs-keyword">from</span> student<br>    <span class="hljs-keyword">where</span> student.sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br>);<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>删除时的参照完整性:</p><ul><li>不允许被删除</li><li>级联删除 ( 通过CASCADE参数指定 )</li></ul><h2 id="5-视图"><a href="#5-视图" class="headerlink" title="5 | 视图"></a>5 | 视图</h2><p>视图的特点：</p><p>1、虚表，是从一个或几个基本表（或视图）导出的表</p><p>2、只存放视图的定义，不存放视图对应的数据</p><p>3、基本表中的数据发生变化，从视图中查询出的数据也随之改变</p><p>数据库系统的<strong>三级模式</strong>: 外模式, 模式, 内模式</p><p>数据库系统的<strong>两级映像</strong>: 外模式-模式映像 模式-内模式映像</p><ul><li>外模式-模式映像用途: <strong>保证数据的逻辑独立性</strong></li><li>模式-内模式映像用途: <strong>保证数据的物理独立性</strong></li></ul><p>视图对应的就是三级模式/两级映像体系结构中的外模式和外模式/模式映像</p><h3 id="5-1-定义视图"><a href="#5-1-定义视图" class="headerlink" title="5-1 | 定义视图"></a>5-1 | 定义视图</h3><p>格式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> <span class="hljs-operator">&lt;</span>视图名<span class="hljs-operator">&gt;</span> [(<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>]...)]<br><span class="hljs-keyword">AS</span> <span class="hljs-operator">&lt;</span>子查询<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION];<br></code></pre></td></tr></table></figure><p><a href="https://youpai.roccoshi.top/img/20210106174636.png"><img src="https://youpai.roccoshi.top/img/20210106174636.png" alt="image-20210102151117045"></a></p><p><a href="https://youpai.roccoshi.top/img/20210106174636.png">image-20210102151117045</a></p><p>DBMS执行create view语句时只是把视图的定义存入数据字典, 并不执行其中的select语句, 在对视图查询时, 按视图的定义从基本表中将数据查出</p><p>例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> IS_STUDENT<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> sno, sname, sage<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span>;<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>若一个视图是从单个基本表导出的, 并且只去掉了基本表的某些行和某些列但保留了码, 则这类视图称为<strong>行列子集视图</strong>, 上例所建立的视图就是行列子集视图</p><h3 id="5-2-查询视图"><a href="#5-2-查询视图" class="headerlink" title="5-2 | 查询视图"></a>5-2 | 查询视图</h3><p>视图消解：从数据字典中取出视图的定义，把定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询，然后再执行修正了的查询。这一转化过程称为视图消解。</p><h3 id="5-3-更新视图"><a href="#5-3-更新视图" class="headerlink" title="5-3 | 更新视图"></a>5-3 | 更新视图</h3><h3 id="5-4-视图的作用"><a href="#5-4-视图的作用" class="headerlink" title="5-4 | 视图的作用"></a>5-4 | 视图的作用</h3><p>1、视图能够简化用户的操作</p><p>2、视图使用户能以多种角度看待同一数据</p><p>3、视图对重构数据库提供了一定程度的逻辑独立性</p><p>4、视图能够对机密数据提供安全防护</p><p>5、适当利用视图可以更清晰地表达查询</p><h1 id="4-数据库安全-赋权"><a href="#4-数据库安全-赋权" class="headerlink" title="4. 数据库安全-赋权"></a>4. 数据库安全-赋权</h1><blockquote><p>数据库的安全性控制通过授权机制来实现, 即通过赋予用户对数据库的使用权限来保证数据的安全</p></blockquote><h2 id="1-授权GRANT语句"><a href="#1-授权GRANT语句" class="headerlink" title="1 | 授权GRANT语句"></a>1 | 授权<code>GRANT</code>语句</h2><ul><li>将数据库中的某些对象的某些操作权限赋予某些用户</li></ul><p>格式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Grant</span> <span class="hljs-operator">&lt;</span>权限s<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">ON</span><span class="hljs-operator">&lt;</span>对象类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">TO</span><span class="hljs-operator">&lt;</span>用户s<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION]<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><ul><li>DBA拥有数据库操作的所有权限并可将权限赋予其他用户</li><li>建立数据库对象的用户称为OWNER, 他拥有对该对象的所有操作权限</li><li>接收权限的用户可以是一个或者多个具体用户, 也可以是全体用户PUBLIC</li><li><code>WITH GRANT OPTION</code>子句: 获得某种权限的用户还可以把这种权限再授予别的用户, 没有指定with grant option时, 获得某种权限的用户只能使用该权限, 不能传播该权限</li></ul><h3 id="所有权限一览表"><a href="#所有权限一览表" class="headerlink" title="所有权限一览表"></a>所有权限一览表</h3><p><a href="https://youpai.roccoshi.top/img/20201227101704.png"><img src="https://youpai.roccoshi.top/img/20201227101704.png" alt="image-20201227101703896"></a></p><p><a href="https://youpai.roccoshi.top/img/20201227101704.png">image-20201227101703896</a></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">to</span> user1;<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>把对sc表的全部权限授予全部用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> priviliges<br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> sc<br><span class="hljs-keyword">to</span> public;<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>把查询student表和修改学生学号的权限授予给用户3和用户4</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">update</span>(sno), <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">to</span> user3, user4;<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>把对表sc的insert权限授予给user5用户, 并允许他再将此权限授予其他用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> sc<br><span class="hljs-keyword">to</span> user5<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option;<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>把在数据库S_C中的建表权限授予用户8</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> createtab<br><span class="hljs-keyword">on</span> database S_C<br><span class="hljs-keyword">to</span> user8;<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><h2 id="2-收回权限REVOKE语句"><a href="#2-收回权限REVOKE语句" class="headerlink" title="2 | 收回权限REVOKE语句"></a>2 | 收回权限<code>REVOKE</code>语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> <span class="hljs-operator">&lt;</span>权限s<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>对象类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>用户s<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">update</span>(sno)<br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">from</span> user4;<br><span class="hljs-keyword">Copy</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> sc<br><span class="hljs-keyword">from</span> public;<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><ul><li>收回权限时, 将收回自己所级联授予出的权限</li><li>如果存在多重授予, (从不同用户处得到的相同权限, 则仍然具有该权限), 只收回自己级联授予的权限</li></ul><h2 id="3-视图机制"><a href="#3-视图机制" class="headerlink" title="3 | 视图机制"></a>3 | 视图机制</h2><p><a href="https://youpai.roccoshi.top/img/20201227102725.png"><img src="https://youpai.roccoshi.top/img/20201227102725.png" alt="image-20201227102725294"></a></p><p><a href="https://youpai.roccoshi.top/img/20201227102725.png">image-20201227102725294</a></p><h1 id="5-存储过程和触发器"><a href="#5-存储过程和触发器" class="headerlink" title="5. 存储过程和触发器"></a>5. 存储过程和触发器</h1><h2 id="1-存储过程"><a href="#1-存储过程" class="headerlink" title="1 | 存储过程"></a>1 | 存储过程</h2><p>创建存储过程:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span><br></code></pre></td></tr></table></figure><p>执行存储过程:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">PROCEDURE</span><br></code></pre></td></tr></table></figure><p>修改存储过程:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">PROCEDURE</span><br></code></pre></td></tr></table></figure><p>删除存储过程:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span><br></code></pre></td></tr></table></figure><h2 id="2-触发器"><a href="#2-触发器" class="headerlink" title="2 | 触发器"></a>2 | 触发器</h2><p>功能: 强化约束, 跟踪变化, 级联运行, 存储过程的调用</p><p>分类: 前触发器(<code>INSTEAD OF</code>), 后触发器 (<code>AFTER</code>)</p><p>创建:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> <br><span class="hljs-keyword">ON</span><br><span class="hljs-keyword">FOR</span><br><span class="hljs-keyword">AS</span><br><br><span class="hljs-comment">-- 例子</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> reminder<br><span class="hljs-keyword">on</span> titles<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span>, <span class="hljs-keyword">update</span><br><span class="hljs-keyword">as</span> sql_statements<br><span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>在触发器的执行过程中，系统会自动建立和管理两个逻辑表：插入表(inserted)和删除表(deleted)。这两个表与触发器所对应的基本表有着完全相同的结构，但为只读表，驻留于内存之中，直到触发器执行完毕，系统会自动删除。这两个表是事务回滚的重要依据。</p><h1 id="6-数据库设计"><a href="#6-数据库设计" class="headerlink" title="6. 数据库设计"></a>6. 数据库设计</h1><h2 id="1-数据库设计的流程"><a href="#1-数据库设计的流程" class="headerlink" title="1 | 数据库设计的流程"></a>1 | 数据库设计的流程</h2><table><thead><tr><th>1-需求分析</th><th>2-概念结构设计</th><th>3-逻辑结构设计</th><th>4-物理结构设计</th></tr></thead><tbody><tr><td></td><td>ER图</td><td>ER图-&gt;关系模型</td><td></td></tr></tbody></table><h2 id="2-ER图"><a href="#2-ER图" class="headerlink" title="2 | ER图"></a>2 | ER图</h2><p>三种表示</p><table><thead><tr><th></th><th>表示方式</th></tr></thead><tbody><tr><td>实体</td><td>矩形</td></tr><tr><td>属性</td><td>圆形</td></tr><tr><td>联系</td><td>菱形</td></tr></tbody></table><p>三种不同的联系</p><ul><li>一对一联系</li><li>一对多联系</li><li>多对多联系</li></ul><h2 id="3-ER图向关系模型的转换"><a href="#3-ER图向关系模型的转换" class="headerlink" title="3 | ER图向关系模型的转换"></a>3 | ER图向关系模型的转换</h2><table><thead><tr><th>联系</th><th>转换</th></tr></thead><tbody><tr><td>1 : 1</td><td>两实体<strong>任意一端添加另一端的主键</strong></td></tr><tr><td>1 : N</td><td>在<strong>N端添加另一端的主键</strong></td></tr><tr><td>N : M</td><td>将<strong>联系转化为实体</strong>, 并在实体中加入联系两端实体的主键</td></tr><tr><td>1 : 1 : N - N : M : P</td><td>同 1 : N - N : M (在N端添加另外两端主键 - 联系转化为实体添加三端实体主键)</td></tr></tbody></table><h1 id="7-关系数据理论"><a href="#7-关系数据理论" class="headerlink" title="7. 关系数据理论"></a>7. 关系数据理论</h1><p><strong>关系模式的简记</strong>: <code>R&lt;U, F&gt;</code></p><p>其中U表示属性集, F表示数据依赖</p><h2 id="1-关系数据理论"><a href="#1-关系数据理论" class="headerlink" title="1 | 关系数据理论"></a>1 | 关系数据理论</h2><p>不合适的数据依赖造成以下等问题</p><ul><li>数据冗余</li><li>更新异常</li><li>插入异常</li><li>删除异常</li></ul><h2 id="2-规范化"><a href="#2-规范化" class="headerlink" title="2 | 规范化"></a>2 | 规范化</h2><h3 id="2-1-函数依赖"><a href="#2-1-函数依赖" class="headerlink" title="2-1 | 函数依赖"></a>2-1 | 函数依赖</h3><p>函数依赖（Functional Dependencies）简写为FD</p><ul><li><p><strong>平凡函数依赖</strong>： (X→Y,Y⊆X) 平凡函数依赖没什么用, 不研究</p><p>例如(sno, cno)→sno</p></li><li><p><strong>非平凡函数依赖</strong>：(X→Y,Y⊈X) 如果不特别声明, 我们总是讨论非平凡函数依赖</p><p>例如(sno, cno)→grade</p><blockquote><p>对于任一关系模式，平凡函数依赖都是必然成立的，它不反应新的语义，因此若不特别声明，我们总是讨论非平凡函数依赖。</p></blockquote></li><li><p><strong>完全函数依赖</strong>：在R(U)中，如果X→Y，并且对于X的任何一个真子集X‘，都有X‘/→Y</p></li><li><p><strong>部分函数依赖</strong>：若X→Y，但Y不完全函数依赖于X</p></li><li><p><strong>传递函数依赖</strong>：在R(U)中，X→Y，Y→Z，且Y/→X，则Z传递依赖于X, 如果Y→X则为直接函数依赖</p></li></ul><h3 id="2-2-码"><a href="#2-2-码" class="headerlink" title="2-2 | 码"></a>2-2 | 码</h3><blockquote><p>码是关系模式中的一个重要概念。在第二章关系数据库中已经给出了有关码的若干定义，这里用函数依赖的概念来定义码。</p></blockquote><p><strong>候选码</strong>：设K为R&lt;U,F&gt;中的属性或属性组合，若U完全函数依赖于K，则K为R的候选码。</p><p><strong>超码</strong>：如果U部分函数依赖于K，则K为超码</p><blockquote><p>候选码是最小的超码，即K的任何一个真子集都不是候选码</p><p>候选码是 一类特殊的超码，即候选码的超集一定是超码，候选码的任何真子集一定不是超码</p></blockquote><p><strong>主码</strong>：若关系模式R有多个候选码，则选定其中一个作为主码</p><p><strong>主属性</strong>：包含在任何一个候选码中的属性称为主属性</p><p><strong>非主属性</strong>：不包含在任何一个候选码中的属性称为非主属性或非码属性</p><p><strong>全码</strong>：整个属性组是码，称为全码</p><blockquote><p>例：关系模式R(P,W,A)中，属性P表示演奏者，W表示作品，A表示听众。假设一个演奏者可以演奏多个作品，某一个作品可以被多个演奏者演奏，听众也可以欣赏不同演奏者的不同作品，这个关系模式的码为(P,W,A)，即all-key。</p></blockquote><p><strong>外码</strong>：关系模式R&lt;U,F&gt;，U中属性或者属性组X并非R的码，但X是另一个关系模式的码，则称X是R的外部码也称外码。</p><blockquote><p>主码与外码一起提供了表示关系间联系的手段</p></blockquote><h3 id="2-3-范式"><a href="#2-3-范式" class="headerlink" title="2-3 | 范式"></a>2-3 | 范式</h3><ul><li>范式：范式 是符合某一级别的关系模式的集合</li><li>关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。</li><li><strong>规范化</strong>：一个低一级范式的关系模式通过模式分解可以转换成为若干个高一级范式的关系模式的集合，这个过程就叫规范化。</li></ul><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p><strong>定义</strong>：如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF。</p><p>所有属性必须是原子的, 不允许表中套表</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p><strong>定义</strong>：若 R∈1NF，且每一个非主属性完全依赖于任何一个候选码，则R∈2NF。</p><p>满足1NF且不存在非主属性对候选码的部分函数依赖</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>满足2NF且不存在非主属性对候选码的传递函数依赖和部分函数依赖</p><h3 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h3><p>修正的第三范式</p><p>没有任何属性对码的部分函数依赖和传递函数依赖</p><p>在关系模式R&lt;U,F&gt;中每一个决定因素都包含码，则R&lt;U,F&gt;∈BCNF</p><h2 id="3-数据库依赖的公理系统"><a href="#3-数据库依赖的公理系统" class="headerlink" title="3 | 数据库依赖的公理系统"></a>3 | 数据库依赖的公理系统</h2><h3 id="六条推理规则"><a href="#六条推理规则" class="headerlink" title="六条推理规则"></a>六条推理规则</h3><ul><li>自反律</li><li>增广律</li><li>传递律</li><li>合并规则</li><li>分解规则</li><li>伪传递规则</li></ul><p><a href="https://youpai.roccoshi.top/img/20210102192831.png"><img src="https://youpai.roccoshi.top/img/20210102192831.png" alt="img"></a></p><h3 id="函数依赖集的闭包"><a href="#函数依赖集的闭包" class="headerlink" title="函数依赖集的闭包"></a>函数依赖集的闭包</h3><p>在关系模式R中为F所逻辑蕴含的函数依赖的全体叫做F的闭包, 记为F+</p><p>注: F+一般超级多, 求F+属于NP完全问题</p><h3 id="属性集的闭包"><a href="#属性集的闭包" class="headerlink" title="属性集的闭包"></a>属性集的闭包</h3><p>设F为属性集U上的一组函数依赖, X⊆U, X关于函数依赖集F的闭包为XF+</p><p>能由根据公理导出XF+={A|X→A能由F根据Armstrong公理导出}</p><p>注: 即求X可以导出的所有属性集合</p><p><a href="https://youpai.roccoshi.top/img/20210102192832.png"><img src="https://youpai.roccoshi.top/img/20210102192832.png" alt="img"></a></p><h3 id="最小函数依赖集"><a href="#最小函数依赖集" class="headerlink" title="最小函数依赖集"></a>最小函数依赖集</h3><p>即用最少的函数依赖表示全部属性之间的依赖关系, 记为Fmin</p><p>最小函数依赖集的定义:</p><p><a href="https://youpai.roccoshi.top/img/20210102192833.png"><img src="https://youpai.roccoshi.top/img/20210102192833.png" alt="img"></a></p><h3 id="考点-最小函数依赖集的求解算法"><a href="#考点-最小函数依赖集的求解算法" class="headerlink" title="考点: 最小函数依赖集的求解算法"></a>考点: 最小函数依赖集的求解算法</h3><p>第一步: <strong>对每个函数依赖作右部属性分离</strong></p><p>第二步: <strong>去掉左部的冗余属性</strong></p><p>第三步: <strong>去除多余的函数依赖</strong></p><p>注意: 最小函数依赖集不是唯一的</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><a href="https://youpai.roccoshi.top/img/20210102192834.png"><img src="https://youpai.roccoshi.top/img/20210102192834.png" alt="img"></a></p><p>在第三步的时候可以采用「除本求包」的方法, 即除去正在考察的这个函数依赖, 看左部属性的闭包是否包含正在考察的函数依赖的右部属性, 如果包含则正在考察的这个函数依赖为多余的函数依赖, 例如上面的A-&gt;D, 除去A-&gt;D的这个函数依赖求A的闭包为{A, B, C, D, E}包含D, 则A-&gt;D为多余, 应该去除。</p><p><strong>正则覆盖</strong>: 将求出的最小函数依赖集左部属性相同的函数依赖合并(例如A-&gt;B A-&gt;C合并为A-&gt;BC)</p><h3 id="考点-候选码求解算法"><a href="#考点-候选码求解算法" class="headerlink" title="考点: 候选码求解算法"></a>考点: 候选码求解算法</h3><p>第一步: <strong>根据函数依赖集F将R的所有属性分为L类, R类, LR类和N类属性[<a href="https://blog.roccoshi.top/2021/%E8%A5%BF%E7%94%B5%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%BB%E5%A4%8D%E4%B9%A0/#fn:1">1]</a>, 令X为L, N类的集合, Y为LR类的集合</strong></p><p>第二步: <strong>如果XF+=U, 则X为R的唯一候选码, 结束, 否则到第三步</strong></p><p>第三步: <strong>逐一取Y中的单一属性A, 若(XA)F+=U, 则XA为候选码, 令Y = Y - {A}, 到第四步</strong></p><p>第四步: <strong>依次取Y中的两个, 三个…属性与X组成属性组XZ, 若XZ不包含已求得的候选码, 则求其关于F的闭包(XZ)F+</strong></p><p><strong>若(XZ)F+=U, 则XZ为候选码, 重复第四步直到所有Y中的属性取完为止, 算法结束</strong></p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p><a href="https://youpai.roccoshi.top/img/20210102192835.png"><img src="https://youpai.roccoshi.top/img/20210102192835.png" alt="img"></a></p><h2 id="4-模式分解"><a href="#4-模式分解" class="headerlink" title="4 | 模式分解"></a>4 | 模式分解</h2><p><a href="https://youpai.roccoshi.top/img/20210102192836.png"><img src="https://youpai.roccoshi.top/img/20210102192836.png" alt="img"></a></p><p>分解应该考虑的问题</p><ul><li>分解不能丢失信息</li><li>分解应该保持函数依赖</li><li>分解需要保持无损连接 (可以通过自然连接还原)</li></ul><h3 id="考点-模式的无损连接性判定算法"><a href="#考点-模式的无损连接性判定算法" class="headerlink" title="考点: 模式的无损连接性判定算法"></a>考点: 模式的无损连接性判定算法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>R的一个分解为R1, R2</p><p><strong>若U1∩U2→U1−U2∈F+或者U1∩U2→U2−U1∈F+则分解R1, R2保持无损连接</strong> (<strong>充分必要条件</strong>, 用于一分为二模式的无损连接判断)</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>构造表</p><p><a href="https://youpai.roccoshi.top/img/20210102192837.png"><img src="https://youpai.roccoshi.top/img/20210102192837.png" alt="img"></a></p><h3 id="将模式分解为BCNF并保持无损连接"><a href="#将模式分解为BCNF并保持无损连接" class="headerlink" title="将模式分解为BCNF并保持无损连接"></a>将模式分解为BCNF并保持无损连接</h3><p><a href="https://youpai.roccoshi.top/img/20210102192838.png"><img src="https://youpai.roccoshi.top/img/20210102192838.png" alt="img"></a></p><h1 id="8-嵌入式SQL"><a href="#8-嵌入式SQL" class="headerlink" title="8. 嵌入式SQL"></a>8. 嵌入式SQL</h1><h2 id="1-主语言-SQLCA-主变量-游标"><a href="#1-主语言-SQLCA-主变量-游标" class="headerlink" title="1 | 主语言 SQLCA 主变量 游标"></a>1 | 主语言 SQLCA 主变量 游标</h2><p>主语言: C++, JAVA</p><p>SQLCA: sql communication area (SQL通信区)</p><p>主变量: sql使用主语言中的变量</p><p>游标: 一段缓冲区, 用于存放sql的执行结果</p><h3 id="数据库和源程序工作单元间的通信"><a href="#数据库和源程序工作单元间的通信" class="headerlink" title="数据库和源程序工作单元间的通信"></a>数据库和源程序工作单元间的通信</h3><ol><li>SQLCA向主语言传递SQL语句的执行信息(执行状态)</li><li>主语言通过主变量向SQL提供参数</li><li>主变量和游标将SQL语句查询数据库的结果交主语言处理</li></ol><h1 id="9-事务"><a href="#9-事务" class="headerlink" title="9. 事务"></a>9. 事务</h1><h2 id="1-事务的ACID特性"><a href="#1-事务的ACID特性" class="headerlink" title="1 | 事务的ACID特性"></a>1 | 事务的ACID特性</h2><ul><li>原子性Atomicity: 事务要么全做, 要么全不做</li><li>一致性Consistency: 事务让数据库从一个一致性状态—&gt;另一个一致性状态</li><li>隔离性Isolation: 事务的执行不能被其他事务干扰</li><li>持续性Durability: 事务提交后对数据库中数据的改变为永久性的</li></ul><h2 id="2-并发控制"><a href="#2-并发控制" class="headerlink" title="2 | 并发控制"></a>2 | 并发控制</h2><p>几种并发冲突:</p><ol><li><strong>丢失修改</strong> (写-写冲突)</li><li><strong>不可重复读</strong> (读-写冲突)</li><li><strong>读“脏”数据</strong> (写-读冲突)</li></ol><h2 id="3-封锁机制"><a href="#3-封锁机制" class="headerlink" title="3 | 封锁机制"></a>3 | 封锁机制</h2><p><strong>X锁</strong>: 排他锁, 持有X锁的人能读写数据库</p><p><strong>S锁:</strong> 共享锁, 持有S锁的人能读不能写数据库</p><p>仅能有一个事务拥有X锁, 可以有多个事务同时拥有S锁</p><h3 id="一级封锁协议"><a href="#一级封锁协议" class="headerlink" title="一级封锁协议"></a>一级封锁协议</h3><p>修改数据之前先加X锁, 事务结束后释放</p><p>解决问题: <strong>丢失修改</strong></p><h3 id="二级封锁协议"><a href="#二级封锁协议" class="headerlink" title="二级封锁协议"></a>二级封锁协议</h3><p>在一级封锁协议基础上增加在读取数据前必须对数据加S锁, 读完后即可释放</p><p>解决问题: <strong>丢失修改和读“脏”数据</strong></p><h3 id="三级封锁协议"><a href="#三级封锁协议" class="headerlink" title="三级封锁协议"></a>三级封锁协议</h3><p>在一级封锁协议的基础上增加在读取数据前必须对数据加S锁, 在事务结束后才可释放</p><p>解决问题: <strong>丢失修改, 不可重复读, 读“脏”数据</strong></p><h2 id="4-并发调度的可串行性"><a href="#4-并发调度的可串行性" class="headerlink" title="4 | 并发调度的可串行性"></a>4 | 并发调度的可串行性</h2><p><strong>可串行化调度的定义:</strong></p><blockquote><p>定义: 多个并发事务的执行是正确的, 当且仅当其结果与按一定次序串行地执行这些事务时的结果相同</p></blockquote><p><strong>可串行性</strong>是并发事务正确调度的准则, 一个给定的并发调度当且仅当它是可串行化的才认为是正确的调度</p><p><strong>冲突可串行化调度:</strong></p><p>将并发调度保证冲突操作次序不变的情况下交换不冲突操作的次序得到另一个串行调度, 则称这个并发调度为冲突可串行化的调度, 如果一个调度是冲突可串行化的, 那么则一定是可串行化的调度。</p><p>注意: 冲突可串行化调度是可串行化调度的充分非必要条件</p><h2 id="5-两段锁协议"><a href="#5-两段锁协议" class="headerlink" title="5 | 两段锁协议"></a>5 | 两段锁协议</h2><p>两段锁协议:</p><blockquote><p>先统一加锁, 事务结束时统一释放锁</p></blockquote><ul><li>遵守两段锁协议也会发生死锁</li><li>遵守两段锁协议是可串行化调度的充分条件</li></ul><p>原博客转载于：<a href="https://blog.roccoshi.top/">https://blog.roccoshi.top/</a> + 本人增删修改</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2022三月刷题日记</title>
    <link href="/2022/03/11/LeetCode%202022%E4%B8%89%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/03/11/LeetCode%202022%E4%B8%89%E6%9C%88%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="LC-232-用栈实现队列"><a href="#LC-232-用栈实现队列" class="headerlink" title="LC 232.用栈实现队列"></a>LC 232.用栈实现队列</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>请你仅使用两个栈实现先入先出队列,队列支持一般队列支持的所有操作（push、pop、peek、empty） 实现 MyQueue 类： </p><p>void push(int x) 将元素 x 推到队列的末尾 </p><p>int pop() 从队列的开头移除并返回元素 </p><p>int peek() 返回队列开头的元素 </p><p>boolean empty() 如果队列为空，返回 true ；否则，返回 false  </p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>栈、队列和模拟的综合应用</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    stack&lt;<span class="hljs-type">int</span>&gt; stIn;  <span class="hljs-comment">//创建一个栈stIn 用于进栈</span><br>    stack&lt;<span class="hljs-type">int</span>&gt; stOut; <span class="hljs-comment">//创建一个栈stOut 用于出栈</span><br>    <span class="hljs-built_in">MyQueue</span>() &#123;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        stIn.<span class="hljs-built_in">push</span>(x);  <span class="hljs-comment">//将元素压入栈中</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(stOut.<span class="hljs-built_in">empty</span>())  <span class="hljs-comment">//如果栈stOut为空 则将栈stIn中所有元素压入栈stOut中</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(!stIn.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                stOut.<span class="hljs-built_in">push</span>(stIn.<span class="hljs-built_in">top</span>());  <span class="hljs-comment">//将栈stIn栈顶元素压入栈stOut中</span><br>                stIn.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">//栈顶元素压入栈stOut后将元素删除</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//当栈stOut不为空时 则直接弹出栈stOut栈顶元素</span><br>        <span class="hljs-type">int</span> res = stOut.<span class="hljs-built_in">top</span>();<br>        stOut.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">//直接使用已有的pop函数获取栈顶元素</span><br>        stOut.<span class="hljs-built_in">push</span>(res);  <span class="hljs-comment">//因为pop函数弹出了元素res 所以再添加回去</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stIn.<span class="hljs-built_in">empty</span>() &amp;&amp; stOut.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">//当栈stIn和栈stOut都不为空时 队列才不为空</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>LeetCode题解+动画演示：<a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/solution/232-yong-zhan-shi-xian-dui-lie-liang-ge-zhan-lai-m/">https://leetcode-cn.com/problems/implement-queue-using-stacks/solution/232-yong-zhan-shi-xian-dui-lie-liang-ge-zhan-lai-m/</a></p><h2 id="LC-225-用队列实现栈"><a href="#LC-225-用队列实现栈" class="headerlink" title="LC 225.用队列实现栈"></a>LC 225.用队列实现栈</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、 pop 和 empty）。 实现 MyStack 类： </p><p>void push(int x) 将元素 x 压入栈顶。 </p><p>int pop() 移除并返回栈顶元素。 </p><p>int top() 返回栈顶元素。 </p><p>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。  </p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>栈、队列和模拟的综合应用</p><p><strong>方法1：两个队列实现栈</strong> </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    queue&lt;<span class="hljs-type">int</span>&gt; queue1;  <span class="hljs-comment">//创建一个队列queue1 用于存储所有入栈元素</span><br>    queue&lt;<span class="hljs-type">int</span>&gt; queue2;  <span class="hljs-comment">//创建一个队列queue2 用于临时存储即将入栈的元素</span><br>    <span class="hljs-built_in">MyStack</span>() &#123;<br>    &#125;<br>    <br>    <span class="hljs-comment">//使用两个队列模拟元素入栈</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        queue2.<span class="hljs-built_in">push</span>(x);  <span class="hljs-comment">//将入栈元素插入临时队列queue2</span><br>        <span class="hljs-keyword">while</span>(!queue1.<span class="hljs-built_in">empty</span>())  <span class="hljs-comment">//将队列queue1中所有元素插入临时队列queue2</span><br>        &#123;<br>            queue2.<span class="hljs-built_in">push</span>(queue1.<span class="hljs-built_in">front</span>());  <span class="hljs-comment">//将队列queue1中头元素插入队列queue2中</span><br>            queue1.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">//删除队列queue1头元素</span><br>        &#125;<br>        <span class="hljs-built_in">swap</span>(queue1,queue2);  <span class="hljs-comment">//为了避免打乱元素顺序 交换队列queue1和queue2</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = queue1.<span class="hljs-built_in">front</span>();<br>        queue1.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = queue1.<span class="hljs-built_in">front</span>();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queue1.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">//因为queue1包含了栈中所有元素 所以只需要检查queue1是否为空即可</span><br>        <span class="hljs-comment">//queue2作为临时队列 不永久存储栈中的元素</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法二：一个队列实现栈</strong></p><p>入栈操作时，首先获得入栈前的元素个数 n，然后将元素入队到队列，再将队列中的前 n 个元素（即除了新入栈的元素之外的全部元素）依次出队并入队到队列，此时队列的前端的元素即为新入栈的元素，且队列的前端和后端分别对应栈顶和栈底。   </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-built_in">MyStack</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = q.<span class="hljs-built_in">size</span>();<br>        q.<span class="hljs-built_in">push</span>(x);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            q.<span class="hljs-built_in">push</span>(q.<span class="hljs-built_in">front</span>());<br>            q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> r = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> r = q.<span class="hljs-built_in">front</span>();<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> q.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>LeetCode题解：<a href="https://leetcode-cn.com/problems/implement-stack-using-queues/solution/yong-dui-lie-shi-xian-zhan-by-leetcode-solution/">https://leetcode-cn.com/problems/implement-stack-using-queues/solution/yong-dui-lie-shi-xian-zhan-by-leetcode-solution/</a></p><h2 id="LC-112-二叉树路径总和"><a href="#LC-112-二叉树路径总和" class="headerlink" title="LC 112.二叉树路径总和"></a>LC 112.二叉树路径总和</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。  </p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>本题核心思想是对树进行一次遍历，在遍历是记录从根节点到当前节点的路径总和，以防止重复计算。</p><p><strong>方法1：广度优先搜索</strong> </p><p>使用广度优先搜索的方式，记录从根节点到当前节点的路径和，以防止重复计算。 这样我们可以使用两个队列，分别存储将要遍历的节点，以及根节点到这些节点的路径和。   </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> targetSum)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)  <span class="hljs-comment">//首先判断根节点是否存在</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        queue&lt;TreeNode*&gt; que_node;  <span class="hljs-comment">//定义一个队列 用于存储将要遍历的结点</span><br>        queue&lt;<span class="hljs-type">int</span>&gt; que_val;  <span class="hljs-comment">//定义一个队列 用于记录从根节点到当前节点路径和</span><br>        que_node.<span class="hljs-built_in">push</span>(root);  <span class="hljs-comment">//将根节点加入第一个队列</span><br>        que_val.<span class="hljs-built_in">push</span>(root-&gt;val);  <span class="hljs-comment">//将根节点的值加入第二个队列</span><br>        <span class="hljs-comment">//迭代循环队列 直到队列为空</span><br>        <span class="hljs-keyword">while</span>(!que_node.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            TreeNode* now = que_node.<span class="hljs-built_in">front</span>();<br>            <span class="hljs-type">int</span> temp = que_val.<span class="hljs-built_in">front</span>();<br>            que_node.<span class="hljs-built_in">pop</span>();<br>            que_val.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(now-&gt;left == <span class="hljs-literal">nullptr</span> &amp;&amp; now-&gt;right == <span class="hljs-literal">nullptr</span>)  <span class="hljs-comment">//不存在左右节点 则为叶节点</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(temp == targetSum)  <span class="hljs-comment">//判断路径和与目标值是否相等</span><br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//不相等则迭代继续</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(now-&gt;left != <span class="hljs-literal">nullptr</span>)  <span class="hljs-comment">//存在左子节点</span><br>            &#123;<br>                que_node.<span class="hljs-built_in">push</span>(now-&gt;left);  <span class="hljs-comment">//将左子节点加入第一个队列</span><br>                que_val.<span class="hljs-built_in">push</span>(now-&gt;left-&gt;val + temp);<span class="hljs-comment">//将左子节点值与当前路径和相加加入第二个队列</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(now-&gt;right != <span class="hljs-literal">nullptr</span>)  <span class="hljs-comment">//存在右子节点</span><br>            &#123;<br>                que_node.<span class="hljs-built_in">push</span>(now-&gt;right);  <span class="hljs-comment">//将右子节点加入第一个队列</span><br>                que_val.<span class="hljs-built_in">push</span>(now-&gt;right-val + temp);<span class="hljs-comment">//将右子节点值与当前路径和相加加入第二个队列</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">//没有满足条件的 返回false</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2：递归</strong> </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(TreeNode *root, <span class="hljs-type">int</span> sum)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root-&gt;left == <span class="hljs-literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> sum == root-&gt;val;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hasPathSum</span>(root-&gt;left, sum - root-&gt;val) <br>               <span class="hljs-built_in">hasPathSum</span>(root-&gt;right, sum - root-&gt;val);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>LeetCode题解：<a href="https://leetcode-cn.com/problems/path-sum/solution/lu-jing-zong-he-by-leetcode-solution/">https://leetcode-cn.com/problems/path-sum/solution/lu-jing-zong-he-by-leetcode-solution/</a></p><h2 id="LC-98-验证二叉搜索树"><a href="#LC-98-验证二叉搜索树" class="headerlink" title="LC 98.验证二叉搜索树"></a>LC 98.验证二叉搜索树</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。  </p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><blockquote><p>有效二叉搜索树定义：<br>1.节点左子树只包含小于当前节点的数<br>2.节点右子树只包含大于当前节点的数<br>3.所有左子树和右子树自身必须也是二叉搜索树  </p></blockquote><p><strong>方法1：递归法</strong> </p><p>定义一个函数bool helper(TreeNode*,long long int lower,long long int upper) 如果上界和下界存在，判断当前节点的值是否在界内，如果不在界内，返回false。将当前节点的值作为上界，继续对node-&gt;left进行递归；将当前节点作为下界，继续对node-&gt;right进行递归。   </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">helper</span><span class="hljs-params">(TreeNode* root,<span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> lower,<span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> upper)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">//空节点是合理的二叉搜索树</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(root-&gt;val &lt;= lower  root-&gt;val &gt;= upper)  <span class="hljs-comment">//节点不为空，判断节点上的值是否在上下界内</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//更改上下界 递归遍历二叉树的左右子树</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">helper</span>(root-&gt;left,lower,root-&gt;val) &amp;&amp; <span class="hljs-built_in">helper</span>(root-&gt;right,root-&gt;val,upper);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">helper</span>(root,LONG_MIN,LONG_MAX);  <span class="hljs-comment">//从根节点开始，上下界都为空</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2：中序遍历</strong> </p><p>根据二叉搜索树的性质，得知二叉搜索树中序遍历得到的值构成的序列一定是升序的，在中序遍历的时候实时检查当前节点的值是否大于前一个中序遍历到的节点的值即可。如果均大于说明这个序列是升序的，整棵树是二叉搜索树，否则不是。</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        stack&lt;TreeNode*&gt; stack;  <span class="hljs-comment">//定义栈stack来存储未拜访过的树节点</span><br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> inorder = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)INT_MIN<span class="hljs-number">-1</span>;  <span class="hljs-comment">//inorder用来存储上一个遍历到的树节点的值</span><br>        <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>() || root != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-comment">//不断将root的左子节点加入栈 直到没有剩余的左节点</span><br>            <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                stack.<span class="hljs-built_in">push</span>(root);<br>                root = root-&gt;left;<br>            &#125;<br>            root = stack.<span class="hljs-built_in">top</span>();<br>            stack.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">//将当前子树最左边的节点从stack中取出</span><br>            <span class="hljs-comment">//如果中序遍历得到的节点的值小于等于前一个inorder，说明不是二叉搜索树</span><br>            <span class="hljs-keyword">if</span> (root-&gt;val &lt;= inorder)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            inorder = root-&gt;val;  <span class="hljs-comment">//将inorder设为当前节点的值</span><br>            root = root-&gt;right;  <span class="hljs-comment">//将root设为当前节点的右子节点，继续循环</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>LeetCode题解：<a href="https://leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode-solution/">https://leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode-solution/</a></p><h2 id="LC-15-三数之和"><a href="#LC-15-三数之和" class="headerlink" title="LC 15.三数之和"></a>LC 15.三数之和</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。 注意：答案中不可以包含重复的三元组。  </p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p><strong>方法1：排序+双指针</strong> </p><blockquote><p>关键字：不可以包含重复<br>模式识别：利用排序避免重复答案<br>降低复杂度变成twoSum<br>利用双指针找到所有解<br>数组有序，和为定值的两个数一定可以通过头尾指针向中间移动获得。<br>关键去重，每次移动跳过与当前值相同的元素，枚举第三个元素也要跳过重复元素。</p></blockquote><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">//对数组进行排序方便去重</span><br>        <span class="hljs-comment">//枚举a</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>])  <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//去重，需要和上次遍历的元素不同</span><br>            <span class="hljs-type">int</span> target = <span class="hljs-number">0</span>-nums[i];  <span class="hljs-comment">//定义目标值target，转化为二元组问题target = b+c</span><br>            <span class="hljs-type">int</span> l = i+<span class="hljs-number">1</span>,r = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;  <span class="hljs-comment">//定义首尾指针，通过首尾指针移动获取定值target</span><br>            <span class="hljs-keyword">while</span>(l&lt;r)  <span class="hljs-comment">//通过首尾指针获取定值target</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[l]+nums[r] == target)<br>                &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(&#123;nums[i],nums[l],nums[r]&#125;);  <span class="hljs-comment">//将符合的元组加入结果ans中</span><br>                    <span class="hljs-keyword">while</span>(l&lt;r &amp;&amp; nums[l] == nums[l+<span class="hljs-number">1</span>])  l++;  <span class="hljs-comment">//去除重复的左指针元素</span><br>                    <span class="hljs-keyword">while</span>(l&lt;r &amp;&amp; nums[r] == nums[r<span class="hljs-number">-1</span>])  r--;  <span class="hljs-comment">//去除重复的右指针元素</span><br>                    l++;  <span class="hljs-comment">//左指针向右移</span><br>                    r--;  <span class="hljs-comment">//右指针向左移</span><br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[l]+nums[r] &gt; target)<br>                &#123;<br>                    r--;  <span class="hljs-comment">//结果大于目标值，右指针向左移</span><br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    l++;  <span class="hljs-comment">//结果小于目标值，左指针向右移</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;  <span class="hljs-comment">//返回结果</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>B站视频讲解：<a href="https://www.bilibili.com/video/BV1Jq4y1A7u7?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1Jq4y1A7u7?spm_id_from=333.337.search-card.all.click</a>  </p><h2 id="LC-705-设计哈希集合"><a href="#LC-705-设计哈希集合" class="headerlink" title="LC 705.设计哈希集合"></a>LC 705.设计哈希集合</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h3><p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。 实现 MyHashSet 类： </p><p>void add(key) 向哈希集合中插入值 key 。 </p><p>bool contains(key) 返回哈希集合中是否存在这个值 key 。 </p><p>void remove(key) 将给定值 key 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。  </p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><blockquote><p>为了实现哈希集合这一数据结构，有以下几个关键问题需要解决：<br>1.哈希函数：能够将集合中任意可能的元素映射到一个固定范围的整数值，并将该元素存储到整数值对应的地址上。<br>2.冲突处理：由于不同元素可能映射到相同的整数值，因此需要在整数值出现冲突时，需要进行冲突处理。总的来说，有以下几种策略解决冲突：<br>链地址法：为每个哈希值维护一个链表，并将具有相同哈希值的元素都放入这一链表当中。<br>开放地址法：当发现哈希值 hh 处产生冲突时，根据某种策略，从 hh 出发找到下一个不冲突的位  置。例如，一种最简单的策略是，不断地检查 h+1,h+2,h+3,… 这些整数对应的位置。<br>再哈希法：当发现哈希冲突后，使用另一个哈希函数产生一个新的地址。<br>3.扩容：当哈希表元素过多时，冲突的概率将越来越大，而在哈希表中查询一个元素的效率也会越来越低。因此，需要开辟一块更大的空间，来缓解哈希表中发生的冲突。  </p></blockquote><p><strong>方法1：链地址法</strong> </p><p>设哈希表的大小为 base，则可以设计一个简单的哈希函数：hash(x) = x mod base。 开辟一个大小为 base 的数组，数组的每个位置是一个链表。当计算出哈希值之后，就插入到对应位置的链表当中。 由于使用整数除法作为哈希函数，为了尽可能避免冲突，应当将 base 取为一个质数。取 base=769。   </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHashSet</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;list&lt;<span class="hljs-type">int</span>&gt;&gt; data;  <span class="hljs-comment">//定义一个数组base,数组的每一个位置是一个链表</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> base = <span class="hljs-number">769</span>;  <span class="hljs-comment">//定义哈希表的大小</span><br>    <span class="hljs-comment">//用链地址法设计一个哈希表</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> key % base;<br>    &#125;<br><br>    <span class="hljs-built_in">MyHashSet</span>():<span class="hljs-built_in">data</span>(base) &#123;&#125;<br><br>    <span class="hljs-comment">//插入</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> h = <span class="hljs-built_in">hash</span>(key);  <span class="hljs-comment">//找出key在哈希表中对应的位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=data[h].<span class="hljs-built_in">begin</span>(); it!=data[h].<span class="hljs-built_in">end</span>(); it++)  <span class="hljs-comment">//迭代法遍历key在哈希表中对应位置的链表</span><br>        &#123;<br>            <span class="hljs-comment">//如果插入元素存在 则返回空</span><br>            <span class="hljs-keyword">if</span>(*it == key)<br>            &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果元素不存在则插入元素</span><br>        data[h].<span class="hljs-built_in">push_back</span>(key);<br>    &#125;<br><br>    <span class="hljs-comment">//删除</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> h = <span class="hljs-built_in">hash</span>(key);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=data[h].<span class="hljs-built_in">begin</span>(); it!=data[h].<span class="hljs-built_in">end</span>(); it++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(*it == key)<br>            &#123;<br>                data[h].<span class="hljs-built_in">erase</span>(it);<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    注意：data\[h\].erase(it) 这里的it不可写成\*it或者key</span><br><span class="hljs-comment">                    因为删除的是key在链表上的地址而不是值</span><br><span class="hljs-comment">                */</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//判断key是否存在</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> h = <span class="hljs-built_in">hash</span>(key);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=data[h].<span class="hljs-built_in">begin</span>(); it!=data[h].<span class="hljs-built_in">end</span>(); it++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(*it == key)  <span class="hljs-comment">/* 注意：*it */</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p> </p><h2 id="LC-706-设计哈希映射"><a href="#LC-706-设计哈希映射" class="headerlink" title="LC 706.设计哈希映射"></a>LC 706.设计哈希映射</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a>题目大意</h3><p>不使用任何内建的哈希表库设计一个哈希映射（HashMap）。 实现 MyHashMap 类： </p><p>MyHashMap() 用空映射初始化对象 </p><p>void put(int key, int value) 向 HashMap 插入一个键值对 (key, value) 。如果 key 已经存在于映射中，则更新其对应的值 value 。 </p><p>int get(int key) 返回特定的 key 所映射的 value ；如果映射中不包含 key 的映射，返回 -1 。 </p><p>void remove(key) 如果映射中存在 key 的映射，则移除 key 和它所对应的 value 。  </p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p><strong>设计哈希映射</strong> 与 <strong>设计哈希集合</strong> 解法接近，唯一的区别在于哈希映射存储的不是 key 本身，而是键值对(key,value)。   </p><blockquote><p>哈希表增加键值对的函数：map1.insert(make_pair(n,1))<br>哈希表删除键值对的函数：data[h].erase(it)<br>哈希表使用迭代器遍历时：<br>i-&gt;first：表示键<br>i-&gt;second：表示值  </p></blockquote><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHashMap</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;list&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;&gt; data;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> base = <span class="hljs-number">769</span>;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> key % base;<br>    &#125;<br><br>    <span class="hljs-built_in">MyHashMap</span>():<span class="hljs-built_in">data</span>(base) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-type">int</span> h = <span class="hljs-built_in">hash</span>(key);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=data[h].<span class="hljs-built_in">begin</span>(); it!=data[h].<span class="hljs-built_in">end</span>(); it++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(it-&gt;first == key)<br>            &#123;<br>                it-&gt;second = value;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        data[h].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(key,value));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> h = <span class="hljs-built_in">hash</span>(key);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=data[h].<span class="hljs-built_in">begin</span>(); it!=data[h].<span class="hljs-built_in">end</span>(); it++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(it-&gt;first == key)<br>            &#123;<br>                <span class="hljs-keyword">return</span> it-&gt;second;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> h = <span class="hljs-built_in">hash</span>(key);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=data[h].<span class="hljs-built_in">begin</span>(); it!=data[h].<span class="hljs-built_in">end</span>(); it++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(it-&gt;first == key)<br>            &#123;<br>                data[h].<span class="hljs-built_in">erase</span>(it);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
      <tag>队列</tag>
      
      <tag>二叉树</tag>
      
      <tag>二叉搜索树</tag>
      
      <tag>排序</tag>
      
      <tag>双指针</tag>
      
      <tag>哈希</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="/2022/03/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2022/03/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="LC-144-二叉树的前序遍历"><a href="#LC-144-二叉树的前序遍历" class="headerlink" title="LC 144.二叉树的前序遍历"></a>LC 144.二叉树的前序遍历</h2><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p><strong>参数传递时什么时候需要传入参数的引用&amp;</strong></p><p>当对参数的修改结果需要带回主函数时在传递参数时则需要在参数前加取地址符&amp; </p><p>CSDN博客：（易错点）什么时候要传入参数的引用“&amp;“：<a href="https://blog.csdn.net/dyw_666666/article/details/107823466">https://blog.csdn.net/dyw_666666/article/details/107823466</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根-&gt;左-&gt;右   </p><p><strong>方法一：递归法</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">AC代码：<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt; &amp;res)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        <span class="hljs-built_in">preorder</span>(root-&gt;left,res);<br>        <span class="hljs-built_in">preorder</span>(root-&gt;right,res);<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-built_in">preorder</span>(root,res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法二：迭代法</strong> </p><p>方法1中的递归函数可以用迭代的方法实现，迭代法利用栈来遍历二叉树</p><p>LeetCode题解+动画演示 <a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/er-cha-shu-de-qian-xu-bian-li-by-leetcode-solution/">二叉树前序遍历 迭代法</a> </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        stack&lt;TreeNode*&gt; stk;<br>        TreeNode* node = root;<br>        <span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>() || node != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">nullptr</span>) &#123;<br>                res.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>                stk.<span class="hljs-built_in">emplace</span>(node);<br>                node = node-&gt;left;<br>            &#125;<br>            node = stk.<span class="hljs-built_in">top</span>();<br>            stk.<span class="hljs-built_in">pop</span>();<br>            node = node-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p> </p><h2 id="LC-94-二叉树的中序遍历"><a href="#LC-94-二叉树的中序遍历" class="headerlink" title="LC 94.二叉树的中序遍历"></a>LC 94.二叉树的中序遍历</h2><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p><strong>方法1：递归法</strong></p><p>左-&gt;根-&gt;右   </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt; &amp;ans)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">inorder</span>(root-&gt;left,ans);<br>        ans.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        <span class="hljs-built_in">inorder</span>(root-&gt;right,ans);<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-built_in">inorder</span>(root,ans);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p> <strong>方法2：迭代法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> ans;<br>        stack&lt;TreeNode*&gt; stk;<br>        <span class="hljs-keyword">while</span>(!stk.<span class="hljs-built_in">empty</span>() || root != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                stk.<span class="hljs-built_in">push</span>(root);<br>                root = root-&gt;left;<br>            &#125;<br>            root = stk.<span class="hljs-built_in">top</span>();<br>            stk.<span class="hljs-built_in">pop</span>();<br>            ans.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>            root = root-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-145-二叉树的后序遍历"><a href="#LC-145-二叉树的后序遍历" class="headerlink" title="LC 145.二叉树的后序遍历"></a>LC 145.二叉树的后序遍历</h2><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>左-&gt;右-&gt;根   </p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt; &amp;ans)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">postorder</span>(root-&gt;left,ans);<br>        <span class="hljs-built_in">postorder</span>(root-&gt;right,ans);<br>        ans.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-built_in">postorder</span>(root,ans);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LC-102-二叉树的层序遍历"><a href="#LC-102-二叉树的层序遍历" class="headerlink" title="LC 102.二叉树的层序遍历"></a>LC 102.二叉树的层序遍历</h2><h3 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h3><p><strong>核心思想</strong></p><p>二叉树 队列 广度优先搜索  </p><p><strong>二维vector容器的使用</strong></p><p>res.push_back(vector&lt;int&gt;());  //向二维vector容器res中添加一行</p><p>res.back().push_back(node-&gt;val);  //向二维容器的最后一行插入一个元素node-&gt;val</p><p>其中res.back()是指二维容器res的最后一行</p><p>关于C++中vector&lt;vector&lt;int&gt; &gt;的使用：<a href="https://www.cnblogs.com/tyty-Somnuspoppy/p/9361821.html">https://www.cnblogs.com/tyty-Somnuspoppy/p/9361821.html</a></p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><blockquote><p>用广度优先搜索+队列解决二叉树的层序遍历 我们可以用一种巧妙的方法修改广度优先搜索： 首先根元素入队 当队列不为空的时候 求当前队列的长度 currentLevelSize 依次从队列中取currentLevelSize个元素进行拓展，然后进入下一次迭代 它和普通广度优先搜索的区别在于，普通广度优先搜索每次只取一个元素拓展，而这里每次取currentLevelSize个元素。在上述过程中的第 i 次迭代就得到了二叉树的第 i层的 currentLevelSize个元素。</p></blockquote><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">levelOrder</span>(TreeNode* root) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;  <span class="hljs-comment">//定义二维vector容器res用来存储树中元素</span><br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        queue&lt;TreeNode*&gt; q;  <span class="hljs-comment">//定义队列q临时存储树中元素</span><br>        q.<span class="hljs-built_in">push</span>(root);  <span class="hljs-comment">//将树的根节点插入队列</span><br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> currentLevelSize = q.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">//定义队列的当前长度currentLevelSize</span><br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;());  <span class="hljs-comment">//向二维vector容器res中添加一行</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=currentLevelSize; i++)<br>            &#123;<br>                <span class="hljs-keyword">auto</span> node = q.<span class="hljs-built_in">front</span>();  <span class="hljs-comment">//定义临时结点node为队列头结点</span><br>                q.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">//弹出队列头结点</span><br>                res.<span class="hljs-built_in">back</span>().<span class="hljs-built_in">push_back</span>(node-&gt;val);  <span class="hljs-comment">//将队列头结点元素的值存入res中</span><br>                <span class="hljs-comment">//将结点的左右儿子节点插入队列中</span><br>                <span class="hljs-keyword">if</span>(node-&gt;left)<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(node-&gt;right)<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ vector容器浅析</title>
    <link href="/2022/03/04/C++%20vector%E5%AE%B9%E5%99%A8%E6%B5%85%E6%9E%90/"/>
    <url>/2022/03/04/C++%20vector%E5%AE%B9%E5%99%A8%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><strong>C++ vector容器浅析：<a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html">https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html</a></strong></p><h2 id="1-什么是vector？"><a href="#1-什么是vector？" class="headerlink" title="1. 什么是vector？"></a>1. 什么是vector？</h2><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p><h2 id="2-容器特性"><a href="#2-容器特性" class="headerlink" title="2. 容器特性"></a>2. 容器特性</h2><ol><li><p><strong>顺序序列</strong></p><p>顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。</p></li><li><p><strong>动态数组</strong></p><p>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。提供了在序列末尾相对快速地添加/删除元素的操作。</p></li><li><p><strong>能够感知内存分配器的（Allocator-aware）</strong></p><p>容器使用一个内存分配器对象来动态地处理它的存储需求。</p></li></ol><h2 id="3-基本函数实现"><a href="#3-基本函数实现" class="headerlink" title="3. 基本函数实现"></a>3. 基本函数实现</h2><ol><li><p><strong>构造函数</strong></p><ul><li>vector():创建一个空vector</li><li>vector(int nSize):创建一个vector,元素个数为nSize</li><li>vector(int nSize,const t&amp; t):创建一个vector，元素个数为nSize,且值均为t</li><li>vector(const vector&amp;):复制构造函数</li><li>vector(begin,end):复制[begin,end)区间内另一个数组的元素到vector中</li></ul></li><li><p><strong>增加函数</strong></p><ul><li>void push_back(const T&amp; x):向量尾部增加一个元素X</li><li>iterator insert(iterator it,const T&amp; x):向量中迭代器指向元素前增加一个元素x</li><li>iterator insert(iterator it,int n,const T&amp; x):向量中迭代器指向元素前增加n个相同的元素x</li><li>iterator insert(iterator it,const_iterator first,const_iterator last):向量中迭代器指向元素前插入另一个相同类型向量的[first,last)间的数据</li></ul></li><li><p><strong>删除函数</strong></p><ul><li>iterator erase(iterator it):删除向量中迭代器指向元素</li><li>iterator erase(iterator first,iterator last):删除向量中[first,last)中元素</li><li>void pop_back():删除向量中最后一个元素</li><li>void clear():清空向量中所有元素</li></ul></li><li><p><strong>遍历函数</strong></p><ul><li>reference at(int pos):返回pos位置元素的引用</li><li>reference front():返回首元素的引用</li><li>reference back():返回尾元素的引用</li><li>iterator begin():返回向量头指针，指向第一个元素</li><li>iterator end():返回向量尾指针，指向向量最后一个元素的下一个位置</li><li>reverse_iterator rbegin():反向迭代器，指向最后一个元素</li><li>reverse_iterator rend():反向迭代器，指向第一个元素之前的位置</li></ul></li><li><p><strong>判断函数</strong></p><ul><li>bool empty() const:判断向量是否为空，若为空，则向量中无元素</li></ul></li><li><p><strong>大小函数</strong></p><ul><li>int size() const:返回向量中元素的个数</li><li>int capacity() const:返回当前向量所能容纳的最大元素值</li><li>int max_size() const:返回最大可允许的vector元素数量值</li></ul></li><li><p><strong>其他函数</strong></p><ul><li>void swap(vector&amp;):交换两个同类型向量的数据</li><li>void assign(int n,const T&amp; x):设置向量中前n个元素的值为x</li><li>void assign(const_iterator first,const_iterator last):向量中[first,last)中元素设置成当前向量元素</li></ul></li><li><p><strong>看着清楚</strong></p><blockquote><p>1.push_back 在数组的最后添加一个数据</p><p>2.pop_back 去掉数组的最后一个数据</p><p>3.at 得到编号位置的数据</p><p>4.begin 得到数组头的指针</p><p>5.end 得到数组的最后一个单元+1的指针</p><p>6．front 得到数组头的引用</p><p>7.back 得到数组的最后一个单元的引用</p><p>8.max_size 得到vector最大可以是多大</p><p>9.capacity 当前vector分配的大小</p><p>10.size 当前使用数据的大小</p><p>11.resize 改变当前使用数据的大小，如果它比当前使用的大，者填充默认值</p><p>12.reserve 改变当前vecotr所分配空间的大小</p><p>13.erase 删除指针指向的数据项</p><p>14.clear 清空当前的vector</p><p>15.rbegin 将vector反转后的开始指针返回(其实就是原来的end-1)</p><p>16.rend 将vector反转构的结束指针返回(其实就是原来的begin-1)</p><p>17.empty 判断vector是否为空</p><p>18.swap 与另一个vector交换数据</p></blockquote></li></ol><h2 id="4-基本用法"><a href="#4-基本用法" class="headerlink" title="4. 基本用法"></a>4. 基本用法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><h2 id="5-简单介绍"><a href="#5-简单介绍" class="headerlink" title="5. 简单介绍"></a>5. 简单介绍</h2><ol><li>Vector&lt;类型&gt;标识符</li><li>Vector&lt;类型&gt;标识符(最大容量)</li><li>Vector&lt;类型&gt;标识符(最大容量,初始所有值)</li><li>Int i[5]={1,2,3,4,5}<br>Vector&lt;类型&gt;vi(I,i+2);//得到i索引值为3以后的值</li><li>Vector&lt; vector&lt; int&gt; &gt;v; 二维向量//这里最外的&lt;&gt;要有空格。否则在比较旧的编译器下无法通过</li></ol><h2 id="6-实例"><a href="#6-实例" class="headerlink" title="6. 实例"></a>6. 实例</h2><p><strong>1.pop_back()&amp;push_back(elem)实例在容器最后移除和插入数据</strong></p><p>实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;obj;<span class="hljs-comment">//创建一个向量存储容器 int</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) <span class="hljs-comment">// push_back(elem)在数组最后添加数据 </span><br>    &#123;<br>        obj.<span class="hljs-built_in">push_back</span>(i);<br>        cout&lt;&lt;obj[i]&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>;    <br>    &#125;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<span class="hljs-comment">//去掉数组最后一个数据 </span><br>    &#123;<br>        obj.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>&lt;&lt;endl;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;obj.<span class="hljs-built_in">size</span>();i++)<span class="hljs-comment">//size()容器中实际数据个数 </span><br>    &#123;<br>        cout&lt;&lt;obj[i]&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<br><span class="hljs-attribute">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<br></code></pre></td></tr></table></figure><p><strong>2.clear()清除容器中所有数据</strong></p><p>实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;obj;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<span class="hljs-comment">//push_back(elem)在数组最后添加数据 </span><br>    &#123;<br>        obj.<span class="hljs-built_in">push_back</span>(i);<br>        cout&lt;&lt;obj[i]&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>;<br>    &#125;<br> <br>    obj.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清除容器中所以数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;obj.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        cout&lt;&lt;obj[i]&lt;&lt;endl;<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<br></code></pre></td></tr></table></figure><p><strong>3.排序</strong></p><p>实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;obj;<br> <br>    obj.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    obj.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    obj.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">sort</span>(obj.<span class="hljs-built_in">begin</span>(),obj.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//从小到大</span><br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;从小到大:&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;obj.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        cout&lt;&lt;obj[i]&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>;  <br>    &#125; <br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>&lt;&lt;endl;<br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;从大到小:&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">reverse</span>(obj.<span class="hljs-built_in">begin</span>(),obj.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//从大到小 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;obj.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        cout&lt;&lt;obj[i]&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">从小到大:</span><br>0,1,3,<br><span class="hljs-section">从大到小:</span><br>3,1,0,<br></code></pre></td></tr></table></figure><p>1.注意 sort 需要头文件 <strong>#include &lt;algorithm&gt;</strong></p><p>2.如果想 sort 来降序，可重写 sort</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">return</span> a&lt; b; <span class="hljs-comment">//升序排列，如果改为return a&gt;b，则为降序 </span><br>&#125; <br><span class="hljs-type">int</span> a[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">5</span>,<span class="hljs-number">76</span>,<span class="hljs-number">0</span>,<span class="hljs-number">43</span>,<span class="hljs-number">24</span>,<span class="hljs-number">65</span>&#125;,i; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) <br>    cout&lt;&lt; a[i]&lt;&lt; endl; <br><span class="hljs-built_in">sort</span>(a,a+<span class="hljs-number">20</span>,compare);<br></code></pre></td></tr></table></figure><p><strong>4.访问（直接数组访问&amp;迭代器访问）</strong></p><p>实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//顺序访问</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;obj;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        obj.<span class="hljs-built_in">push_back</span>(i);   <br>    &#125; <br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;直接利用数组：&quot;</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<span class="hljs-comment">//方法一 </span><br>    &#123;<br>        cout&lt;&lt;obj[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br> <br>    cout&lt;&lt;endl; <br>    cout&lt;&lt;<span class="hljs-string">&quot;利用迭代器：&quot;</span> ;<br>    <span class="hljs-comment">//方法二，使用迭代器将容器中数据输出 </span><br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;<span class="hljs-comment">//声明一个迭代器，来访问vector容器，作用：遍历或者指向vector容器的元素 </span><br>    <span class="hljs-keyword">for</span>(it=obj.<span class="hljs-built_in">begin</span>();it!=obj.<span class="hljs-built_in">end</span>();it++)<br>    &#123;<br>        cout&lt;&lt;*it&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">直接利用数组：0<span class="hljs-number"> 1 </span>2<span class="hljs-number"> 3 </span>4<span class="hljs-number"> 5 </span>6<span class="hljs-number"> 7 </span>8<span class="hljs-number"> 9 </span><br>利用迭代器：0<span class="hljs-number"> 1 </span>2<span class="hljs-number"> 3 </span>4<span class="hljs-number"> 5 </span>6<span class="hljs-number"> 7 </span>8 9<br></code></pre></td></tr></table></figure><p>5.<strong>二维数组两种定义方法</strong></p><p><strong>方法一</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> N=<span class="hljs-number">5</span>, M=<span class="hljs-number">6</span>; <br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">obj</span>(N); <span class="hljs-comment">//定义二维动态数组大小5行 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i&lt; obj.<span class="hljs-built_in">size</span>(); i++)<span class="hljs-comment">//动态二维数组为5行6列，值全为0 </span><br>    &#123; <br>        obj[i].<span class="hljs-built_in">resize</span>(M); <br>    &#125; <br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt; obj.<span class="hljs-built_in">size</span>(); i++)<span class="hljs-comment">//输出二维动态数组 </span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;obj[i].<span class="hljs-built_in">size</span>();j++)<br>        &#123;<br>            cout&lt;&lt;obj[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> N=<span class="hljs-number">5</span>, M=<span class="hljs-number">6</span>; <br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">obj</span>(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(M)); <span class="hljs-comment">//定义二维动态数组5行6列 </span><br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt; obj.<span class="hljs-built_in">size</span>(); i++)<span class="hljs-comment">//输出二维动态数组 </span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;obj[i].<span class="hljs-built_in">size</span>();j++)<br>        &#123;<br>            cout&lt;&lt;obj[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Utils</title>
    <link href="/2022/03/04/Utils/"/>
    <url>/2022/03/04/Utils/</url>
    
    <content type="html"><![CDATA[<p><strong>Convenient Utils And Website</strong></p><ul><li><strong><a href="https://layuion.com/">Layui开源模块化前端 UI 组件库</a></strong></li><li><strong><a href="https://www.bootcss.com/">Bootstrap中文网</a></strong></li><li><strong><a href="https://www.bootcss.com/p/layoutit/">Bootstrap可视化布局系统</a></strong></li><li><strong><a href="https://www.cleverpdf.com/cn">CleverPDF PDF在线工具</a></strong></li><li><strong><a href="https://pdf.online/">PDF.online</a></strong></li><li><strong><a href="https://www.processon.com/">Process On免费在线流程图思维导图</a></strong></li></ul><h2 id="Layui"><a href="#Layui" class="headerlink" title="Layui"></a>Layui</h2><p><strong>开源模块化前端 UI 组件库：<a href="https://layuion.com/">https://layuion.com/</a></strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/Layui%E5%BC%80%E6%BA%90%E6%A8%A1%E5%9D%97%E5%8C%96%E5%89%8D%E7%AB%AF%20UI%20%E7%BB%84%E4%BB%B6%E5%BA%93.png" alt="Layui开源模块化前端 UI 组件库"></p><h2 id="Bootstrap中文网"><a href="#Bootstrap中文网" class="headerlink" title="Bootstrap中文网"></a>Bootstrap中文网</h2><p><strong><a href="https://www.bootcss.com/">https://www.bootcss.com/</a></strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/Bootstrap%E4%B8%AD%E6%96%87%E7%BD%91.png" alt="Bootstrap中文网"></p><h2 id="Bootstrap可视化布局系统"><a href="#Bootstrap可视化布局系统" class="headerlink" title="Bootstrap可视化布局系统"></a>Bootstrap可视化布局系统</h2><p><strong><a href="https://www.bootcss.com/p/layoutit/">https://www.bootcss.com/p/layoutit/</a></strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/Bootstrap%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B8%83%E5%B1%80%E7%B3%BB%E7%BB%9F.png" alt="Bootstrap可视化布局系统"></p><h2 id="CleverPDF"><a href="#CleverPDF" class="headerlink" title="CleverPDF"></a>CleverPDF</h2><p><strong>PDF在线工具<a href="https://www.cleverpdf.com/cn">https://www.cleverpdf.com/cn</a></strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220911192153.png" alt="QQ截图20220911192153"></p><h2 id="PDF-online"><a href="#PDF-online" class="headerlink" title="PDF online"></a>PDF online</h2><p><strong>PDF在线工具：<a href="https://pdf.online/">https://pdf.online/</a></strong></p><p><img src="https://img.yiqiangshiyia.cn/blog/QQ%E6%88%AA%E5%9B%BE20220911192347.png" alt="QQ截图20220911192347"></p>]]></content>
    
    
    <categories>
      
      <category>解忧杂货</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
